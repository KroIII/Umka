
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
    
    ПропускатьСтрокиСНенайденнымиСотрудниками       = КомпоновщикНастроек.ПолучитьНастройки().ПараметрыДанных.Элементы.Найти("ПропускатьСтрокиСНенайденнымиСотрудниками").Значение;
    Период       = КомпоновщикНастроек.ПолучитьНастройки().ПараметрыДанных.Элементы.Найти("ПериодОтчета").Значение;
    КлючПриложения = КомпоновщикНастроек.ПолучитьНастройки().ПараметрыДанных.Элементы.Найти("КлючПриложения").Значение;
    
    СтандартнаяОбработка = Ложь;
    
    //Получаем наш внешний набор данных ТЗ
    
    
    ЗапросИтог = новый запрос;
    ЗапросИтог.Текст = "ВЫБРАТЬ
    |    _РаботыЗаДень.Заявка КАК Заявка,
    |    _РаботыЗаДень.Дата КАК Дата,
    |    _РаботыЗаДень.Сотрудник КАК Сотрудник,
    |    СУММА(_РаботыЗаДень.Часы) КАК Часы,
    |    _РаботыЗаДень.КодСтроки КАК КодСтроки,
    |    _РаботыЗаДень.Описание КАК Описание,
    |    _РаботыЗаДень.Заявка.НомерRM КАК НомерRM
    |ПОМЕСТИТЬ ВтБаза
    |ИЗ
    |    РегистрСведений._РаботыЗаДень КАК _РаботыЗаДень
    |ГДЕ
    |    _РаботыЗаДень.Заявка.НомерRM <> 0
    |    И _РаботыЗаДень.Дата МЕЖДУ &Дата1 И &Дата2
    |
    |СГРУППИРОВАТЬ ПО
    |    _РаботыЗаДень.КодСтроки,
    |    _РаботыЗаДень.Описание,
    |    _РаботыЗаДень.Сотрудник,
    |    _РаботыЗаДень.Дата,
    |    _РаботыЗаДень.Заявка.НомерRM,
    |    _РаботыЗаДень.Заявка
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |    _Заявка.Ссылка КАК Заявка,
    |    _Заявка.НомерRM КАК НомерRM
    |ПОМЕСТИТЬ ВтЗаявки
    |ИЗ
    |    Документ._Заявка КАК _Заявка
    |ГДЕ
    |    _Заявка.НомерRM <> 0
    |
    |СГРУППИРОВАТЬ ПО
    |    _Заявка.Ссылка,
    |    _Заявка.НомерRM
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |    ТЧ.НомерЗадачи КАК НомерЗадачи,
    |    ТЧ.Дата КАК Дата,
    |    ТЧ.проект КАК проект,
    |    ТЧ.НомерЧЛ КАК НомерЧЛ,
    |    ТЧ.сотрудникРМ КАК СотрудникРМ,
    |    ТЧ.Сотрудник КАК Сотрудник,
    |    ТЧ.Описание КАК Описание,
    |    ТЧ.ЧасыRM КАК ЧасыRM
    |ПОМЕСТИТЬ ВтРМ
    |ИЗ
    |    &ТЧ КАК ТЧ
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |    ЕСТЬNULL(ВтБаза.Заявка, ЕСТЬNULL(ВтЗаявки.Заявка, ЗНАЧЕНИЕ(Документ._заявка.пустаяссылка))) КАК Заявка,
    |    ЕСТЬNULL(ВтБаза.Сотрудник, ВтРМ.Сотрудник) КАК Сотрудник,
    |    ЕСТЬNULL(ВтБаза.Часы, 0) КАК Часы,
    |    ЕСТЬNULL(ВтБаза.КодСтроки, """") КАК КодСтроки,
    |    ЕСТЬNULL(ВтБаза.НомерRM, 0) КАК НомерRM,
    |    ЕСТЬNULL(ВтРМ.НомерЗадачи, ЕСТЬNULL(ВтБаза.НомерRM, ВтЗаявки.НомерRM)) КАК НомерЗадачи,
    |    ЕСТЬNULL(ВтРМ.Дата, ВтБаза.Дата) КАК Дата,
    |    ЕСТЬNULL(ВтРМ.НомерЧЛ, """") КАК НомерЧЛ,
    |    ЕСТЬNULL(ВтРМ.Описание, ВтБаза.Описание) КАК Описание,
    |    ЕСТЬNULL(ВтРМ.СотрудникРМ, """") КАК СотрудникРМ,
    |    ЕСТЬNULL(ВтРМ.ЧасыRM, 0) КАК ЧасыRM,
    |    ЕСТЬNULL(ВтБаза.Заявка.Проект, ЕСТЬNULL(ВтЗаявки.Заявка.Проект, ВтРМ.проект)) КАК Проект
    |ИЗ
    |    ВтБаза КАК ВтБаза
    |        ПОЛНОЕ СОЕДИНЕНИЕ ВтРМ КАК ВтРМ
    |            ЛЕВОЕ СОЕДИНЕНИЕ ВтЗаявки КАК ВтЗаявки
    |            ПО ВтРМ.НомерЗадачи = ВтЗаявки.НомерRM
    |        ПО ВтБаза.КодСтроки = ВтРМ.НомерЧЛ";
    
    
    ТЗИтог = новый ТаблицаЗначений;
    ТЗИтог.Колонки.Добавить("НомерЗадачи", новый ОписаниеТипов("Число"));
    ТЗИтог.Колонки.Добавить("Дата", новый ОписаниеТипов("Дата"));
    ТЗИтог.Колонки.Добавить("НомерЧЛ",новый ОписаниеТипов("Строка",,,,новый КвалификаторыСтроки(50,ДопустимаяДлина.Переменная)));
    ТЗИтог.Колонки.Добавить("Сотрудник", новый ОписаниеТипов("СправочникСсылка.Пользователи"));
    ТЗИтог.Колонки.Добавить("СотрудникРМ", новый ОписаниеТипов("Строка"));
    ТЗИтог.Колонки.Добавить("ЧасыRM", новый ОписаниеТипов("Число",,,новый КвалификаторыЧисла(10,2)));
    ТЗИтог.Колонки.Добавить("Описание", новый ОписаниеТипов("строка"));
    ТЗИтог.Колонки.Добавить("Проект", новый ОписаниеТипов("строка",,,,новый КвалификаторыСтроки(100,ДопустимаяДлина.Переменная)));
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   КлючиРедмайн.Пользователь КАК Пользователь,
    |   КлючиРедмайн.КлючПриложения КАК КлючПриложения,
    |   КлючиРедмайн.КодПользователя КАК КодПользователя
    |ИЗ
    |   РегистрСведений._КлючиРедмайн КАК КлючиРедмайн";
    
    Сотрудники = Запрос.Выполнить().Выгрузить();
    Сервер          = "rm.pik.ru";
    Таймаут         = 3;
    HTTPS      = Новый ЗащищенноеСоединениеOpenSSL;
    Соединение = Новый HTTPСоединение(Сервер,,,,,Таймаут, HTTPS);
    
    ПорцияДанных = ПрочитатьДанныеRM(Соединение,);
    РазмерПорции = ПорцияДанных.Количество();
    Смещение     = 0;
    
    РасшифроватьДанныеRM(Соединение,ПорцияДанных,  Сотрудники,ТЗИтог); 
    
    Пока РазмерПорции > 0 Цикл
        Смещение     = Смещение + РазмерПорции;
        ПорцияДанных = ПрочитатьДанныеRM(Соединение, Смещение);
        РазмерПорции = ПорцияДанных.Количество();
        
        РасшифроватьДанныеRM(Соединение,ПорцияДанных,  Сотрудники,ТЗИтог); 
    КонецЦикла;
    
    //Получаем наш внешний набор данных ТЗ
    
    //Программно формируем отчет
    //Отменяем стандартную обработку
    СтандартнаяОбработка = Ложь;
    //Получаем схему
    Схема = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
    
    Настройки = КомпоновщикНастроек.ПолучитьНастройки();
    ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
    
    //Создаем компоновщик макета и получаем макет компоновки
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, ДанныеРасшифровки);
    //<--------------------------------------------------------------------------------------->//
    
    ЗапросИтог.УстановитьПараметр("Тч",ТЗИтог);
    ЗапросИтог.УстановитьПараметр("Дата1",Период.ДатаНачала);
    ЗапросИтог.УстановитьПараметр("Дата2",Период.ДатаОкончания);
    ТЗИтог = ЗапросИтог.Выполнить().Выгрузить();
    
    для Каждого  строка из ТЗИтог цикл
        
        Если Тип("СправочникСсылка._Проекты")<> ТипЗнч(строка.Проект) тогда
            
            КодПроекта = "";
            ДанныеЗаявки           = ДанныеЗаявки(Соединение,строка.НомерЗадачи);
            Если ДанныеЗаявки.issues.Количество() и ДанныеЗаявки.issues[0].Свойство("custom_fields")   тогда
                для Каждого  стр из  ДанныеЗаявки.issues[0].custom_fields   Цикл 
                    Если стр.name="Код проекта" тогда
                        КодПроекта = стр.value;
                        Прервать;
                    КонецЕсли;
                КонецЦикла;        
            КонецЕсли;
            Если  ДанныеЗаявки.СВойство("project") тогда
                Строка.проект        = ?(КодПроекта= "","",КодПроекта +", ") + ДанныеЗаявки.project.name ;
            КонецЕсли;
        КонецЕсли;
        
    КонецЦикла;
    
    
    
    ВнешниеНаборыДанных = Новый Структура;
    ВнешниеНаборыДанных.Вставить("Тч",ТЗИтог);
    
    //Инициализируем процессор компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
    //<--------------------------------------------------------------------------------------->//
    //Очищаем документ результата
    ДокументРезультат.Очистить();
    
    //Выводим отчет в документ
    ПроцессорВывода = Новый
    ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
КонецПроцедуры

Функция ПрочитатьДанныеRM(Соединение, Смещение = 0)
    
    СтрокаПараметров = "?" +  "from="    + Формат(Период.ДатаНачала   , "ДФ=yyyy-MM-dd")
    + "&to="      + Формат(Период.ДатаОкончания, "ДФ=yyyy-MM-dd")
    + "&offset="  + Формат(Смещение, "ЧН=; ЧГ=0") +"&limit=100";
    
    Запрос = Новый HTTPЗапрос("time_entries.json" + СтрокаПараметров);
    
    Заголовки = Новый Соответствие;
    Заголовки.Вставить("X-Redmine-API-Key", КлючПриложения);
    Запрос.Заголовки = Заголовки;
    
    Ответ = Соединение.Получить(Запрос);
    
    Если Ответ.КодСостояния = 200 Тогда 
        СтрокаJSON = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
        
        ЧтениеJSON = Новый ЧтениеJSON;
        ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
        ДанныеJSON = ПрочитатьJSON(ЧтениеJSON,, "spent_on");
        ЧтениеJSON.Закрыть();
        
        Возврат ДанныеJSON.time_entries;
        
    Иначе
        ВызватьИсключение "HTTP status code: " + Ответ.КодСостояния;
    КонецЕсли;
    
КонецФункции // ПрочитатьДанныеRM

Функция ДанныеЗаявки(Соединение,ИД)
    
    СтрокаПараметров = "?issue_id=" + Формат(ИД ,"ЧГ = 0");
    
    Запрос = Новый HTTPЗапрос("issues.json" + СтрокаПараметров);
    //  /issues.xml?issue_id=1
    Заголовки = Новый Соответствие;
    Заголовки.Вставить("X-Redmine-API-Key", КлючПриложения);
    Запрос.Заголовки = Заголовки;
    
    Ответ = Соединение.Получить(Запрос);
    
    Если Ответ.КодСостояния = 200 Тогда 
        СтрокаJSON = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
        
        ЧтениеJSON = Новый ЧтениеJSON;
        ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
        ДанныеJSON = ПрочитатьJSON(ЧтениеJSON,, "created_on");
        ЧтениеJSON.Закрыть();
        
        Возврат ДанныеJSON;
        
    Иначе
        ВызватьИсключение "HTTP status code: " + Ответ.КодСостояния;
    КонецЕсли;
    
КонецФункции


Процедура РасшифроватьДанныеRM(Соединение,ДанныеJSON,  Сотрудники,Трудозатраты)
    
    
    Для Каждого Запись Из ДанныеJSON Цикл
        Если  Запись.СВойство("issue") тогда
            Строка = Трудозатраты.Добавить();
            Строка.Сотрудник       = ?(Сотрудники.Найти(Формат( Запись.user.id,"ЧГ = 0"),"КодПользователя") = Неопределено, "",Сотрудники.Найти(Формат(Запись.user.id,"ЧГ = 0"),"КодПользователя").Пользователь);
            Если не ЗначениеЗаполнено(Строка.сотрудник) и ПропускатьСтрокиСНенайденнымиСотрудниками тогда
                Трудозатраты.Удалить(Строка);
                Продолжить;
            КонецЕсли;
            строка.СотрудникРМ     = Запись.user.name +  ", " +Запись.user.id;
            Строка.НомерЧЛ         = формат(Запись.id,"ЧГ=0");
            Строка.Дата            = Запись.spent_on;
            Строка.НомерЗадачи     = Запись.issue.id;
            Строка.Описание        = Запись.comments;
            Если  Запись.СВойство("project") тогда
                Строка.проект        =   Запись.project.name ;
            КонецЕсли;
            Строка.ЧасыRM          = Запись.hours;
        КонецЕсли;
    КонецЦикла;
    
    
    
КонецПроцедуры 