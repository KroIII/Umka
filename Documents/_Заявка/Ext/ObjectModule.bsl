
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
    
    Если ОбменДанными.Загрузка Тогда 
        Возврат;
    КонецЕсли;	
    
    ДополнительныеСвойства.Вставить("НоваяЗаявка", Ссылка.Пустая());
    ДополнительныеСвойства.Вставить("ПропускатьПроверкуЗакрытойЗаявки", Статус = Перечисления._СтатусыЗаявки.Выполнена и Ссылка.Статус <> Перечисления._СтатусыЗаявки.Выполнена);
   
    //данные рс учета ЧЛ
    ДанныеРабот = Неопределено;
    ДополнительныеСвойства.Свойство("ДанныеРабот",ДанныеРабот);
    Если ДанныеРабот = Неопределено Тогда 
        ДанныеРабот = РегистрыСведений._РаботыЗаДень.СоздатьНаборЗаписей();
        ДанныеРабот.Отбор.Заявка.Установить(Ссылка);
        ДанныеРабот.Прочитать(); 
        ДополнительныеСвойства.Вставить("ДанныеРабот",ДанныеРабот);
    КонецЕсли;	
    
    //заполнение роли по умолчанию
    Для Каждого стр из Смета цикл
        Если стр.Роль.пустая() тогда
            стр.Роль = стр.Сотрудник.роль;
        КонецЕсли;
    КонецЦикла;
     
    //ограничения на запись
    Если Контрагент.Блокировка и не РольДоступна("ПолныеПрава") и не РольДоступна("_БлокировкаКонтрагентов") тогда
        ОбщегоНазначения.СообщитьПользователю("У контрагента стоит блокировка. нельзя создавать/изменять заявки по данному контрагенту!",Контрагент,"Контрагент","Контрагент",Отказ);
    КонецЕсли;
    
    Если Проверена и не РольДоступна("ПолныеПрава") и не РольДоступна("_ИзменениеВыполненныхПроверенныхЗаявок") тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заявка проверена, изменение не возможно",Ссылка,,,Отказ);
    КонецЕсли;
    
    Если ДатыЗапретаИзменения.ИзменениеЗапрещено("Документ._Заявка",ЭтотОбъект.Ссылка) и не РольДоступна("ПолныеПрава") тогда
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Действует дата запрета",Ссылка,,,Отказ);
    КонецЕсли;
    
    
    Если не ЗначениеЗаполнено(Ссылка) тогда
        Автор = ПараметрыСеанса.ТекущийПользователь;
    КонецЕсли;
    
    
    Если не Техподдержка и не ЗначениеЗаполнено(ДатаОкончания) тогда
        Сообщить("Заполните дату окончания,если эта заявка не по техподдержке, или поставьте признак ""Техподдержка""");
        Отказ = Истина;
    КонецЕсли;
    
    
    //Если  РольДоступна("ПолныеПрава") и ДатыЗапретаИзменения.ИзменениеЗапрещено("Документ._Заявка",Ссылка) тогда
    //    
    //    ОбменДанными.Загрузка = Истина;
    //    
    //КонецЕсли;
    
    ЗаявкаУНас = Ложь;
    
    ///если выполнено то дату сегодня
    Если Статус = Перечисления._СтатусыЗаявки.Выполнена и Ссылка.Статус <> Перечисления._СтатусыЗаявки.Выполнена  Тогда 
        
        Проверена = Истина;
        
        Если не РольДоступна("ПолныеПрава") и не Техподдержка и не РольДоступна("_ИзменениеВыполненныхПроверенныхЗаявок") тогда
            ОбщегоНазначения.СообщитьПользователю("У вас нет прав переводить проектные заявки в статус ""Выполнено""",Ссылка,"Статус","Статус",Отказ);
        иначеЕсли Техподдержка и не РольДоступна("_СервисИнженер") и не РольДоступна("ПолныеПрава") и не РольДоступна("_ИзменениеВыполненныхПроверенныхЗаявок") тогда
            ОбщегоНазначения.СообщитьПользователю("У вас нет прав переводить заявки техподдержки в статус ""Выполнено""",Ссылка,"Статус","Статус",Отказ);
        КонецЕсли;
        ДатаЗакрытия = ТекущаяДата();
        
        //29.03.21 - меняем логику- не можем закрыть заявку пока все подчиненные не выполнены
        ПроверитьПодчиненные(Отказ, Ссылка);
    КонецЕсли;
    
    
    Если Статус = Перечисления._СтатусыЗаявки.Выполнена Тогда 
        ДанныеРабот_ = ДанныеРабот.Выгрузить();
        АвтоНачислениеЧасов(ДанныеРабот_);
        ДанныеРабот.Загрузить(ДанныеРабот_);
    КонецЕсли;
    
    ///если   выполнено убираем то очищаем часы автоначисленные
    Если не Статус = Перечисления._СтатусыЗаявки.Выполнена и Ссылка.Статус = Перечисления._СтатусыЗаявки.Выполнена  Тогда 
		мДанныеРабот = ДанныеРабот.Выгрузить(); 
		ДанныеРабот.Загрузить(мДанныеРабот.Скопировать(мДанныеРабот.НайтиСтроки(новый Структура("АвтоНачисление", Ложь))));
    КонецЕсли;
    
    //если чл есть то она уже в работе
    Если Статус = Перечисления._СтатусыЗаявки.Принят и ДанныеРабот.Количество() тогда
        Статус  = Перечисления._СтатусыЗаявки.ВРаботе 
    КонецЕсли;
    
    Если не Смета.Количество() ТОГДА
        СТРОКАсметы = смета.Добавить();
        СТРОКАсметы.Сотрудник = Справочники.Пользователи.НайтиПоНаименованию("Павлов Алексей Александрович");
        СТРОКАсметы.Роль = СТРОКАсметы.Сотрудник.роль;
    КонецЕсли;
    Если   Приоритет = 0 тогда
        Приоритет = 3
    КонецЕсли;
    
    Если Название = "" тогда
        Название = СокрЛП(СтрЗаменить(Описание,Символы.ПС," "))
    КонецЕсли;
 
    //закрытие подчиненных заявок
    //29.03.21 - меняем логику- не можем закрыть заявку пока все подчиненные не выполнены
    //Если Статус = Перечисления._СтатусыЗаявки.Выполнена тогда
    //    
    //    мПараметры = Новый Массив;
    //    мПараметры.Добавить(Ссылка);
    //    
    //    ФоновыеЗадания.Выполнить("_ОбщийМодульСервер.ЗакрытьПодчиненныеЗаявки", 
    //    мПараметры, Новый УникальныйИдентификатор ); 
    //    
    //КонецЕсли;
    
    
КонецПроцедуры

Процедура ПроверитьПодчиненные(Отказ, Заявка)
    
    Если Заявка.Пустая() тогда
         возврат;
    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   Заявка.Ссылка КАК Ссылка,
    |   Заявка.Статус КАК Статус
    |ИЗ
    |   Документ._Заявка КАК Заявка
    |ГДЕ
    |   Заявка.Основание = &Основание";
    
    Запрос.УстановитьПараметр("Основание", Заявка);
    РезультатЗапроса = Запрос.Выполнить();
    ВыборкаСсылка = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаСсылка.Следующий() Цикл
        Если ВыборкаСсылка.Статус <> Перечисления._СтатусыЗаявки.Выполнена тогда
            ОбщегоНазначения.СообщитьПользователю("Есть не выполненная заявка на основании - " + ВыборкаСсылка.Ссылка ,ВыборкаСсылка.Ссылка,,,Отказ );
        иначе
            ПроверитьПодчиненные(Отказ, ВыборкаСсылка.Ссылка);
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры


Процедура ПриКопировании(ОбъектКопирования)
    
    
    ЗаявкаУНас = Ложь;
    Проверена = Ложь;
    //ДанныеРабот.Очистить();
    Смета.Очистить();
    Комментарии.Очистить();
    Если не РольДоступна("ПолныеПрава") тогда
        Коментарий = "###Создано_Копированием_Отказать###" ;
    КонецЕсли;
    
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
    
    Если ДанныеЗаполнения = Неопределено тогда 
        Возврат;
    КонецЕсли;
    
    Попытка
        Основание       = ДанныеЗаполнения.ссылка;
    Исключение
    КонецПопытки;
    
    ЗаполнитьЗначенияСвойств(ЭтотОбъект,Основание,"Контрагент,КонтактноеЛицо,Название,Описание, Приоритет, Организация");
    
    Смета.Загрузить(Основание.Смета.Выгрузить(,"Сотрудник,Роль"));
    
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
    
    Если ОбменДанными.Загрузка Тогда 
        Возврат;
    КонецЕсли;	
    
    Если Отказ тогда 
        Возврат 
    КонецЕсли;  
    
    Если  ДополнительныеСвойства.ПропускатьПроверкуЗакрытойЗаявки  тогда
        ДополнительныеСвойства.ДанныеРабот.ДополнительныеСвойства.Вставить("ПропускатьПроверкуЗакрытойЗаявки"); 
    КонецЕсли; 
    
    Если не ДополнительныеСвойства.НоваяЗаявка тогда
        ДополнительныеСвойства.ДанныеРабот.Записать();
    КонецЕсли;
    //Если не ДополнительныеСвойства.Свойство("ВнесениеЧлИзРС") тогда 
    //    
    //    Блокировка = Новый БлокировкаДанных;
    //    ЭлементБлокировки = Блокировка.Добавить("РегистрСведений._РаботыЗаДень");
    //    ЭлементБлокировки.УстановитьЗначение("Заявка", Ссылка);
    //    ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
    //    Блокировка.Заблокировать();
    //    
    //    ЗаписьРсРабот = РегистрыСведений._РаботыЗаДень.СоздатьНаборЗаписей();
    //    ЗаписьРсРабот.ДополнительныеСвойства.Вставить("ВнесениеЧлИзЗаявки");            
    //    ЗаписьРсРабот.Отбор.Заявка.Установить(Ссылка);
    //    ЗаписьРсРабот.Записать();
    //    
    //    для Каждого стр из ДанныеРабот цикл
    //        Если ЗначениеЗаполнено(стр.КодСтроки) и стр.Задача.Пустая() тогда 
    //            стрЗаписьРсРабот = ЗаписьРсРабот.Добавить();
    //            ЗаполнитьЗначенияСвойств(стрЗаписьРсРабот, стр);
    //            стрЗаписьРсРабот.Заявка = Ссылка;
    //        КонецЕсли;
    //    КонецЦикла;
    //    ЗаписьРсРабот.Записать(Истина);
    //КонецЕсли;
    
    Текст = "";
    НоваяЗаявка = Ложь;
    Если ДополнительныеСвойства.Свойство("НоваяЗаявка", НоваяЗаявка)  и НоваяЗаявка тогда
        
        Текст =  "*Создана ЗАЯВКА :*  "  + "`" +  Формат(число(Номер), "ЧДЦ=0; ЧГ=0")  + "`" +  
        Символы.ПС + "*Контр-т:*  "  + "`" +  Контрагент  + "`" +  
        Символы.ПС + "*Описание:*  "  + "`" +  Название  + "`" 
        //+ 
        //Символы.ПС + "*Автор:*  "  + "`" +  Автор  + "`"
        ; 
        
        Для  Каждого стр из Комментарии цикл
            Текст = Текст + Символы.ПС + 
            "*Добавлен комментарий:*   " +  
            Символы.ПС +  Символы.Таб + "{`" + Формат(стр.Дата, "ДФ='dd.MM.yy  '") + "` " + "_"+ стр.КонтактноеЛицо + "_"+ 
            Символы.ПС +  Символы.Таб + " " + лев(стр.Комментарий , 200 )+  "}" ; 
        КонецЦикла;
        
    ИначеЕсли ДополнительныеСвойства.Свойство("РассылкаОповещений",Текст) тогда
        Текст =  "*Изменения в заявке :*  "  + "`" +  Формат(число(Номер), "ЧДЦ=0; ЧГ=0")  + "`" +  
        Символы.ПС + "*Контр-т:*  "  + "`" +  Контрагент  + "`" +  
        Символы.ПС + "*Описание:*  "  + "`" +  Название  + "`" + 
        Текст; 
        
    ИначеЕсли ДополнительныеСвойства.Свойство("ПереноситьЗадачиНеЗакрытые") тогда 
        Параметры = Новый Массив;
        Параметры.Добавить(Ссылка);
        ФоновыеЗадания.Выполнить("_ОбщийМодульСервер.ПеренестиНезакрытыеЗадания", 
        Параметры, Новый УникальныйИдентификатор,"ПеренестиЗадачиНеЗакрытые");  
        Возврат;
    иначе
        Возврат;
    КонецЕсли;
    Если Текст <> "" тогда
        Параметры = Новый Массив;
        Параметры.Добавить(Смета.ВыгрузитьКолонку("Сотрудник"));
        Параметры.Добавить(Текст);
        Параметры.Добавить(ПараметрыСеанса.ТекущийПользователь);
        Параметры.Добавить(Ссылка);
        
        ФоновыеЗадания.Выполнить("_ОбщийМодульСервер.Рассылка", 
        Параметры, Новый УникальныйИдентификатор,"Рассылка в телеграмм");      
    КонецЕсли;
    
    
    
    
    
    
КонецПроцедуры

Процедура АвтоНачислениеЧасов(ДанныеРабот)
    
  
    ДанныеРабот=(ДанныеРабот.Скопировать(ДанныеРабот.НайтиСтроки(новый Структура("АвтоНачисление", Ложь))));
    
    ВсегоЧасов = ДанныеРабот.Итог("ЧасыКлиенту");
    ТЧСотрудников = Смета.Выгрузить();
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   Сотрудники.Сотрудник КАК Сотрудник,
    |   Сотрудники.Роль КАК Роль
    |ПОМЕСТИТЬ ВТ
    |ИЗ
    |   &ТЧСотрудников КАК Сотрудники
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |   ВТ.Сотрудник КАК Сотрудник,
    |   ИСТИНА КАК АвтоНачисление,
    |   &Дата КАК Дата,
    |   _НастройкиАвтодобавленияЧасов.ПроцентЧасов * &ВсегоЧасов / 100 КАК Часы,
    |   _НастройкиАвтодобавленияЧасов.ПроцентЧасов * &ВсегоЧасов / 100 КАК ЧасыКлиенту,
    |   _НастройкиАвтодобавленияЧасов.ШаблонРешения КАК Описание
    |ИЗ
    |   РегистрСведений._НастройкиАвтодобавленияЧасов КАК _НастройкиАвтодобавленияЧасов
    |       ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ КАК ВТ
    |       ПО _НастройкиАвтодобавленияЧасов.Роль = ВТ.Роль
    |           И (_НастройкиАвтодобавленияЧасов.Проект = &Проект)";
    
    Запрос.УстановитьПараметр("ТЧСотрудников", ТЧСотрудников);
    Запрос.УстановитьПараметр("ВсегоЧасов", ВсегоЧасов);
    Запрос.УстановитьПараметр("Проект", Проект);
    Запрос.УстановитьПараметр("Дата", ДатаЗакрытия);
    
    РезультатЗапроса = Запрос.Выполнить();
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        стр = ДанныеРабот.Добавить();
        ЗаполнитьЗначенияСвойств(стр,ВыборкаДетальныеЗаписи);
        ОкруглитьДоЧетвертиЧаса(стр.Часы);
        стр.ЧасыКлиенту = стр.Часы;
        стр.Заявка = Ссылка;
    КонецЦикла;
    
    
    
    
КонецПроцедуры

//Процедура ПроверитьНевыставленныеЧасы(Отказ) Экспорт
//    
//    ТАблицаВыставленных = ДанныеРабот.Выгрузить(,"КодСтроки,Задача");
//    ВыборкаДетальныеЗаписи = ПолучитьНеперенесенныеЗадачи(ТАблицаВыставленных);
//    Текст = "";
//    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//        Если ВыборкаДетальныеЗаписи.Добавить   тогда 
//            Текст  = Текст + СтрШаблон("Есть %3 часы по задаче  от %1 к %2",ВыборкаДетальныеЗаписи.Автор, ВыборкаДетальныеЗаписи.Исполнитель, ?(ВыборкаДетальныеЗаписи.уДАЛИТЬ, "не удаленные из заявки", "не перенесенные")) + Символы.ПС;
//        ИначеЕсли  ВыборкаДетальныеЗаписи.Удалить тогда 
//            Текст  = Текст + ("Есть не удаленные часы по задаче ") + Символы.ПС;
//        ИначеЕсли  ВыборкаДетальныеЗаписи.часы <> ДанныеРабот.Найти(ВыборкаДетальныеЗаписи.Кодстроки).Часы 
//            или ВыборкаДетальныеЗаписи.Описание <> ДанныеРабот.Найти(ВыборкаДетальныеЗаписи.Кодстроки).Описание 
//             или ВыборкаДетальныеЗаписи.Сотрудник <> ДанныеРабот.Найти(ВыборкаДетальныеЗаписи.Кодстроки).Сотрудник тогда 
//            Текст  = Текст + СтрШаблон("Есть необновленные часы по задаче  от %1 к %2",ВыборкаДетальныеЗаписи.Автор, ВыборкаДетальныеЗаписи.Исполнитель) + Символы.ПС;
//        КонецЕсли;
//    КонецЦикла;
//    
//    Если Текст <> "" тогда
//        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,,,Отказ)    
//    КонецЕсли;
//    
//    
//    ВыборкаДетальныеЗаписи = ПолучитьНеперенесенныеРС(ТАблицаВыставленных);
//    Текст = "";
//    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//        Если ВыборкаДетальныеЗаписи.Добавить  тогда 
//            Текст  = Текст + СтрШаблон("Есть %3 часы по задаче внешего сотрудника  %1 за %2 ",ВыборкаДетальныеЗаписи.Сотрудник, Лев(ВыборкаДетальныеЗаписи.Дата,10),?(ВыборкаДетальныеЗаписи.уДАЛИТЬ, "не удаленные из заявки", "не перенесенные")) + Символы.ПС;
//        ИначеЕсли  ВыборкаДетальныеЗаписи.Удалить тогда 
//            Текст  = Текст + ("Есть не удаленные часы по задаче внешего сотрудника " ) + Символы.ПС;
//        ИначеЕсли  ВыборкаДетальныеЗаписи.часы <> ДанныеРабот.Найти(ВыборкаДетальныеЗаписи.Кодстроки).Часы 
//            или ВыборкаДетальныеЗаписи.Описание <> ДанныеРабот.Найти(ВыборкаДетальныеЗаписи.Кодстроки).Описание 
//            или ВыборкаДетальныеЗаписи.Сотрудник <> ДанныеРабот.Найти(ВыборкаДетальныеЗаписи.Кодстроки).Сотрудник тогда 
//            Текст  = Текст + СтрШаблон("Есть необновленные часы по задаче внешнего сотрудника %1 ",ВыборкаДетальныеЗаписи.Сотрудник ) + Символы.ПС;
//        КонецЕсли;
//    КонецЦикла;
//    
//    
//    Если Текст <> "" тогда
//        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст,,,,Отказ)    
//    КонецЕсли;
//    
//    
//КонецПроцедуры


//Функция ПолучитьНеперенесенныеЗадачи(ТАблицаВыставленных)  Экспорт
//    
//    Запрос = Новый Запрос;
//    Запрос.Текст = 
//    "ВЫБРАТЬ
//    |   ЧЛ.КодСтроки КАК КодСтроки,
//    |   ЧЛ.Задача КАК Задача
//    |ПОМЕСТИТЬ ВТ_ТЧ
//    |ИЗ
//    |   &ЧЛ КАК ЧЛ
//    |;
//    |
//    |////////////////////////////////////////////////////////////////////////////////
//    |ВЫБРАТЬ
//    |   _ЗаявкаДанныеРабот.КодСтроки КАК КодСтроки,
//    |   _ЗаявкаДанныеРабот.Задача КАК Задача
//    |ПОМЕСТИТЬ ВТ_Док
//    |ИЗ
//    |   ВТ_ТЧ КАК _ЗаявкаДанныеРабот
//    |ГДЕ
//    |   НЕ(_ЗаявкаДанныеРабот.КодСтроки = ""00000000-0000-0000-0000-000000000000""
//    |               ИЛИ _ЗаявкаДанныеРабот.КодСтроки = """")
//    |   И НЕ _ЗаявкаДанныеРабот.Задача = ЗНАЧЕНИЕ(задача._исполнениезадач.пустаяссылка)
//    |;
//    |
//    |////////////////////////////////////////////////////////////////////////////////
//    |ВЫБРАТЬ
//    |   _ИсполнениеЗадачДанныеРабот.Ссылка КАК Ссылка,
//    |   _ИсполнениеЗадачДанныеРабот.НомерСтроки КАК НомерСтроки,
//    |   _ИсполнениеЗадачДанныеРабот.Дата КАК Дата,
//    |   _ИсполнениеЗадачДанныеРабот.Описание КАК Описание,
//    |   _ИсполнениеЗадачДанныеРабот.Часы КАК Часы,
//    |   _ИсполнениеЗадачДанныеРабот.КодСтроки КАК КодСтроки,
//    |   _ИсполнениеЗадачДанныеРабот.Ссылка.Исполнитель КАК Сотрудник
//    |ПОМЕСТИТЬ вт_1
//    |ИЗ
//    |   Задача._ИсполнениеЗадач.ДанныеРабот КАК _ИсполнениеЗадачДанныеРабот
//    |ГДЕ
//    |   _ИсполнениеЗадачДанныеРабот.Ссылка.БизнесПроцесс.Заявка = &Заявка
//    |;
//    |
//    |////////////////////////////////////////////////////////////////////////////////
//    |ВЫБРАТЬ
//    |   ЕСТЬNULL(_ИсполнениеЗадачДанныеРабот.Ссылка, ВТ_ТЧ.Задача) КАК Задача,
//    |   _ИсполнениеЗадачДанныеРабот.Ссылка.БизнесПроцесс КАК БизнесПроцесс,
//    |   _ИсполнениеЗадачДанныеРабот.НомерСтроки КАК НомерСтроки,
//    |   _ИсполнениеЗадачДанныеРабот.Дата КАК Дата,
//    |   _ИсполнениеЗадачДанныеРабот.Описание КАК Описание,
//    |   _ИсполнениеЗадачДанныеРабот.Часы КАК Часы,
//    |   _ИсполнениеЗадачДанныеРабот.Ссылка.БизнесПроцесс.НеВыставлятьКонтрагенту КАК НеВыставлятьКонтрагенту,
//    |   ЕСТЬNULL(_ИсполнениеЗадачДанныеРабот.КодСтроки, ВТ_ТЧ.КодСтроки) КАК КодСтроки,
//    |   _ИсполнениеЗадачДанныеРабот.Часы КАК ЧасыФакт,
//    |   _ИсполнениеЗадачДанныеРабот.Ссылка.БизнесПроцесс.Автор КАК Автор,
//    |   _ИсполнениеЗадачДанныеРабот.Ссылка.Исполнитель КАК Исполнитель,
//    |   _ИсполнениеЗадачДанныеРабот.КодСтроки ЕСТЬ NULL КАК Удалить,
//    |   ВТ_ТЧ.КодСтроки ЕСТЬ NULL КАК Добавить,
//    |   _ИсполнениеЗадачДанныеРабот.Сотрудник КАК Сотрудник
//    |ИЗ
//    |   вт_1 КАК _ИсполнениеЗадачДанныеРабот
//    |       ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Док КАК ВТ_ТЧ
//    |       ПО _ИсполнениеЗадачДанныеРабот.Ссылка = ВТ_ТЧ.Задача
//    |           И _ИсполнениеЗадачДанныеРабот.КодСтроки = ВТ_ТЧ.КодСтроки";
//    //|ГДЕ
//    //|   (ВТ_ТЧ.КодСтроки ЕСТЬ NULL
//    //|           ИЛИ _ИсполнениеЗадачДанныеРабот.КодСтроки ЕСТЬ NULL)";
//    
//    Запрос.УстановитьПараметр("Заявка", Ссылка);
//    Запрос.УстановитьПараметр("ЧЛ", ТАблицаВыставленных);
//    
//    РезультатЗапроса = Запрос.Выполнить();
//    
//    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//    
//    Возврат ВыборкаДетальныеЗаписи;
//КонецФункции // ПолучитьНеперенесенныеЗадачи()

//Функция ПолучитьНеперенесенныеРС(ТАблицаВыставленных)  Экспорт
//    
//    Запрос = Новый Запрос;
//    Запрос.УстановитьПараметр("Заявка", Ссылка);
//    Запрос.УстановитьПараметр("ЧЛ", ТАблицаВыставленных);
//    Запрос.Текст = 
//    "ВЫБРАТЬ
//    |   ЧЛ.КодСтроки КАК КодСтроки,
//    |   ЧЛ.Задача КАК Задача
//    |ПОМЕСТИТЬ ВТ
//    |ИЗ
//    |   &ЧЛ КАК ЧЛ
//    |;
//    |
//    |////////////////////////////////////////////////////////////////////////////////
//    |ВЫБРАТЬ
//    |   _РаботыЗаДень.КодСтроки КАК КодСтроки,
//    |   _РаботыЗаДень.Дата КАК Дата,
//    |   _РаботыЗаДень.Описание КАК Описание,
//    |   _РаботыЗаДень.Сотрудник КАК Сотрудник,
//    |   _РаботыЗаДень.Часы КАК Часы,
//    |   _РаботыЗаДень.Часы КАК ЧасыКлиенту,
//    |   _РаботыЗаДень.КодСтроки ЕСТЬ NULL КАК Удалить
//    |ПОМЕСТИТЬ ВТ1
//    |ИЗ
//    |   РегистрСведений._РаботыЗаДень КАК _РаботыЗаДень
//    |ГДЕ
//    |   _РаботыЗаДень.Заявка = &Ссылка
//    |;
//    |
//    |////////////////////////////////////////////////////////////////////////////////
//    |ВЫБРАТЬ
//    |   _ЗаявкаДанныеРабот.КодСтроки КАК КодСтроки,
//    |   _ЗаявкаДанныеРабот.Задача КАК Задача
//    |ПОМЕСТИТЬ ВТ_Док
//    |ИЗ
//    |   ВТ КАК _ЗаявкаДанныеРабот
//    |ГДЕ
//    |   НЕ(_ЗаявкаДанныеРабот.КодСтроки = ""00000000-0000-0000-0000-000000000000""
//    |               ИЛИ _ЗаявкаДанныеРабот.КодСтроки = """")
//    |   И _ЗаявкаДанныеРабот.Задача = ЗНАЧЕНИЕ(задача._исполнениезадач.пустаяссылка)
//    |;
//    |
//    |////////////////////////////////////////////////////////////////////////////////
//    |ВЫБРАТЬ
//    |   ЕСТЬNULL(_РаботыЗаДень.КодСтроки, ВТ_Док.КодСтроки) КАК КодСтроки,
//    |   _РаботыЗаДень.Дата КАК Дата,
//    |   _РаботыЗаДень.Описание КАК Описание,
//    |   _РаботыЗаДень.Сотрудник КАК Сотрудник,
//    |   _РаботыЗаДень.Часы КАК Часы,
//    |   _РаботыЗаДень.Часы КАК ЧасыКлиенту,
//    |   _РаботыЗаДень.КодСтроки ЕСТЬ NULL КАК Удалить,
//    |   ВТ_Док.КодСтроки ЕСТЬ NULL КАК Добавить
//    |ИЗ
//    |   ВТ1 КАК _РаботыЗаДень
//    |       ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Док КАК ВТ_Док
//    |       ПО _РаботыЗаДень.КодСтроки = ВТ_Док.КодСтроки ";

//    //|ГДЕ
//    //|   (ВТ_Док.КодСтроки ЕСТЬ NULL
//    //|           ИЛИ _РаботыЗаДень.КодСтроки ЕСТЬ NULL)";
//    
//    Запрос.УстановитьПараметр("Ссылка", Ссылка);
//    Запрос.УстановитьПараметр("ЧЛ", ТАблицаВыставленных);
//    РезультатЗапроса = Запрос.Выполнить();
//    
//    Возврат РезультатЗапроса.Выбрать();
//    
//    
//КонецФункции // ПолучитьНеперенесенныеЗадачи()

