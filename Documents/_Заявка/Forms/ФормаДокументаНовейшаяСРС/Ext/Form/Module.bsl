
&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение)
    
    Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка._КонтактныеЛица") Тогда
        Объект.КонтактноеЛицо = ВыбранноеЗначение;
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура Отправить(ВыбранноеЗначение,ТекущаяСтрока)
    
    строка = Объект.Комментарии.НайтиПоИдентификатору(ТекущаяСтрока);
    Получатели  = новый Массив;
    для Каждого  стр из ВыбранноеЗначение цикл
        Если стр.Пометка тогда
            Адрес = стр.Значение.КонтактнаяИнформация.Найти(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
            Если Адрес = Неопределено тогда 
                Продолжить; 
            КонецЕсли;
            адрес = Адрес.Представление ;
            Получатели.Добавить(Адрес); 
        КонецЕсли;
    КонецЦикла;
    
    результат  =  ОтправитьПисьмо("Комментарий к задаче " + Объект.Номер + " от " + Формат(строка.Дата,"ДФ=dd.MM.yy") ,?(строка.КомментарийHTML_ = Неопределено,строка.Комментарий,строка.КомментарийHTML_ ),Получатели );
    
    Если не результат.результат тогда 
        Сообщить(результат.Ошибка); 
    КонецЕсли;
    
КонецПроцедуры
// Параметры
//	- Тема (строка)
//	- ТекстHTML (строка, форматированный документ)
//	- МассивПолучателей (массив строк)
//	- Вложения (массив структур:	- Данные (строка, картинка, двоичные данные)
//									- ИмяФайла (строка))
// Возвращаемое значение
//	Структура:
//	- Результат (булево)
//	- Ошибка (строка)
Функция ОтправитьПисьмо(Тема, ТекстHTML, Получатели, Вложения = Неопределено, УчетнаяЗаписьЭП = Неопределено, Важность = Неопределено, Кодировка = Неопределено) Экспорт
    
    Попытка
        
        Если УчетнаяЗаписьЭП = Неопределено Тогда
            УчетнаяЗаписьЭП = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
        КонецЕсли;
        
        Если Важность = Неопределено Тогда
            Важность = ВажностьИнтернетПочтовогоСообщения.Обычная;
        КонецЕсли;
        
        Если Кодировка = Неопределено Тогда
            Кодировка = "windows-1251";
        КонецЕсли;
        
        Если Вложения = Неопределено Тогда
            Вложения = Новый Массив;
        КонецЕсли;
        
        Текст = ТекстHTML;
        ВложенияФорматированногоДокумента = Новый Структура;
        
        Если ТипЗнч(ТекстHTML) = Тип("ФорматированныйДокумент") Тогда
            ТекстHTML.ПолучитьHTML(Текст, ВложенияФорматированногоДокумента);
        ИначеЕсли ЭтоАдресВременногоХранилища(ТекстHTML) тогда
            Попытка
                стр =  ПолучитьИзВременногоХранилища(ТекстHTML) ;
                Текст = стр.мТекст;
                ВложенияФорматированногоДокумента = стр.мВложения;
            Исключение
            КонецПопытки;
        КонецЕсли;
        
        Письмо = Новый ИнтернетПочтовоеСообщение;
        Письмо.Важность = Важность;
        Письмо.Кодировка = Кодировка;
        Письмо.ИмяОтправителя = УчетнаяЗаписьЭП.ИмяПользователя;
        Письмо.Отправитель = УчетнаяЗаписьЭП.АдресЭлектроннойПочты; 
        Письмо.Тема = Тема;
        Для Каждого Получатель Из Получатели Цикл
            Письмо.Получатели.Добавить(Получатель);
        КонецЦикла;
        Для Каждого Вложение Из Вложения Цикл
            Данные = Вложение.Данные;
            Если ТипЗнч(Данные) = Тип("Картинка") Тогда
                Данные = Данные.ПолучитьДвоичныеДанные();
            КонецЕсли;
            Письмо.Вложения.Добавить(Данные, Вложение.ИмяФайла);		
        КонецЦикла;
        Для Каждого Картинка Из ВложенияФорматированногоДокумента Цикл
            Вложение = Письмо.Вложения.Добавить(Картинка.Значение.ПолучитьДвоичныеДанные());
            Вложение.Идентификатор = Картинка.Ключ;
            Текст = СтрЗаменить(Текст, Картинка.Ключ, "cid:" + Вложение.Идентификатор);
        КонецЦикла;
        Письмо.Тексты.Добавить(Текст, ТипТекстаПочтовогоСообщения.HTML); 	
        
        
        Почта = Новый ИнтернетПочта;
        
        //ПочтовыйПрофиль = СформироватьИнтернетПрофиль(УчетнаяЗаписьЭП);
        ПочтовыйПрофиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗаписьЭП);
        
        Почта.Подключиться(ПочтовыйПрофиль);
        Почта.Послать(Письмо);
        Почта.Отключиться();
        
        Возврат Новый Структура("Результат, Ошибка", Истина, ""); 
        
    Исключение
        Возврат Новый Структура("Результат, Ошибка", Ложь, ОписаниеОшибки());
    КонецПопытки;
    
КонецФункции


&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
    Если тип("ФормаКлиентскогоПриложения")= ТипЗнч(ИсточникВыбора) и 
        (ИсточникВыбора.ИмяФормы = "Обработка._РабочийСтол_Заявки.Форма.СозданиеЗадания" или ИсточникВыбора.ИмяФормы = "Задача._ИсполнениеЗадач.Форма.ФормаЗадачи") тогда
        Прочитать();
    иначе
        Если ТипЗнч(ВыбранноеЗначение) = тип("СписокЗначений") тогда
            
            Отправить(ВыбранноеЗначение, Элементы.Комментарии.ТекущаяСтрока);
            
        ИначеЕсли  ТипЗнч(ВыбранноеЗначение) = тип("ФорматированныйДокумент") тогда
            
            Модифицированность = Истина;
            Элементы.Комментарии.ТекущиеДанные.КомментарийHTML_ = ПоместитьВоВременноеХранилище(ВыбранноеЗначение,УникальныйИдентификатор);
            Элементы.Комментарии.ТекущиеДанные.Комментарий = ВыбранноеЗначение.ПолучитьТекст();
            
        ИначеЕсли  ТипЗнч(ВыбранноеЗначение) = тип("Структура") тогда
            
            Модифицированность = Истина;
            Если не  Элементы.Комментарии.ТекущиеДанные = Неопределено тогда
                Элементы.Комментарии.ТекущиеДанные.КомментарийHTML_ = ПоместитьВоВременноеХранилище(ВыбранноеЗначение,УникальныйИдентификатор);
                Элементы.Комментарии.ТекущиеДанные.Комментарий = ВыбранноеЗначение.мОписание;
            КонецЕсли;
            
            КомментарииПриАктивизацииСтроки(Неопределено);
            
        иначе
            
            ОбработкаВыбораНаСервере(ВыбранноеЗначение);
        КонецЕсли;
    КонецЕсли;
КонецПроцедуры

 

&НаСервере
//Процедура ПолучитьСообщенияНаСервере()
//    
//    Если не СистемаВзаимодействия.ИнформационнаяБазаЗарегистрирована() Тогда    
//        Возврат 
//    КонецЕсли;
//    
//    попытка	
//        Если Модифицированность тогда
//            УстановитьПривилегированныйРежим(Истина);
//            ИдентификаторПользователяСВ = ПолучитьИдентификаторНаСервере(Объект.Ссылка);
//            
//            
//            ОбсуждениеСВ = СистемаВзаимодействия.ПолучитьОбсуждение(строка(Объект.Ссылка.УникальныйИдентификатор())); 
//            Если ОбсуждениеСВ = неопределено тогда
//                ОбсуждениеСВ = СистемаВзаимодействия.СоздатьОбсуждение();
//                ОбсуждениеСВ.Ключ = Объект.Ссылка.УникальныйИдентификатор();
//                КонтекстОбсужденияСВ = Новый КонтекстОбсужденияСистемыВзаимодействия( ПолучитьНавигационнуюСсылку(Объект.Ссылка)); // работает только в 8.3.11???  .ПолучитьОбъект()
//                //	ОбсуждениеСВ.КонтекстОбсуждения = КонтекстОбсужденияСВ; 
//                ОбсуждениеСВ.Отображаемое = Истина;
//                //КонтекстОбсужденияСВ = Новый КонтекстОбсужденияСистемыВзаимодействия(ПолучитьНавигационнуюСсылку(Объект.НавСсылка.ПолучитьОбъект())); // работает только в 8.3.11???  Об
//                ОбсуждениеСВ.Заголовок = "Задача "+Объект.Номер;
//            КонецЕсли;
//            
//            Если не ОбсуждениеСВ.Участники.Содержит(СистемаВзаимодействия.ИдентификаторТекущегоПользователя()) Тогда
//                ОбсуждениеСВ.Участники.Добавить( СистемаВзаимодействия.ИдентификаторТекущегоПользователя()); 
//            КонецЕсли;
//            
//            
//            Для каждого Стр Из ИдентификаторПользователяСВ Цикл
//                Если Стр.UID <> неопределено  и Стр.UID <>  СистемаВзаимодействия.ИдентификаторТекущегоПользователя() тогда
//                    Если не ОбсуждениеСВ.Участники.Содержит(Стр.UID) Тогда
//                        ОбсуждениеСВ.Участники.Добавить( Стр.UID); 
//                    КонецЕсли;
//                КонецЕсли;
//            КонецЦикла;
//            ОбсуждениеСВ.Записать();
//            
//            
//            Сообщение = СистемаВзаимодействия.СоздатьСообщение(ОбсуждениеСВ.Идентификатор); 
//            Сообщение.Текст = "Для вас создана или изменена  задача "+Объект.Ссылка;
//            
//            Для каждого Стр Из ИдентификаторПользователяСВ Цикл
//                Если Стр.UID <> неопределено  и Стр.UID <>  СистемаВзаимодействия.ИдентификаторТекущегоПользователя() тогда
//                    Сообщение.Получатели.Добавить(Стр.UID);
//                КонецЕсли;
//            КонецЦикла;     
//            Сообщение.Записать()
//            
//        КонецЕсли;	
//        
//        
//    Исключение
//        
//    КонецПопытки; 
//КонецПроцедуры // 

&НаСервере
Функция ПолучитьИдентификаторНаСервере(Док)
    
    ТЗ =  Новый ТаблицаЗначений;
    Тз.Колонки.Добавить("UID");
    
    для Каждого ВыборкаДетальныеЗаписи из Док.Смета цикл 
        Стр = ТЗ.Добавить();
        Попытка
            Стр.UID = СистемаВзаимодействия.ПолучитьИдентификаторПользователя(ВыборкаДетальныеЗаписи.Сотрудник.ИдентификаторПользователяИБ);//ВыборкаДетальныеЗаписи.Пользователь.УникальныйИдентификатор();
        Исключение
        КонецПопытки;
    КонецЦикла;
    
    возврат ТЗ;
    
КонецФункции 

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
    
    //ПолучитьСообщенияНаСервере(); 
    ПриЧтенииНаСервере(ТекущийОбъект);
    
КонецПроцедуры

&НаКлиенте
Процедура НаУточнение(Команда)
    
    Объект.Статус = ПредопределенноеЗначение("Перечисление._СтатусыЗаявки.НаУточнении");
    
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
    
    Если не ЗначениеЗаполнено(Объект.Ссылка) тогда
        Объект.Автор = ПараметрыСеанса.ТекущийПользователь;
    иначе
        Элементы.ГруппаСтаница.ТекущаяСтраница = Элементы.ГруппаЧекЛисты;
    КонецЕсли;
    УсловноеОформление(Объект);
    
КонецПроцедуры

&НаСервере
Процедура УсловноеОформление(ТекущийОбъект)
    
    //инфо надписи  
    ИзменениеЗапрещено                              = ДатыЗапретаИзменения.ИзменениеЗапрещено("Документ._Заявка",ТекущийОбъект.Ссылка);
    Элементы.ИнфоДатаЗапрета.Видимость              = ИзменениеЗапрещено;
    Элементы.ИнфоКонтрагентЗаблокирован.Видимость   = ТекущийОбъект.Контрагент.Блокировка;
    Элементы.ПеренестиНеЗакрытыеЗадачи.Видимость    = ТекущийОбъект.Техподдержка и (ТекущийОбъект.статус = Перечисления._СтатусыЗаявки.Выполнена  или ТекущийОбъект.статус = Перечисления._СтатусыЗаявки.ПереданоВТестирование );
    Элементы.ДанныеРаботВидОбращения1.Видимость     = объект.Техподдержка;
    Элементы.ДанныеРаботКодСтроки.Видимость         = ЗначениеЗаполнено(ТекущийОбъект.НомерRM);
    
    ТолькоПросмотр = ЧЛЗаблокированы;
    
    Если РольДоступна("ПолныеПрава") тогда
        Возврат;
    КонецЕсли;
    
    
    Элементы.Техподдержка.Доступность               = Ложь;
    Элементы.Проверена.Доступность                  = РольДоступна("_ИзменениеВыполненныхПроверенныхЗаявок");
    Элементы.ДатаАкта.Доступность                   = РольДоступна("_ИзменениеВыполненныхПроверенныхЗаявок");
    Элементы.ДанныеРаботОтветственный.Доступность      = РольДоступна("_ИзменениеОтветственногоВЗадачах");
    Элементы.ПеренестиНеЗакрытыеЗадачи.Доступность  = РольДоступна("_СервисИнженер") или РольДоступна("_ИзменениеВыполненныхПроверенныхЗаявок");
    
    ТолькоПросмотр =  ЧЛЗаблокированы или ((ТекущийОбъект.Контрагент.Блокировка 
        или ТекущийОбъект.Проверена   или ИзменениеЗапрещено ) и не РольДоступна("_ИзменениеВыполненныхПроверенныхЗаявок"))//кто ставит выполенено пусть меняет заявку дальше 
        ;
    
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    если Объект.Коментарий = "###Создано_Копированием_Отказать###" тогда
        Отказ = Истина;
    КонецЕсли;
    
    
    ПриОткрытииНаСервере();
    ОбновитьсписокПодчиненности()   ;
    
    Экран = ПолучитьИнформациюЭкрановКлиента()[0];
    Если Экран.Ширина < 1920  тогда 
        ЭтаФорма.Масштаб = 80 ;    
    иначе
        Масштаб = 100;
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура КомментарииПередНачаломИзменения(Элемент, Отказ)
    
    Если 	Элементы.Комментарии.ТекущиеДанные = Неопределено тогда 
        возврат 
    КонецЕсли;
    Отказ = Элементы.Комментарии.ТекущиеДанные.Защищена ;
    
КонецПроцедуры

&НаКлиенте
Процедура КомментарииПередУдалением(Элемент, Отказ)
    
    Если 	Элементы.Комментарии.ТекущиеДанные = Неопределено тогда 
        возврат 
    КонецЕсли;
    Отказ = Элементы.Комментарии.ТекущиеДанные.Защищена;
    
КонецПроцедуры

&Насервере 
Функция  ТекущийПользователь()
    
    Возврат ПараметрыСеанса.ТекущийПользователь;
    
КонецФункции

&Насервере 
Функция  РольДоступна1(Роль)
    
    Возврат РольДоступна(Роль);
    
КонецФункции

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
    ДатаЗапрета = ДатаЗапретаРедактирования();
    Набор = РегистрыСведений._РаботыЗаДень.СоздатьНаборЗаписей();
    Набор.Отбор.Заявка.Установить(ТекущийОбъект.Ссылка);
    Набор.Прочитать(); 
    ЗначениеВДанныеФормы(Набор,ДанныеРабот); 
    ДанныеРабот.Сортировать("Дата,Сотрудник");

    н = 0 ;
    Для  Каждого стр из  ДанныеРабот цикл
        н = н + 1;
        стр.ДействуетДатаЗапрета = стр.Дата <> Дата(1,1,1) и стр.Дата <= ДатаЗапрета;
        стр.Номерстроки = н;
        стр.Защищена = Истина;
    КонецЦикла;
    
    Для  Каждого стр из Объект.Комментарии цикл
        стр.Защищена = Истина;
    КонецЦикла;
    
    
    для Каждого стр из Объект.Комментарии цикл
        Дхр = ТекущийОбъект.Комментарии[стр.НомерСтроки-1].КомментарийHTML.Получить();
        стр.КомментарийHTML_ =  ?(тип("Структура") = ТипЗнч(дхр), ПоместитьВоВременноеХранилище(дхр, УникальныйИдентификатор),дхр);
    КонецЦикла;
    //ШаблонРассылки = ТекущийОбъект.Шаблон.Получить(); 	
    УсловноеОформление(ТекущийОбъект);
    ЧЛЗаблокированы = Ложь;
    мЗадача = ДанныеРабот.Выгрузить(,"Задача");
    мЗадача.Свернуть("Задача");
    Для Каждого стр из мЗадача Цикл 
        Если не стр.Задача.Пустая() тогда
            Попытка
                ЗаблокироватьДанныеДляРедактирования(стр.Задача);
                РазблокироватьДанныеДляРедактирования(стр.Задача);
            Исключение
                Сообщить("Задача """"" + лев(стр.Задача.БизнесПроцесс.Наименование, 150) + "..."""" заблокирована! изменение невозможно
                |" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
               ЧЛЗаблокированы = Истина;
            КонецПопытки;
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры



&НаКлиенте
Процедура ДанныеРаботПередУдалением(Элемент, Отказ)
    
    для Каждого стр из Элементы.ДанныеРабот.ВыделенныеСтроки   Цикл 
        ТД = ДанныеРабот.НайтиПоИдентификатору(стр);
        Отказ = НельзяУдалитьИзменить(ТД);     
        Если  Отказ тогда
            Сообщить("в выделенных строках присутствуют строки которые нельзя удалить");
            Прервать;
        КонецЕсли;
    КонецЦикла;         

КонецПроцедуры

&НаКлиенте
Функция НельзяУдалитьИзменить (ТД)
    
    
    //либо полные права
    //либо нельзя если:
    //дата запрета
    //если защищена и ты удаляешь чужой лист 
    
    Возврат   ?(РольДоступна1("ПолныеПрава") или  РольДоступна1("_ИзменениеВыполненныхПроверенныхЗаявок"),Ложь,
    ТД.ДействуетДатаЗапрета  
    или ТД.Защищена и не ТекПольз() = ТД.Сотрудник)
    
КонецФункции

&НаКлиенте
Процедура ДанныеРаботПриАктивизацииСтроки(Элемент)

    Если Элементы.ДанныеРабот.ТекущиеДанные = Неопределено тогда 
        возврат 
    КонецЕсли;
    
    ТД = Элементы.ДанныеРабот.ТекущиеДанные;
    НельзяУдалитьИзменить = НельзяУдалитьИзменить(ТД);
    Элементы.Удалить.Доступность = не НельзяУдалитьИзменить ;
    Элементы.Группа_Задание.Видимость =  не ТД.Задача.Пустая();
    //Элементы.ДанныеРаботЗадание1.Видимость =  не ТД.Задача.Пустая();
    
    Элементы.РедактированиеИзRM.Видимость = ЗначениеЗаполнено(Объект.НомерRM);
    
    Элементы.ГруппаРедактированиеСтрокиЧекЛиста.ТолькоПросмотр = НельзяУдалитьИзменить или ЗначениеЗаполнено(Объект.НомерRM);
    
    Элементы.ПеренестиВыделенныеЧЛВЗаявку.Доступность = не Элементы.ГруппаРедактированиеСтрокиЧекЛиста.ТолькоПросмотр;
    
    Элементы.ДанныеРаботНомерСервисДеск1.ТолькоПросмотр     = не ТД.Задача.Пустая();
    Элементы.ДанныеРаботНомерСервисДеск.ТолькоПросмотр      = не ТД.Задача.Пустая();
    Элементы.ДанныеРаботВидОбращения1.ТолькоПросмотр        = не ТД.Задача.Пустая();
    Элементы.ДанныеРаботВидОбращения.ТолькоПросмотр         = не ТД.Задача.Пустая();
    
    Элементы.ДанныеРаботНомерСервисДеск1.Видимость          =  ТД.ВидОбращения = ПредопределенноеЗначение("Справочник._ВидыОбращенийТехподдержки.Сервис_деск");

    
КонецПроцедуры

&НаСервере
Функция  НеБитаяСсылка(Задача)
    
    возврат ?(Задача.пустая(), Истина, Задача.ПолучитьОбъект() <> неопределено )
    
КонецФункции


&НаКлиенте
Процедура ДанныеРаботПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
    
    
    Отказ = Истина	;
    
    Если Объект.Ссылка.Пустая() тогда
        Сообщить("Для добавление чек листов запишите заявку!"); 
        Возврат
    КонецЕсли;
    
    Если Объект.НомерRM <> 0 тогда
        ВызватьИсключение("Добавление только загрузкой из RM");
    КонецЕсли;
    Стр =  ДанныеРабот.Добавить();
    
    Если  Копирование тогда 	
        ЗаполнитьЗначенияСвойств(стр, Элементы.ДанныеРабот.ТекущиеДанные,"Задание,ИДЗадания,ЭтоЗадание");
    КонецЕсли;
    
    Стр.Сотрудник = ТекущийПользователь();
    Стр.Дата = ТекущаяДата();
    
    Элементы.ДанныеРабот.ТекущаяСтрока = стр.ПолучитьИдентификатор();
    ДанныеРаботПриИзменении();
    
КонецПроцедуры

&НаСервере
Функция  СметаСотрудникОбработкаВыбораНаСервере(ВыбранноеЗначение)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |	
    |ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК ТекущаяДолжность
    |ИЗ
    |	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
    |ГДЕ
    |	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = &ФизическоеЛицо";
    Запрос.УстановитьПараметр("ФизическоеЛицо",ВыбранноеЗначение.ФизическоеЛицо);	
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Если  ВыборкаДетальныеЗаписи.Следующий() Тогда 
        возврат  ВыборкаДетальныеЗаписи.ТекущаяДолжность
    КонецЕсли;;
    
    Возврат ""
    
КонецФункции


&НаКлиенте
Процедура ДанныеРаботЧасыПриИзменении(Элемент)
    
    ОкруглитьДоЧетвертиЧаса( Элементы.ДанныеРабот.ТекущиеДанные.Часы);
    Элементы.ДанныеРабот.ТекущиеДанные.ЧасыКлиенту = Элементы.ДанныеРабот.ТекущиеДанные.Часы;
    Если  не ЗначениеЗаполнено(Элементы.ДанныеРабот.ТекущиеДанные.Дата) тогда
        Элементы.ДанныеРабот.ТекущиеДанные.Дата = ТекущаяДата();
    КонецЕсли;
    
КонецПроцедуры


&НаКлиенте
Процедура ПеренестиВыделенныеЧЛВЗаявку(Команда)
    СтрокиКоторыеМожноПеренести = новый Массив;
    для Каждого  стр из Элементы.ДанныеРабот.ВыделенныеСтроки цикл
        Если  не  (ДанныеРабот.НайтиПоИдентификатору(стр).ЗагруженоСRM) тогда
            СтрокиКоторыеМожноПеренести.Добавить(ДанныеРабот.НайтиПоИдентификатору(стр).КодСтроки);
        иначе
            Сообщить("Нельзя перенести строку " + ДанныеРабот.НайтиПоИдентификатору(стр).НомерСтроки);
        КонецЕсли;
    КонецЦикла;
    
    
    Если СтрокиКоторыеМожноПеренести.Количество() тогда
        СписокАктивныхСтатусов = СписокСтатусовПодбора();
        //мПараметры = новый Структура("отбор",новый Структура("Статус,Проверена",СписокАктивныхСтатусов,Ложь));
        Форма = ОткрытьФорму("Документ._Заявка.Форма.ФормаВыбораНовая",, , , , ,новый ОписаниеОповещения("ПеренестиВыделенныеЧЛВЗаявкуЗавершение",ЭтаФорма,СтрокиКоторыеМожноПеренести));
        Форма.Заголовок = "Текущие изменения будут записаны,  выберите новую заявку";
        Форма.список.Отбор.Элементы.Очистить();
        
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.список,
        "Статус", СписокАктивныхСтатусов,ВидСравненияКомпоновкиДанных.ВСписке,"Активные заявки",
        Истина,?(РольДоступна1("ПолныеПрава") или  РольДоступна1("_ИзменениеВыполненныхПроверенныхЗаявок") ,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный));
        
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.список,
        "Проверена", Ложь,ВидСравненияКомпоновкиДанных.Равно, "Не проверена",
        Истина,?(РольДоступна1("ПолныеПрава")или  РольДоступна1("_ИзменениеВыполненныхПроверенныхЗаявок"),РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный));
        
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.список,
        "Контрагент", Объект.Контрагент ,ВидСравненияКомпоновкиДанных.Равно, ,
        Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
        
    КонецЕсли;
    
КонецПроцедуры

&Насервере
Функция СписокСтатусовПодбора()
    
    СписокАктивныхСтатусов = новый СписокЗначений;
    СписокАктивныхСтатусов.Добавить(ПредопределенноеЗначение("Перечисление._СтатусыЗаявки.ВРаботе"));
    СписокАктивныхСтатусов.Добавить(ПредопределенноеЗначение("Перечисление._СтатусыЗаявки.ПереданоВТестирование"));
    СписокАктивныхСтатусов.Добавить(ПредопределенноеЗначение("Перечисление._СтатусыЗаявки.Принят"));
    
    Возврат СписокАктивныхСтатусов;
    
КонецФункции

&НаКлиенте
Процедура ПеренестиВыделенныеЧЛВЗаявкуЗавершение(Зн, СтрокиКоторыеМожноПеренести) экспорт
    
    Если зн = Неопределено тогда
        Возврат
    КонецЕсли;
    Записать();
    
    _ОбщийМодульСервер.ПеренестиЧЛ(Объект.Ссылка, Зн,,СтрокиКоторыеМожноПеренести,ложь ) ;
    Прочитать();
    
КонецПроцедуры
 
&НаКлиенте
Процедура ГруппаСтаницаПриСменеСтраницы(Элемент, ТекущаяСтраница)
    
    ОбновитьсписокПодчиненности()
    
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьсписокПодчиненности()
    
    Если Объект.Ссылка.Пустая() тогда 
        возврат
    КонецЕсли;
    Ф = ПолучитьФорму("ОбщаяФорма.СтруктураПодчиненности",Новый Структура("ОбъектОтбора", Объект.Ссылка),
    ЭтаФорма,
    КлючУникальности,
    Неопределено);
    СвязанныеТД =  Ф.ВернутьТД();
    Элементы.СвязанныеТД.Высота = СвязанныеТД.высотаТаблицы * 2; 
    
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
    
    стрИД = Неопределено;
    ОбновитьсписокПодчиненности();
    ПеренестиНеЗакрытыеЗадачи();    
    ОчиститьСообщения();
    
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиЗавершение(Значение,ДП)  Экспорт
    
    Если  Значение <> Неопределено тогда
        ПеренестиНеЗакрытыеЗадачиНаСервере(Значение);
        Прочитать();
    КонецЕсли;
    
КонецПроцедуры

 
 
&НаКлиенте
Процедура ОбновитьПодчиненность(Команда)
    
    ОбновитьсписокПодчиненности();
    
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
    
    Экран = ПолучитьИнформациюЭкрановКлиента()[0];
    Если Экран.Ширина < 1920  тогда 
        ЭтаФорма.Масштаб = 80 ; 
    иначе
        Масштаб = 100;
    КонецЕсли;
    
КонецПроцедуры

 
&НаСервере
Процедура СметаСотрудникПриИзмененииНаСервере(ТС) Экспорт
    
    
    стр = Объект.Смета.НайтиПоИдентификатору(ТС);
    стр.Роль = стр.сотрудник.Роль;
    
КонецПроцедуры


&НаКлиенте
Процедура СметаСотрудникПриИзменении(Элемент)
    
    ТС = Элементы.Смета.ТекущаяСтрока;
    СметаСотрудникПриИзмененииНаСервере(ТС);
    
КонецПроцедуры


&НаКлиенте
Процедура Разослать(Команда)
    ОткрытьФорму("Документ._Заявка.Форма.ФормаОтправкиРГ",новый Структура("Список",СписокСотрудников()),ЭтаФорма);
КонецПроцедуры


&Насервере
Функция  СписокСотрудников()
    
    Возврат Объект.Смета.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник")
    
КонецФункции

&НаКлиенте
Процедура КомментарииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
    
    Если НоваяСтрока тогда
        Элементы.Комментарии.ТекущиеДанные.Дата = ТекущаяДата();
        Элементы.Комментарии.ТекущиеДанные.КонтактноеЛицо = ТекущийПользователь();
        Элементы.Комментарии.ТекущиеДанные.Защищена = Ложь;
        
        //Отказ = Истина  ;
        //
        //стр = Объект.Комментарии.Добавить();
        //ЗаполнитьЗначенияСвойств(стр,Элементы.Комментарии.ТекущиеДанные,,"Защищена"); 
        //стр.КонтактноеЛицо = ТекущийПользователь();
        //Элементы.Комментарии.ТекущаяСтрока = стр.ПолучитьИдентификатор();
        
       // ОткрытьВОтдельномОкне();
        //ОткрытьФорму("Документ._Заявка.Форма.ФормаРедактированияОписания", новый Структура("КомментарийHTML",(Элементы.Комментарии.ТекущиеДанные.КомментарийHTML_)),ЭтаФорма);    
        
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Комментарии1КомментарийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    // Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КомментарииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    ОткрытьВОтдельномОкне();
    
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВОтдельномОкне()
    
    СтандартнаяОбработка = Ложь;
    ТД = Элементы.Комментарии.ТекущиеДанные;
    
    Если тд = Неопределено тогда
        Возврат
    КонецЕсли;
    
    ДанныеКомментария = ?(ТД.КомментарийHTML_= Неопределено,  ТД.Комментарий, ТД.КомментарийHTML_);
    ОткрытьФорму("Документ._Заявка.Форма.ФормаРедактированияОписания", 
    новый Структура("ДанныеКомментария",ДанныеКомментария),ЭтаФорма,,Окно); 
    
КонецПроцедуры

&Насервере
Процедура Оповещения(ТекущийОбъект)
    
    Если Объект.Техподдержка тогда Возврат; КонецЕсли;
    
    //Курсив — символ подчёркивания (_) с каждой стороны.
    //Моноширинный шрифт — три знака апострофа (‘) с каждой стороны.
    //Полужирное начертание — две звёздочки () с каждой стороны.
    
    //фиксим изменения и рассылаем пользователям
    Заявка = ""; 
    
    ТекстСтатус = "";
    Текст = "";
    
    Если не Объект.Ссылка.Пустая() тогда
        Если  Объект.Ссылка.Статус <> Объект.Статус тогда
            ТекстСтатус = Символы.ПС + "*Изменился статус *"""  + "`" +  Объект.Ссылка.Статус  + "`" +  """ → """  + "`" +  Объект.Статус + """" + "`"  ; 
        КонецЕсли;
        
        Если  СокрЛП(ВРег(Объект.Ссылка.Название)) <> СокрЛП(ВРег(Объект.Название)) тогда
            ТекстСтатус = ТекстСтатус + Символы.ПС + "*Изменилось название :* """  + "`" +  Объект.Ссылка.Название  + "`" +  """ → """  + "`" +  Объект.Название + """" + "`" ; 
        КонецЕсли;
        
        Если  СокрЛП(ВРег(Объект.Ссылка.Описание)) <> СокрЛП(ВРег(Объект.Описание)) тогда
            ТекстСтатус = ТекстСтатус + Символы.ПС + "*Изменилось описание, старое описание:* " + "`" + Объект.Ссылка.Описание+ "`" ; 
        КонецЕсли;
        
        Для  Каждого стр из Объект.Комментарии цикл
            Если не стр.Защищена  тогда 
                Текст = Текст + Символы.ПС + 
                "*Добавлен комментарий:*   " +  
                Символы.ПС +  Символы.Таб + "{`" + Формат(стр.Дата, "ДФ='dd.MM.yy  '") + "` " + "_"+ стр.КонтактноеЛицо + "_"+ 
                Символы.ПС +  Символы.Таб + " " + лев(стр.Комментарий , 200 )+  "}" ; 
            КонецЕсли;
        КонецЦикла;
        Текст = Заявка + ТекстСтатус + Текст; 
    КонецЕсли;
    
    
    Если Текст <> Заявка тогда
        //всей РГ
        ТекущийОбъект.ДополнительныеСвойства.вставить("РассылкаОповещений",Текст);
    КонецЕсли;
    
    
КонецПроцедуры

&НаКлиенте
Процедура КомментарииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
  
    отказ = Истина;
    КомментарииПередНачаломДобавленияСервер();
    КомментарииПриАктивизацииСтрокиНаСервере();
     
КонецПроцедуры

&Насервере
Процедура КомментарииПередНачаломДобавленияСервер( )
    
    строка = Объект.Комментарии.Добавить();
    строка.КонтактноеЛицо = ПараметрыСеанса.ТекущийПользователь;
    строка.Дата = ТекущаяДата();
    Элементы.Комментарии.ТекущаяСтрока = строка.ПолучитьИдентификатор();
    
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьИнструкциюПоОсмечиванию(Команда)
    
    _ОбщийМодуль_Клиент.ОткрытьВ1С(ФайлОсмечивания());
    
КонецПроцедуры


&НаСервере
Функция  ФайлОсмечивания()
    
    Возврат Справочники._ВопросыИОтветы.НайтиПоКоду("000000005");
    
КонецФункции

&Насервере 
Функция  ТекПольз()
    
    Возврат ПараметрыСеанса.ТекущийПользователь;
    
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    ДатаЗапрета = ДатаЗапретаРедактирования();
    
КонецПроцедуры

 
&НаКлиенте
Процедура ЗаданиеСотруднику(Команда)
    Если Модифицированность тогда
        ПоказатьВопрос(Новый  ОписаниеОповещения("ЗаданиеСотрудникуЗавершение",ЭтаФорма),"Документ будет записан, продолжить?", РежимДиалогаВопрос.ДаНет);    
    иначе
        ЗаданиеСотрудникуЗавершение(КодВозвратаДиалога.Да,"НеЗаписывать")
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеСотрудникуЗавершение(Ответ,ДП) Экспорт 
    
    Если ответ = КодВозвратаДиалога.Да тогда
        Если ДП <> "НеЗаписывать" тогда
            Записан = Записать();
        иначе
            Записан = Истина;
        КонецЕсли;
        Если Записан тогда
            ОткрытьФорму("Обработка._РабочийСтол_Заявки.Форма.СозданиеЗадания", 
            новый Структура("ссылка", Объект.Ссылка), 
            ЭтаФорма, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
        КонецЕсли;
    КонецЕсли;
    
КонецПроцедуры


Функция ЕстьНезакрытые()
     
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   КОЛИЧЕСТВО(*) КАК КОЛИЧЕСТВО
        |ИЗ
        |   БизнесПроцесс._ЗадачиПоЗаявкам КАК _ЗадачиПоЗаявкам
        |ГДЕ
        |   _ЗадачиПоЗаявкам.Заявка = &Заявка
        |   И _ЗадачиПоЗаявкам.Завершен = ЛОЖЬ";
    
    Запрос.УстановитьПараметр("Заявка", Объект.Ссылка);
    
  Возврат Запрос.Выполнить().Выгрузить()[0].КОЛИЧЕСТВО;
  
КонецФункции // ЕстьНезакрытые()


 
&НаКлиенте
Процедура ПеренестиНеЗакрытыеЗадачи(Команда = Неопределено)
    //СтатусСсылка = _ОбщийМодульСервер.УТ_ЗначениеРеквизитаОбъекта(Объект.Ссылка,"Статус");
    Если Объект.Статус = ПредопределенноеЗначение("Перечисление._СтатусыЗаявки.Выполнена")
     //   и СтатусСсылка <> ПредопределенноеЗначение("Перечисление._СтатусыЗаявки.Выполнена")
        
        или Объект.Статус = ПредопределенноеЗначение("Перечисление._СтатусыЗаявки.ПереданоВТестирование")
        //и СтатусСсылка <> ПредопределенноеЗначение("Перечисление._СтатусыЗаявки.ПереданоВТестирование") 
        //и СтатусСсылка <> ПредопределенноеЗначение("Перечисление._СтатусыЗаявки.Выполнена")
        тогда
        
        КОЛИЧЕСТВО = ЕстьНезакрытые();
        Если  КОЛИЧЕСТВО = 0 тогда
            
            Сообщить("Нет не закрытых задач");
            Возврат;
        КонецЕсли;
        
        
        Если Модифицированность тогда
            ПоказатьПредупреждение(,"Сначала запишите заявку!");
            Возврат;
        КонецЕсли;
        
        Если (Объект.Статус = ПредопределенноеЗначение("Перечисление._СтатусыЗаявки.Выполнена") 
            или Объект.Статус = ПредопределенноеЗначение("Перечисление._СтатусыЗаявки.ПереданоВТестирование") ) и Объект.Техподдержка тогда
            
            СписокАктивныхСтатусов = новый СписокЗначений;
            СписокАктивныхСтатусов.Добавить(ПредопределенноеЗначение("Перечисление._СтатусыЗаявки.ВРаботе"));
            СписокАктивныхСтатусов.Добавить(ПредопределенноеЗначение("Перечисление._СтатусыЗаявки.Принят"));
            
            //мПараметры = новый Структура("отбор",новый Структура("Статус,Проверена",СписокАктивныхСтатусов,Ложь));
            Форма = ОткрытьФорму("Документ._Заявка.Форма.ФормаВыбораНовая",, , , , , новый ОписаниеОповещения("ПеренестиЗавершение",ЭтаФорма));
            Форма.список.Отбор.Элементы.Очистить();
            Форма.Заголовок = "Перенести "+КОЛИЧЕСТВО+" незакрытых заданий(я) в новую заявку?  
            | Выберите заявку"; 
            
            ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.список,
            "Статус", СписокАктивныхСтатусов,ВидСравненияКомпоновкиДанных.ВСписке,"Активные заявки",
            Истина,?(РольДоступна1("ПолныеПрава") или  РольДоступна1("_ИзменениеВыполненныхПроверенныхЗаявок") ,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный));
            
            ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.список,
            "Проверена", Ложь,ВидСравненияКомпоновкиДанных.Равно, "Не проверена",
            Истина,?(РольДоступна1("ПолныеПрава")или  РольДоступна1("_ИзменениеВыполненныхПроверенныхЗаявок"),РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный));
            
            ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.список,
            "Контрагент", Объект.Контрагент ,ВидСравненияКомпоновкиДанных.Равно, ,
            Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
            
            ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.список,
            "Проект", Объект.Проект ,ВидСравненияКомпоновкиДанных.Равно, ,
            Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
            
            ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.список,
            "Дата", Объект.Дата ,ВидСравненияКомпоновкиДанных.Больше, ,
            Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
            
            ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.список,
            "Техподдержка", Истина ,ВидСравненияКомпоновкиДанных.Равно, ,
            Истина,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
            
        КонецЕсли;
    КонецЕсли;
    
КонецПроцедуры


&НаКлиенте
Процедура ПеренестиНеЗакрытыеЗадачиЗавершение(Ответ,ДП) Экспорт
    
    Если  Ответ = Неопределено тогда Возврат КонецЕсли;
    ПеренестиНеЗакрытыеЗадачиНаСервере(Ответ);
    Прочитать();
    
КонецПроцедуры

&НаСервере
Процедура ПеренестиНеЗакрытыеЗадачиНаСервере(Значение)
    _ОбщийМодульСервер.ПеренестиНезакрытыеЗадания(Объект.Ссылка,Значение);
КонецПроцедуры


&НаКлиенте
Процедура КомментарииПриАктивизацииСтроки(Элемент)
    
    КомментарииПриАктивизацииСтрокиНаСервере()
    
КонецПроцедуры


&Насервере
Процедура КомментарииПриАктивизацииСтрокиНаСервере()
    
    ТД = Элементы.Комментарии.ТекущаяСтрока;
    Элементы.Группа18.ТолькоПросмотр = тд = Неопределено ;
    Если тд = Неопределено тогда
        КомментарийHTML.Удалить();
        Возврат
    КонецЕсли;
    ТД = Объект.Комментарии.НайтиПоИдентификатору(ТД);
    ДанныеКомментария = ?(ТД.КомментарийHTML_= Неопределено,  ТД.Комментарий, ТД.КомментарийHTML_);
    _ОбщийМодульСервер.ЗаполнитьHTML(КомментарийHTML, ДанныеКомментария);
    
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВОтдельномОкне(Команда)
    
    
    ОткрытьВОтдельномОкне();
    
КонецПроцедуры

&НаКлиенте
Процедура КомментарийHTMLПриИзменении(Элемент)
    
    стр  = _ОбщийМодульСервер.СохранитьHTML(КомментарийHTML); 
    
    ОбработкаВыбора(стр,"");
    
КонецПроцедуры
 

&НаКлиенте
Процедура ОткрытьЗадачу(Команда)
    Если Модифицированность тогда
        ПоказатьВопрос(новый ОписаниеОповещения("ОткрытьЗадачуЗавершение",ЭтаФорма),"Записать заявку перед измнением чл ?", РежимДиалогаВопрос.ДаНет);
        
    иначе
        ОткрытьФорму("Задача._ИсполнениеЗадач.Форма.ФормаЗадачи", новый Структура("Ключ,РедактированиеИзЗадачи", Элементы.ДанныеРабот.ТекущиеДанные.Задача, Истина) ,ЭтаФорма,,,,
        новый ОписаниеОповещения("ОткрытьЗадачуЗавершениеЗакрытия",ЭтаФорма),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
        
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадачуЗавершение(ответ, дп) Экспорт 
    
    Если ответ = КодВозвратаДиалога.да тогда
        Записать();
        ОткрытьФорму("Задача._ИсполнениеЗадач.Форма.ФормаЗадачи", новый Структура("Ключ,РедактированиеИзЗадачи", Элементы.ДанныеРабот.ТекущиеДанные.Задача,Истина) ,ЭтаФорма,,,,
        новый ОписаниеОповещения("ОткрытьЗадачуЗавершениеЗакрытия",ЭтаФорма),РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
    КонецЕсли;
    
КонецПроцедуры


&НаКлиенте
Процедура ОткрытьЗадачуЗавершениеЗакрытия(Ответ, дп) Экспорт 
    
    Прочитать();
    
    
КонецПроцедуры

&НаКлиенте
Процедура НомерRMПриИзменении(Элемент)
    УсловноеОформление(Объект);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРаботПриИзменении(Элемент = Неопределено)
    
    н = 0;
    для Каждого  стр из ДанныеРабот Цикл
        н = н + 1;
        стр.Номерстроки = н;
    КонецЦикла;
    
КонецПроцедуры

 

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

    _ОбщийМодульСервер.ПроверитьРСНаДатуЗапрета(ДанныеРабот,Отказ,ДатаЗапрета);  
    Набор = ДанныеФормыВЗначение(ДанныеРабот,тип("РегистрСведенийНаборЗаписей._РаботыЗаДень")); 
    
    для Каждого стр из Набор Цикл 
        стр.Заявка              = ?(стр.Заявка.Пустая(),    ТекущийОбъект.ссылка,       стр.Заявка);
        стр.КодСтроки           = ?(стр.КодСтроки = "",     новый УникальныйИдентификатор,     стр.КодСтроки);
    КонецЦикла;
    
    ТекущийОбъект.ДополнительныеСвойства.Вставить("ДанныеРабот",Набор);
    
    Если Объект.Проверена и не Объект.Ссылка.Проверена тогда
        Объект.ДатаЗакрытия = ТекущаяДата();
    КонецЕсли;
    
    Если ПереноситьЗадачиНеЗакрытые тогда
        ТекущийОбъект.ДополнительныеСвойства.Вставить("ПереноситьЗадачиНеЗакрытые");
    КонецЕсли;
    
    для Каждого стр из ТекущийОбъект.Комментарии цикл
        Дхр = ?(ЭтоАдресВременногоХранилища(Объект.Комментарии[стр.НомерСтроки-1].КомментарийHTML_), ПолучитьИзВременногоХранилища(Объект.Комментарии[стр.НомерСтроки-1].КомментарийHTML_),Объект.Комментарии[стр.НомерСтроки-1].КомментарийHTML_);
        стр.КомментарийHTML = Новый ХранилищеЗначения( Дхр);
    КонецЦикла;
    //ТекущийОбъект.Шаблон = Новый ХранилищеЗначения(ШаблонРассылки, Новый СжатиеДанных(8));
    
    Оповещения(ТекущийОбъект);
    
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРаботДатаПриИзменении(Элемент)
    
    Элементы.ДанныеРабот.ТекущиеДанные.ПроверятьДатуЗапрета = Истина;   
    
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    
    //если перевели статус, то напомним снять флаг
    Если СтатусНеВыполнено() Тогда 
        ПоказатьПредупреждение( , "Установлен флаг проверена, изменнение пользователям будет недоступно!");
    КонецЕсли; 
    
КонецПроцедуры

&НаСервере
Функция  СтатусНеВыполнено()
    Возврат Объект.Статус <> ПредопределенноеЗначение("Перечисление._СтатусыЗаявки.Выполнена") 
        и Объект.Ссылка.Статус = ПредопределенноеЗначение("Перечисление._СтатусыЗаявки.Выполнена") и Объект.Проверена
КонецФункции

&НаКлиенте
Процедура НезакрытыеЗадания(Команда)
    // Вставить содержимое обработчика.
КонецПроцедуры


 
