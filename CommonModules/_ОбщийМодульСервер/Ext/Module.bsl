
Процедура НапоминанияОбОкончанииПодпискиИТС() Экспорт
    
    Дней = Константы._СрокПредупрежденияОбОкончанииИТС_Дней.Получить();
    Кого = Константы._КогоПредупреждатьОбОкончанииИТС.Получить().Получить();
    Дней = ?(Дней = 0, 7, Дней);
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   _ПодпискиИТС.Организация КАК Организация,
    |   _ПодпискиИТС.Клиент КАК Клиент,
    |   _ПодпискиИТС.ВидПодпискиИТС КАК ВидПодпискиИТС,
    |   _ПодпискиИТС.ДатаНачала КАК ДатаНачала,
    |   _ПодпискиИТС.СрокДействия КАК СрокДействия,
    |   _ПодпискиИТС.НапоминатьОбОкончании КАК НапоминатьОбОкончании
    |ИЗ
    |   РегистрСведений._ПодпискиИТС КАК _ПодпискиИТС
    |ГДЕ
    |   _ПодпискиИТС.СрокДействия <= &СрокДействия
    |   И _ПодпискиИТС.НапоминатьОбОкончании";
    
    Запрос.УстановитьПараметр("СрокДействия", НачалоДня(ТекущаяДата()) + Дней*60*60*24);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВДЗ = РезультатЗапроса.Выбрать();
    НаборЗаписей = РегистрыСведений.НапоминанияПользователя.СоздатьНаборЗаписей();
    НаборЗаписей.Прочитать();
    
    Время = 60;
    Пока ВДЗ.Следующий() Цикл
        Для Каждого Пользователь из Кого цикл
            
            Если Пользователь.Пустая() тогда
                Продолжить; 
            КонецЕсли;
            
            ВремяСобытия = ТекущаяДата() + Время;
            
            Строка = НаборЗаписей.Добавить();
            строка.Пользователь = Пользователь;
            строка.ВремяСобытия =  ВремяСобытия;
            строка.Источник = ВДЗ.Клиент;
            строка.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
            строка.СрокНапоминания =  строка.ВремяСобытия;
            строка.Описание = ""+ Формат(ВДЗ.СрокДействия,"ДФ=dd.MM.yy") + " у " + ВДЗ.Клиент + " заканчивается ИТС " + ВДЗ.ВидПодпискиИТС;
            Время = Время + 10;  
        КонецЦикла;
        
    КонецЦикла;
    
    НаборЗаписей.Записать(); 
    
    
КонецПроцедуры

Функция ПолучитьПолноеПредставлениеКонтрагента(контрагент) Экспорт
    возврат Контрагент.НаименованиеПолное
КонецФункции

Процедура СозданиеПлановыхЗадач() Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   ШаблоныЗадач.Периодичность КАК Периодичность,
    |   ШаблоныЗадач.Старт КАК Старт,
    |   ШаблоныЗадач.Ссылка КАК Ссылка,
    |   ШаблоныЗадач.Организация КАК Организация,
    |   ШаблоныЗадач.Контрагент КАК Контрагент,
    |   ШаблоныЗадач.КонтактноеЛицо КАК КонтактноеЛицо,
    |   ШаблоныЗадач.Название КАК Название,
    |   ШаблоныЗадач.НазначенаНа КАК НазначенаНа,
    |   ШаблоныЗадач.СрокОкончания КАК СрокОкончания,
    |   ШаблоныЗадач.ОтключитьСозданиеПоШаблону КАК ОтключитьСозданиеПоШаблону,
    |   ШаблоныЗадач.Проект КАК Проект,
    |   ШаблоныЗадач.Смета.(
    |       Ссылка КАК Ссылка,
    |       НомерСтроки КАК НомерСтроки,
    |       Сотрудник КАК Сотрудник,
    |       Роль КАК Роль,
    |       ПлановыеЧасы КАК ПлановыеЧасы
    |   ) КАК Смета
    |ИЗ
    |   Справочник._ШаблоныПериодическихЗаявок КАК ШаблоныЗадач
    |ГДЕ
    |   НЕ ШаблоныЗадач.ПометкаУдаления
    |   И НЕ ШаблоныЗадач.ОтключитьСозданиеПоШаблону
    |   И (ШаблоныЗадач.СрокОкончания >= &ТекущаяДата
    |           ИЛИ ШаблоныЗадач.СрокОкончания = ДАТАВРЕМЯ(1, 1, 1))
    |   И ШаблоныЗадач.Старт <= &ТекущаяДата";
    
    Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДата()));
    
    РезультатЗапроса = Запрос.Выполнить().Выгрузить();
    
    Дата = ТекущаяДата();
    для Каждого ВДЗ из РезультатЗапроса Цикл
        
        Если ВДЗ.Периодичность = Перечисления.ДоступныеПериодыОтчета.Неделя тогда
            Дата = НачалоНедели(Дата);
            ДатаОкончания = КонецНедели(Дата);
        ИначеЕсли  ВДЗ.Периодичность = Перечисления.ДоступныеПериодыОтчета.Месяц тогда
            Дата = НачалоМесяца(Дата);
            ДатаОкончания = КонецМесяца(Дата);
        ИначеЕсли  ВДЗ.Периодичность = Перечисления.ДоступныеПериодыОтчета.Квартал тогда
            Дата = НачалоКвартала(Дата);
            ДатаОкончания = КонецКвартала(Дата);
        ИначеЕсли  ВДЗ.Периодичность = Перечисления.ДоступныеПериодыОтчета.Полугодие тогда
            Если Дата >= Дата(Год(Дата),07,01) тогда
                Дата = Дата(Год(Дата),07,01);
                ДатаОкончания = КонецГода(Дата);
            иначе
                Дата = Дата(Год(Дата),01,01);
                ДатаОкончания = Дата(Год(Дата), 06, 30);
            КонецЕсли;
        ИначеЕсли  ВДЗ.Периодичность = Перечисления.ДоступныеПериодыОтчета.Год тогда
            Дата = НачалоГода(Дата);
            ДатаОкончания = КонецГода(Дата);
        КонецЕсли;
        Шаблон = "" + ВДЗ.Ссылка.УникальныйИдентификатор() +"_"+ Формат(Дата,"ДФ=yyyy_MM_dd");
        Документ = Документы._Заявка.НайтиПоРеквизиту("ИДШаблона", Шаблон);
        
        Если Документ.Пустая() тогда 
            Документ = Документы._Заявка.СоздатьДокумент();
            ЗаполнитьЗначенияСвойств(Документ,ВДЗ ,);
            Документ.Смета.Загрузить(вдз.Смета);
            Документ.Дата = Дата;
            Документ.ДатаОкончания = ДатаОкончания;
            Документ.Статус = Перечисления._СтатусыЗаявки.Принят;
            Документ.Название = ВДЗ.Название + " " + Формат(Дата,"ДФ='MMMM yyyy'");
            Документ.Описание = Документ.Название;
            Документ.Техподдержка = Истина;
            Документ.ИДШаблона = Шаблон;
            Попытка
                Документ.Записать();
                ОбщегоНазначения.СообщитьПользователю(Документ,Документ.Ссылка);
            Исключение
            КонецПопытки;
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры
Процедура  ОтправитьвТелегу(Пользователь, Текст, Автор = Неопределено) Экспорт
    
    Если ПараметрыСеанса.РаботаСВнешнимиРесурсамиЗаблокирована тогда Возврат КонецЕсли;
    Если Пользователь = Автор тогда Возврат КонецЕсли;
    
    УстановитьПривилегированныйРежим(Истина);
    Попытка
        Token = "1194362741:AAF_IQQUyKC0asGfaelNWWSAvxiRiC2oWUc"; // токен бота
        
        Если Пользователь.ИД_ЧатаДляУведомлений = "" тогда 
            Если Автор <> Неопределено тогда
                
                Если не Автор.ИД_ЧатаДляУведомлений = "" тогда
                    ОтправитьвТелегу (Автор, "Пользователю """ + Пользователь + """ не отправлено уведомление в Телеграмм. Заполните ид чата для уведомлений пользователя");
                КонецЕсли;
                
                _СерверВзаимодействияПривилегированный.СоздатьСообщение(Автор,, Пользователь, "Задача записана, уведомление для """+Пользователь+"""не отправлено. Заполните ид чата для уведомлений пользователя");
            КонецЕсли;
            ВызватьИсключение("Задача записана, уведомление не отправлено. Заполните ид чата для уведомлений пользователя"); 
        КонецЕсли;
        
        ID = Пользователь.ИД_ЧатаДляУведомлений; // ИД пользователя
        
        Если НЕ ЗначениеЗаполнено(Текст) Тогда 
            Возврат; 
        КонецЕсли;
        
        Если Автор <> Неопределено и СтрНайти(Текст,"_Автор изменений:") = 0  тогда
            Текст = Текст  + Символы.ПС + "_Автор изменений: " + Автор + "_";
        КонецЕсли;
        
        ТекстСообщения = КодироватьСтроку(Текст, СпособКодированияСтроки.КодировкаURL);
         
        ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Новый СертификатКлиентаWindows, Новый СертификатыУдостоверяющихЦентровWindows);
        Ресурс = "bot" + Token + "/sendMessage?chat_id=" + СтрЗаменить(Формат(ID, "ЧДЦ=; ЧС=; ЧРГ=."), ".", "") + "&text= " + ТекстСообщения
        +"&parse_mode=Markdown"; 
        
        Соединение  =  Новый HTTPСоединение("api.telegram.org",443,,,,,ЗащищенноеСоединение);
        Запрос = Новый HTTPЗапрос(Ресурс);
        Ответ = Соединение.Получить(Запрос);    
        
        КодСостояния     = Ответ.КодСостояния;
        СтрокаОтвета     = Ответ.ПолучитьТелоКакСтроку();
        
        Если КодСостояния = 200 тогда
            ЧтениеОтвета = Новый ЧтениеJSON;
            ЧтениеОтвета.УстановитьСтроку(СтрокаОтвета);
            РезультатСтруктура = ПрочитатьJSON(ЧтениеОтвета);
            Если РезультатСтруктура.ok = Истина Тогда
                СтруктураMessage = РезультатСтруктура.result;
            КонецЕсли;
            
        Иначе
            Сообщить("Чат не активен или возникла другая ошибка на сервере, КодСостояния "+КодСостояния);
            Сообщить(СтрокаОтвета);
            
            Если Автор <> Неопределено тогда
                _СерверВзаимодействияПривилегированный.СоздатьСообщение(Автор,, Пользователь, "Уведомление для """ + Пользователь + """ не отправлено "+
                Символы.ПС + "Чат не активен или возникла другая ошибка на сервере, КодСостояния "+КодСостояния);
                Если не Автор.ИД_ЧатаДляУведомлений = "" тогда
                    ОтправитьвТелегу (Автор, "Уведомление для """ + Пользователь + """ не отправлено "+
                    Символы.ПС + "Чат не активен или возникла другая ошибка на сервере, КодСостояния "+КодСостояния);
                КонецЕсли;
            КонецЕсли;
            
        КонецЕсли;
    Исключение
        Сообщить(ОписаниеОшибки());
        ЗаписьЖурналаРегистрации(ОписаниеОшибки(),УровеньЖурналаРегистрации.Ошибка);
    КонецПопытки;
КонецПроцедуры


// Рассылка  в телеграмм
//
// Параметры:
//  мПользователи  - СправочникСсылка.Пользователи - ССЫЛКА НА ПОЛЬЗОВАТЕЛЯ 
//                 или массив  -  элементы СправочникСсылка.Пользователи ССЫЛКА НА ПОЛЬЗОВАТЕЛЯ 
//  ТекстСообщения  - строка -отправляемое сообщение
//  Автор  - СправочникСсылка.Пользователи - ССЫЛКА НА ПОЛЬЗОВАТЕЛЯ 
//  Ссылка  - Любая ссылка -  

 Процедура Рассылка(мПользователи, ТекстСообщения, Автор, Ссылка) Экспорт
    Если ПараметрыСеанса.РаботаСВнешнимиРесурсамиЗаблокирована тогда Возврат КонецЕсли;
    
    Если ТипЗнч(мПользователи) = тип("СправочникСсылка.Пользователи") тогда
        Пользователи  = новый Массив;
        Пользователи.Добавить(мПользователи);
    иначе
        Пользователи = мПользователи ;
    КонецЕсли;
    
    для Каждого  Сотрудник из Пользователи цикл
        Если не Сотрудник.Пустая() тогда
            Если Сотрудник <> Автор тогда             
                //_СерверВзаимодействияПривилегированный.СоздатьСообщение(Сотрудник,, Ссылка, ТекстСообщения);
                _ОбщийМодульСервер.ОтправитьвТелегу(Сотрудник,ТекстСообщения,Автор );  
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

Процедура ОткрытьВ1ССервер(ТабДок, ТекФайл) Экспорт
    
    Файл = Неопределено;
    Файл = ТекФайл.Файл.Получить();
    
    ПутьКФайлуМХЛ = ПолучитьИмяВременногоФайла(ТекФайл.Расширение); //тут я просто предопределенный формат файла выставил но он может быть любой
    
    Если ТипЗнч(Файл) = тип("ДвоичныеДанные") тогда
        Файл.Записать(ПутьКФайлуМХЛ);
    КонецЕсли;
    
    Табдок.Прочитать(ПутьКФайлуМХЛ);
    ТабДок.ИспользуемоеИмяФайла = ПутьКФайлуМХЛ;
    
КонецПроцедуры

Функция ПолучитьОписаниеОбновления(ПолучатьВсеИзменения) Экспорт
    
    
    Возврат  РегистрыСведений._ОписаниеИзмененийВПрограмме.ВернутьМакетШапки(ПолучатьВсеИзменения);
        
    
КонецФункции

Процедура ДобавитьПросмотрено(Периоды) Экспорт
    
    Для Каждого Период из Периоды цикл
        Менеджер = РегистрыСведений._ОписаниеИзмененийВПрограмме.СоздатьМенеджерЗаписи();
        Менеджер.Период = Период;
        Менеджер.Прочитать();
        Менеджер.Период = Период;
        ТД = Менеджер.Изменения.Получить();
        Если Тип("Структура") = ТипЗнч(ТД) тогда
            Если ТД.Свойство("Просмотрели")  тогда
                ТД.Просмотрели.Добавить(ПараметрыСеанса.ТекущийПользователь);
            КонецЕсли;
        КонецЕсли;
        Менеджер.Изменения = новый ХранилищеЗначения(ТД);
        Менеджер.Записать();
    КонецЦикла;
    
КонецПроцедуры

Процедура РассылкаНапоминанийОДР() Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   Пользователи.ДатаРождения КАК ДатаРождения,
    |   РАЗНОСТЬДАТ(&ТекущаяДатаГод, ДОБАВИТЬКДАТЕ(Пользователи.ДатаРождения, 
    |   ГОД, ГОД(&ТекущаяДатаГод) - ГОД(Пользователи.ДатаРождения)), ДЕНЬ) КАК ОсталосьДней,
    |   Пользователи.Ссылка КАК Ссылка,
    |   РАЗНОСТЬДАТ(&ТекущаяДатаГод, ДОБАВИТЬКДАТЕ(Пользователи.ДатаРождения, 
    |   ГОД, ГОД(&ТекущаяДатаГод) - ГОД(Пользователи.ДатаРождения)), ДЕНЬ) < 2
    |       И РАЗНОСТЬДАТ(&ТекущаяДатаГод, ДОБАВИТЬКДАТЕ(Пользователи.ДатаРождения, 
    |   ГОД, ГОД(&ТекущаяДатаГод) - ГОД(Пользователи.ДатаРождения)), ДЕНЬ) >= 0
    |       И Пользователи.ДатаРождения <> ДАТАВРЕМЯ(1, 1, 1) КАК Скоро
    |ИЗ
    |   Справочник.Пользователи КАК Пользователи
    |ГДЕ
    |   Пользователи.ПометкаУдаления = ЛОЖЬ
    |   И Пользователи.Служебный = ЛОЖЬ
    |   И Пользователи.Недействителен = ЛОЖЬ
    |
    |УПОРЯДОЧИТЬ ПО
    |   ОсталосьДней";
    
    Запрос.УстановитьПараметр("ТекущаяДатаГод", НачалоДня(ТекущаяДата()));
    
    РезультатЗапроса = Запрос.Выполнить().Выгрузить();
    
    
    для Каждого стр из РезультатЗапроса цикл
        Если стр.Скоро тогда
            Если стр.ОсталосьДней = 1 тогда 
                Текст = "*Завтра день рождения у " + стр.Ссылка + "*"; 
            ИначеЕсли  стр.ОсталосьДней = 0 тогда   
                Текст = "*Сегодня день рождения у " + стр.Ссылка + "*"; 
            КонецЕсли;
            
            для Каждого стр1 из РезультатЗапроса цикл
                Если стр1.Ссылка <> стр.Ссылка  тогда
                    _ОбщийМодульСервер.ОтправитьвТелегу(стр1.Ссылка,Текст);
                КонецЕсли;
            КонецЦикла;
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

Функция ПоследняяЗадачаПоБП(БП) Экспорт
    
    Запрос = новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
    |  _ИсполнениеЗадачЗадачиПоИсполнителю.Ссылка КАК Ссылка
    |ИЗ
    |  Задача._ИсполнениеЗадач.ЗадачиПоИсполнителю(&Исполнитель, ) КАК _ИсполнениеЗадачЗадачиПоИсполнителю
    |
    |УПОРЯДОЧИТЬ ПО
    |  Ссылка УБЫВ"  );
    Запрос.УстановитьПараметр( "Исполнитель", Пользователи.ТекущийПользователь());
   Рез = Запрос.Выполнить().Выгрузить() ;
   Возврат ?(Рез.Количество(), рез[0].ссылка, БП);
    
КонецФункции

Процедура РазослатьНапоминание(стр,РезультатЗапроса) Экспорт
    
    
    
КонецПроцедуры

 //29.03.21 - меняем логику- не можем закрыть заявку пока все подчиненные не выполнены
Процедура УдалитьЗакрытьПодчиненныеЗаявки(Ссылка)Экспорт 
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   Заявка.Ссылка КАК Ссылка
    |ИЗ
    |   Документ._Заявка КАК Заявка
    |ГДЕ
    |   Заявка.Основание = &Основание";
    
    Запрос.УстановитьПараметр("Основание", Ссылка);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаСсылка = РезультатЗапроса.Выбрать();
    
    
    Пока ВыборкаСсылка.Следующий() Цикл
        Док =  ВыборкаСсылка.Ссылка.ПолучитьОбъект();
        Док.Статус = Перечисления._СтатусыЗаявки.Выполнена ;
        Док.Записать();
    КонецЦикла;
    
    
КонецПроцедуры

Процедура ПеренестиНезакрытыеЗадания(ЗаявкаИсточник,ЗаявкаПриемник = Неопределено) Экспорт
    
    сс = Истина;
    Если ЗаявкаПриемник = Неопределено тогда 
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |   Заявка.Ссылка КАК Ссылка
        |ИЗ
        |   Документ._Заявка КАК Заявка
        |ГДЕ
        |   Заявка.Контрагент = &Контрагент
        |   И (Заявка.Статус = &СтатусВРаботе
        |           ИЛИ Заявка.Статус = &СтатусПринят)
        |   И Заявка.Техподдержка
        |   И НЕ Заявка.ПометкаУдаления
        |   И Заявка.Проект = &Проект
        |   И Заявка.Ссылка <> &Ссылка
        |   И Заявка.Дата > &Дата
        |
        |УПОРЯДОЧИТЬ ПО
        |   Заявка.Дата УБЫВ";
        
        Запрос.УстановитьПараметр("Дата", ЗаявкаИсточник.Дата);
        Запрос.УстановитьПараметр("Ссылка", ЗаявкаИсточник);
        Запрос.УстановитьПараметр("Контрагент", ЗаявкаИсточник.Контрагент);
        Запрос.УстановитьПараметр("Проект", ЗаявкаИсточник.Проект);
        Запрос.УстановитьПараметр("СтатусВРаботе", Перечисления._СтатусыЗаявки.ВРаботе);
        Запрос.УстановитьПараметр("СтатусПринят", Перечисления._СтатусыЗаявки.Принят);
        
        РезультатЗапроса = Запрос.Выполнить();
        
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        Если  ВыборкаДетальныеЗаписи.Следующий() ТОГДА
            ЗаявкаПриемник = ВыборкаДетальныеЗаписи.ссылка;        
        иначе
            _ОбщийМодульСервер.ОтправитьвТелегу(ПараметрыСеанса.ТекущийПользователь,"По заявке " + ЗаявкаИсточник + " не закрытые задания не перенесены, 
            |не найдена новая заявка техподдержки!",Неопределено);
            Сообщить("По заявке " + ЗаявкаИсточник + " не закрытые задания не перенесены, 
            |не найдена новая заявка техподдержки!");
            Возврат;
        КонецЕсли;
    КонецЕсли;
    
     
    //переносим бп на новую заявку
    //ЛИСТЫ НЕ ТРОГАЕМ !!!!
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   _ЗадачиПоЗаявкам.Ссылка КАК Ссылка
    |ИЗ
    |   БизнесПроцесс._ЗадачиПоЗаявкам КАК _ЗадачиПоЗаявкам
    |ГДЕ
    |   _ЗадачиПоЗаявкам.Заявка = &Заявка
    |   И _ЗадачиПоЗаявкам.Завершен = ЛОЖЬ";
    
    Запрос.УстановитьПараметр("Заявка", ЗаявкаИсточник);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВДЗ = РезультатЗапроса.Выбрать();
    
    Пока ВДЗ.Следующий() Цикл
        НачатьТранзакцию();
        сс = Ложь;
        ДО = ВДЗ.Ссылка.ПолучитьОбъект();
        ДО.Заявка = ЗаявкаПриемник.Ссылка;
        ДО.ДополнительныеСвойства.Вставить("ЗакрытиеЗаявки");
        ДО.Записать();
        ЗафиксироватьТранзакцию();
    КонецЦикла;
    
     
    Если сс тогда       
        Сообщить("Нет не закрытых задач");
    иначе
        Сообщить("ЗадачиПеренесены");
    КонецЕсли;
    
КонецПроцедуры

Процедура ЗаполнитьHTML(КомментарийHTML, ДанныеКомментария)  Экспорт
    //соединяем новый и старый механизм 
    //если это адрес вр хранилища то там структура 
    КомментарийHTML.Удалить();
    Если тип("Строка") = ТипЗнч(ДанныеКомментария) и ЭтоАдресВременногоХранилища(ДанныеКомментария)  тогда
        Попытка
            стр =  ПолучитьИзВременногоХранилища(ДанныеКомментария) ;
            КомментарийHTML.УстановитьHTML(стр.мТекст, стр.мВложения);
        Исключение
        КонецПопытки;
        Попытка
            стр =  ПолучитьИзВременногоХранилища(ДанныеКомментария) ;
            КомментарийHTML.УстановитьHTML(стр.мТекст, стр.мВложения);
        Исключение
        КонецПопытки;
    иначеЕсли тип("Структура") = ТипЗнч(ДанныеКомментария) тогда
        Попытка
            КомментарийHTML.УстановитьHTML(ДанныеКомментария.мТекст, ДанныеКомментария.мВложения);
        Исключение
        КонецПопытки;
    иначеЕсли ТипЗнч( ДанныеКомментария) = тип("Строка") и не ЭтоАдресВременногоХранилища(ДанныеКомментария) Тогда 
        //если это просто строка то там текст
        КомментарийHTML.УстановитьHTML(ДанныеКомментария,новый Структура);
    иначе
        //иначе это сам форматированный док
        КомментарийHTML = ДанныеКомментария;
    КонецЕсли; 
КонецПроцедуры

Функция СохранитьHTML(КомментарийHTML)  Экспорт
    
    стр = новый Структура;
    мТекст  =  "";
    мВложения = новый Структура;
    КомментарийHTML.ПолучитьHTML(мТекст,мВложения);
    стр.Вставить("мТекст",мТекст);
    стр.Вставить("мВложения",мВложения);
    мОписание = КомментарийHTML.получитьТекст();
    
    пока СтрНайти(мОписание, Символы.ПС + Символы.ПС) <> 0 Цикл 
        мОписание = СтрЗаменить(мОписание, Символы.ПС + Символы.ПС, Символы.ПС );    
    КонецЦикла;

    стр.Вставить("мОписание", мОписание);
    
    Возврат стр;

КонецФункции

Процедура ОбновитьПредпросмотр(АдресДанныхФайла,ТекущиеДанные,УникальныйИдентификатор)Экспорт
    
    РасширенияДляПредпросмотра = Новый СписокЗначений;
    РасширенияДляПредпросмотра.Добавить("bmp");
    РасширенияДляПредпросмотра.Добавить("emf");
    РасширенияДляПредпросмотра.Добавить("gif");
    РасширенияДляПредпросмотра.Добавить("ico");
    РасширенияДляПредпросмотра.Добавить("icon");
    РасширенияДляПредпросмотра.Добавить("jpg");
    РасширенияДляПредпросмотра.Добавить("jpeg");
    РасширенияДляПредпросмотра.Добавить("png");
    РасширенияДляПредпросмотра.Добавить("tiff");
    РасширенияДляПредпросмотра.Добавить("tif");
    РасширенияДляПредпросмотра.Добавить("wmf");
    
    Если ТекущиеДанные <> Неопределено И РасширенияДляПредпросмотра.НайтиПоЗначению(ТекущиеДанные.Расширение) <> Неопределено Тогда
        
        Попытка
            ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ТекущиеДанные.Ссылка, Неопределено, УникальныйИдентификатор,, АдресДанныхФайла);
            АдресДанныхФайла = ДанныеФайла.СсылкаНаДвоичныеДанныеФайла;
        Исключение
            // Если файла не существует, то будет вызвано исключение.
            АдресДанныхФайла = Неопределено;
        КонецПопытки;
        
    Иначе
        
        АдресДанныхФайла = Неопределено;
        
    КонецЕсли;
    
    
КонецПроцедуры

Функция УТ_ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные = Ложь) Экспорт
    
    Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита, ВыбратьРазрешенные);
	
КонецФункции 

//Процедура ПеренестиЧлИзЗадачиВЗаявку(Задача) Экспорт
//    
//    Если Задача.БизнесПроцесс.Заявка.Проверена или
//        Задача.БизнесПроцесс.Заявка.Статус = Перечисления._СтатусыЗаявки.Выполнена тогда
//        Возврат
//    КонецЕсли;
//    
//    Запрос = Новый Запрос;
//    Запрос.Текст = 
//    "ВЫБРАТЬ
//    |   _ИсполнениеЗадачЧекЛисты.Ссылка.БизнесПроцесс.Заявка КАК Заявка,
//    |   _ИсполнениеЗадачЧекЛисты.Ссылка КАК Ссылка,
//    |   _ИсполнениеЗадачЧекЛисты.Ссылка.БизнесПроцесс КАК БизнесПроцесс,
//    |   _ИсполнениеЗадачЧекЛисты.НомерСтроки КАК НомерСтроки,
//    |   _ИсполнениеЗадачЧекЛисты.Дата КАК Дата,
//    |   _ИсполнениеЗадачЧекЛисты.Описание КАК Описание,
//    |   _ИсполнениеЗадачЧекЛисты.Часы КАК Часы,
//    |   _ИсполнениеЗадачЧекЛисты.КодСтроки КАК КодСтроки,
//    |   _ИсполнениеЗадачЧекЛисты.Ссылка.БизнесПроцесс.НеВыставлятьКонтрагенту КАК НеВыставлятьКонтрагенту
//    |ИЗ
//    |   Задача._ИсполнениеЗадач.ЧекЛисты КАК _ИсполнениеЗадачЧекЛисты
//    |ГДЕ
//    |   _ИсполнениеЗадачЧекЛисты.Ссылка = &Ссылка
//    |";
//    
//    Запрос.УстановитьПараметр("Ссылка", Задача);
//    
//    РезультатЗапроса = Запрос.Выполнить();
//    
//    ВДЗ = РезультатЗапроса.Выгрузить();
//    ЗаблокироватьДанныеДляРедактирования(Задача.Заявка);
//    Док = Задача.БизнесПроцесс.Заявка.ПолучитьОбъект();
//    для Каждого  ВыборкаДетальныеЗаписи из ВДЗ Цикл
//        строкаЧл = Док.чекЛисты.НайтиСтроки(Новый Структура("КодСтроки,Задача",ВыборкаДетальныеЗаписи.КодСтроки,Задача)) ;
//        Если строкаЧл.Количество()  тогда
//            строкаЧл = строкаЧл[0];    
//        Иначе 
//            строкаЧл                = Док.чекЛисты.Добавить();
//        КонецЕсли;
//        
//        строкаЧл.Ответственный  = ВыборкаДетальныеЗаписи.БизнесПроцесс.Автор;
//        строкаЧл.Сотрудник      = ВыборкаДетальныеЗаписи.Ссылка.Исполнитель;
//        строкаЧл.Часы           = ВыборкаДетальныеЗаписи.Часы;
//        строкаЧл.ЧасыКлиенту    = ?(ВыборкаДетальныеЗаписи.НеВыставлятьКонтрагенту,0, ВыборкаДетальныеЗаписи.Часы);
//        строкаЧл.Описание       = ВыборкаДетальныеЗаписи.Описание;
//        строкаЧл.ЭтоЗадание     = Истина;
//        строкаЧл.Задача         = ВыборкаДетальныеЗаписи.Ссылка;
//        строкаЧл.Важная         = ВыборкаДетальныеЗаписи.БизнесПроцесс.Срочная;
//        строкаЧл.Дата           = ВыборкаДетальныеЗаписи.Дата;
//        строкаЧл.Задание        = ВыборкаДетальныеЗаписи.БизнесПроцесс.Наименование + ?(Задача.ОписаниеДоработки <> "" , Символы.ПС + Задача.ОписаниеДоработки,"");
//        строкаЧл.ЗаданиеHTML    = ВыборкаДетальныеЗаписи.БизнесПроцесс.ЗаданиеHTML;
//        строкаЧл.Задача         = Задача;
//        строкаЧл.КодСтроки      = ВыборкаДетальныеЗаписи.КодСтроки;
//    КонецЦикла;
//    //УдалимУдаленные
//    УдаляемыеСтроки  = новый Массив;
//    строки  =  Док.ЧекЛисты.НайтиСтроки(новый Структура("Задача",Задача));
//    для Каждого  стр из строки цикл
//        Если  ВДЗ.Найти(стр.КодСтроки,"КодСтроки") = Неопределено тогда
//             Док.ЧекЛисты.Удалить(стр);
//        КонецЕсли;
//    КонецЦикла;
//    //рс не трогали - нечего заполняеть его
//    Док.ДополнительныеСвойства.Вставить("ВнесениеЧлИзРС");
//    Док.Записать();
//    РазблокироватьДанныеДляРедактирования(Задача.Заявка);

//    
//КонецПроцедуры

Процедура ПометитьСвязанныеЗадачи(БП) Экспорт
    
    //пометим подчиненные задачи
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   _ИсполнениеЗадач.Ссылка КАК Ссылка
    |ИЗ
    |   Задача._ИсполнениеЗадач КАК _ИсполнениеЗадач
    |ГДЕ
    |   _ИсполнениеЗадач.БизнесПроцесс = &БизнесПроцесс
    |   И не _ИсполнениеЗадач.ПометкаУдаления ";
    
    Запрос.УстановитьПараметр("БизнесПроцесс", БП);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        ОбЗ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
        ОбЗ. УстановитьПометкуУдаления(Истина);
    КонецЦикла;
    
КонецПроцедуры


Процедура ПеренестиЧлВЗаявку(Заявка) Экспорт
    
    //м.б. одна а м.б. несколько 
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   _Заявка.Ссылка КАК Ссылка
    |ИЗ
    |   Документ._Заявка КАК _Заявка
    |ГДЕ
    |   _Заявка.Ссылка В(&Заявка)";
    Запрос.УстановитьПараметр("Заявка", Заявка);
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаЗаявка = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаЗаявка.Следующий() Цикл
        //блокировка 
        
        Попытка
            ЗаблокироватьДанныеДляРедактирования(ВыборкаЗаявка.Ссылка);
            
            ВыборкаДетальныеЗаписи = ВыборкаЗаявка.Выбрать();
            
            Док = ВыборкаЗаявка.Ссылка.ПолучитьОбъект();

            Документы._Заявка.ПеренестиВсеНевыставленныеЧасыИзЗадач(Док); 
            
            Док.ДополнительныеСвойства.Вставить("ВнесениеЧлИзРС");
            Док.Записать();
            РазблокироватьДанныеДляРедактирования(ВыборкаЗаявка.Ссылка);
        Исключение
            ЗаписьЖурналаРегистрации("#Ошибка внесения ЧЛ ", УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
        КонецПопытки;
    КонецЦикла;
    
КонецПроцедуры

Процедура СоздатьЗадачиИБП(Параметры = Неопределено) Экспорт 
   возврат;
   
    БП = новый Массив;
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   _ЗаявкаЧекЛисты.Ответственный КАК Автор,
        |   _ЗаявкаЧекЛисты.Вложения КАК Вложения,
        |   _ЗаявкаЧекЛисты.ДатаПланОтветственный КАК Дата,
        |   _ЗаявкаЧекЛисты.ДатаПланОтветственный КАК ДатаПлановая,
        |   _ЗаявкаЧекЛисты.ЗаданиеHTML КАК ЗаданиеHTML,
        |   _ЗаявкаЧекЛисты.Ссылка КАК Заявка,
        |   _ЗаявкаЧекЛисты.Сотрудник КАК Исполнитель,
        |   _ЗаявкаЧекЛисты.Задание КАК Наименование,
        |   _ЗаявкаЧекЛисты.Статус = &Отменена КАК Отменена,
        |   _ЗаявкаЧекЛисты.Важная КАК Срочная,
       // |   _ЗаявкаЧекЛисты.Ссылка.КонтактноеЛицо КАК КонтактноеЛицо,
        |   _ЗаявкаЧекЛисты.ЧасыПлановые КАК ЧасыПлановые
        |ИЗ
        |   Документ._Заявка.ЧекЛисты КАК _ЗаявкаЧекЛисты
        |ГДЕ
        |   _ЗаявкаЧекЛисты.ЭтоЗадание
        |   И _ЗаявкаЧекЛисты.Часы = 0
        |   И _ЗаявкаЧекЛисты.Статус <> &Отменена
        |   И НЕ _ЗаявкаЧекЛисты.Ссылка.Статус В (ЗНАЧЕНИЕ(перечисление._СтатусыЗаявки.Выполнена), ЗНАЧЕНИЕ(перечисление._СтатусыЗаявки.Отменен))
        |   И _ЗаявкаЧекЛисты.Ссылка.Проверена = ЛОЖЬ
        |   И _ЗаявкаЧекЛисты.Ссылка.ПометкаУдаления = ЛОЖЬ";
    
    запрос.УстановитьПараметр("Отменена",Перечисления._СтатусыЧЛ.Отменено);
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        
        Док = БизнесПроцессы._ЗадачиПоЗаявкам.СоздатьБизнесПроцесс();
        ЗаполнитьЗначенияСвойств(Док,ВыборкаДетальныеЗаписи);
        Док.Записать();
        
        БП.Добавить(Док.Ссылка);
        
    КонецЦикла;
       
    для Каждого Ссылка из БП Цикл 
        док = Ссылка.ПолучитьОбъект();
        Док.Старт();
    КонецЦикла;
    

    
КонецПроцедуры

Процедура ПеренестиЧЛ(ЗаявкаОткуда,ЗаявкаКуда,Ссылка = Неопределено, КодыСтрок = Неопределено, БлокироватьИсточник = Истина) Экспорт
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   _РаботыЗаДень.Заявка КАК Заявка,
    |   _РаботыЗаДень.КодСтроки КАК КодСтроки,
    |   _РаботыЗаДень.Задача КАК Задача
    |ИЗ
    |   РегистрСведений._РаботыЗаДень КАК _РаботыЗаДень
    |ГДЕ
    |   _РаботыЗаДень.Заявка = &Ссылка"+ ?(Ссылка = Неопределено, "", "
    |   И  _РаботыЗаДень.Задача.БизнесПроцесс = &БизнесПроцесс ")+ ?(КодыСтрок = Неопределено, "", "
    |   И _РаботыЗаДень.КодСтроки В(&КодыСтрок)");
    
    Запрос.УстановитьПараметр("КодыСтрок", КодыСтрок);
    Запрос.УстановитьПараметр("Ссылка", ЗаявкаОткуда);
    Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
    
    РезультатЗапроса = Запрос.Выполнить().Выгрузить();
    
    
    Если не РезультатЗапроса.Количество() тогда Возврат КонецЕсли;
     
    Если ЗаявкаОткуда.Проверена 
        //или ЗаявкаОткуда.Статус = Перечисления._СтатусыЗаявки.Выполнена )  // достатчоно галки проверена
        и не РольДоступна("ПолныеПрава") 
        и не РольДоступна("_ИзменениеВыполненныхПроверенныхЗаявок") 
        тогда
        ВызватьИсключение("Невозможно перенеси ЧЛ - нельзя менять заявку " + ЗаявкаОткуда);
    КонецЕсли;
    
    Если ЗаявкаКуда.Проверена 
        //или        ЗаявкаКуда.Статус = Перечисления._СтатусыЗаявки.Выполнена)  // достатчоно галки проверена
        и не РольДоступна("ПолныеПрава") 
        и не РольДоступна("_ИзменениеВыполненныхПроверенныхЗаявок") 
        тогда
        ВызватьИсключение("Невозможно перенеси ЧЛ - нельзя менять заявку " + ЗаявкаКуда);
    КонецЕсли;
    

    
    НачатьТранзакцию();
    
    //блокировка 
    Попытка
        
        ЗаблокироватьДанныеДляРедактирования(ЗаявкаКуда);
        Если БлокироватьИсточник тогда
            ЗаблокироватьДанныеДляРедактирования(ЗаявкаОткуда);
        КонецЕсли;
        набор = РегистрыСведений._РаботыЗаДень.СоздатьНаборЗаписей();
        
        для Каждого  стр из РезультатЗапроса цикл
            набор = РегистрыСведений._РаботыЗаДень.СоздатьНаборЗаписей();
            набор.Отбор.Задача.установить(стр.Задача);
            набор.Отбор.КодСтроки.установить(стр.КодСтроки);
            набор.Прочитать();
            
            для Каждого стр1 из набор цикл
                
                стр1.Заявка = ЗаявкаКуда;
                
            КонецЦикла;
            
            набор.Записать();
            
        КонецЦикла;
        
        
        РазблокироватьДанныеДляРедактирования(ЗаявкаКуда);
        Если БлокироватьИсточник тогда
            РазблокироватьДанныеДляРедактирования(ЗаявкаОткуда);
        КонецЕсли;
        ЗафиксироватьТранзакцию();
    Исключение
        ОбщегоНазначения.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        ОтменитьТранзакцию();
    КонецПопытки;
    
    
    
    
КонецПроцедуры

Процедура _АктуализацияЧасов() Экспорт
    ВызватьИсключение("не актуальна");
    Запрос = Новый Запрос;
    Запрос.Текст = 
        "ВЫБРАТЬ
        |   _РаботыЗаДень.Заявка КАК Заявка,
        |   _РаботыЗаДень.КодСтроки КАК КодСтроки,
        |   _РаботыЗаДень.Часы КАК Часы,
        |   _РаботыЗаДень.Сотрудник КАК Сотрудник,
        |   ЗНАЧЕНИЕ(Задача._ИсполнениеЗадач.ПустаяСсылка) КАК Задача,
        |   ИСТИНА КАК ЧасыВнешнегоСотрудника,
        |   _РаботыЗаДень.Описание КАК Описание
        |ПОМЕСТИТЬ ВТРС
        |ИЗ
        |   РегистрСведений._РаботыЗаДень КАК _РаботыЗаДень
        |
        |ОБЪЕДИНИТЬ ВСЕ
        |
        |ВЫБРАТЬ
        |   _ИсполнениеЗадачЧекЛисты.Ссылка.БизнесПроцесс.Заявка,
        |   _ИсполнениеЗадачЧекЛисты.КодСтроки,
        |   _ИсполнениеЗадачЧекЛисты.Часы,
        |   _ИсполнениеЗадачЧекЛисты.Ссылка.Исполнитель,
        |   _ИсполнениеЗадачЧекЛисты.Ссылка,
        |   ЛОЖЬ,
        |   _ИсполнениеЗадачЧекЛисты.Описание
        |ИЗ
        |   Задача._ИсполнениеЗадач.ЧекЛисты КАК _ИсполнениеЗадачЧекЛисты
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   _ЗаявкаЧекЛисты.Часы КАК Часы,
        |   _ЗаявкаЧекЛисты.Сотрудник КАК Сотрудник,
        |   _ЗаявкаЧекЛисты.КодСтроки КАК КодСтроки,
        |   _ЗаявкаЧекЛисты.Задача КАК Задача,
        |   _ЗаявкаЧекЛисты.Ссылка КАК Ссылка,
        |   _ЗаявкаЧекЛисты.Описание КАК Описание
        |ПОМЕСТИТЬ ВТ_Задачи
        |ИЗ
        |   Документ._Заявка.ЧекЛисты КАК _ЗаявкаЧекЛисты
        |ГДЕ
        |   НЕ(_ЗаявкаЧекЛисты.КодСтроки = ""00000000-0000-0000-0000-000000000000""
        |               ИЛИ _ЗаявкаЧекЛисты.КодСтроки = """")
        |;
        |
        |////////////////////////////////////////////////////////////////////////////////
        |ВЫБРАТЬ
        |   ЕСТЬNULL(ВТ_Задачи.Ссылка, ВТРС.Заявка) КАК Заявка
        |ИЗ
        |   ВТРС КАК ВТРС
        |       ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Задачи КАК ВТ_Задачи
        |       ПО ВТРС.Заявка = ВТ_Задачи.Ссылка
        |           И ВТРС.КодСтроки = ВТ_Задачи.КодСтроки
        |           И ВТРС.Задача = ВТ_Задачи.Задача
        |ГДЕ
        |   (ВТ_Задачи.Сотрудник <> ВТРС.Сотрудник
        |           ИЛИ ВТ_Задачи.Описание <> ВТРС.Описание
        |           ИЛИ ВТ_Задачи.Часы <> ВТРС.Часы
        |           ИЛИ ВТ_Задачи.Сотрудник ЕСТЬ NULL
        |           ИЛИ ВТРС.Сотрудник ЕСТЬ NULL)
        |
        |СГРУППИРОВАТЬ ПО
        |   ЕСТЬNULL(ВТ_Задачи.Ссылка, ВТРС.Заявка)";
        
        РезультатЗапроса = Запрос.Выполнить();
        ПеренестиЧлВЗаявку(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Заявка"));
        

КонецПроцедуры

Процедура ПроверитьРСНаДатуЗапрета(Набор, Отказ, ДатаЗапрета = Неопределено)  Экспорт
    
    Если ДатаЗапрета = Неопределено тогда 
        ДатаЗапрета = ДатаЗапретаРедактирования();
    КонецЕсли;
    
    //Если тип("ТаблицаЗначений") <> ТипЗнч(Набор) тогда
    //    мНабор = Набор.выгрузить();
    //иначе
    //    мНабор = Набор;
    //КонецЕсли;
    //Если мНабор.колонки.Найти("ПроверятьДатуЗапрета") = Неопределено тогда
    //    мНабор.Колонки.Добавить("ПроверятьДатуЗапрета");
    //    
    //    Для Каждого стр из мНабор Цикл
    //        стр.ПроверятьДатуЗапрета = Истина;
    //    КонецЦикла;
    //    
    //КонецЕсли;
    
   
    //Для Каждого стр из мНабор Цикл
    //    Если  ЗначениеЗаполнено(ДатаЗапрета) и стр.Дата <= ДатаЗапрета
    //        и  стр.ПроверятьДатуЗапрета
    //        и не РольДоступна("_ИзменениеВыполненныхПроверенныхЗаявок")
    //        и не РольДоступна("Полныеправа") тогда
    //        ОбщегоНазначения.СообщитьПользователю(СтрШаблон("ЧЛ (%1, %2, %3 ) 
    //        |попадает под дату запрета !!!",стр.Заявка,стр.Дата, стр.Описание),,,,Отказ);
    //    КонецЕсли;
    //КонецЦикла;



КонецПроцедуры

Процедура ОбновитьОписанияЗадач(задачи)  Экспорт
    
    текДата = ТекущаяДата();
    Пока истина цикл
        Если  ТекущаяДата() - текдата >= 5 тогда
            Прервать ;
        КонецЕсли;
    КонецЦикла;
    
    Если ТипЗнч(задачи) <> тип("Массив") тогда
        ВызватьИсключение("задачи не является масссивом");
        Возврат;
    КонецЕсли;
    
    Для каждого стр Из задачи Цикл
        
        Если стр.пустая() тогда 
            Продолжить;
        КонецЕсли;
        ЧекЛисты = РегистрыСведений._РаботыЗаДень.СоздатьНаборЗаписей();
        ЧекЛисты.отбор.Задача.Установить(стр);
        ЧекЛисты.Прочитать();
        
        задача = стр.получитьобъект();
        задача.Описание = "";
        
        Для Каждого стрЧЛ из ЧекЛисты цикл
            задача.Описание = задача.Описание + СтрШаблон("[Дата]: %1 (%2 ч.): 
            |[Описание] : %3;
            |
            |" , формат(стрЧЛ.Дата,"ДФ=dd.MM.yy"),Формат(стрЧЛ.Часы, "ЧДЦ=2; ЧН=-; ЧГ=0"),стрЧЛ.Описание);
            
        КонецЦикла;
        Задача.ДополнительныеСвойства.Вставить("ОбновлениеОписания");
        Задача.обменДанными.Загрузка = Истина;
        задача.Записать();
    КонецЦикла;

КонецПроцедуры

Процедура _РассылкаНапоминанийОбОтпусках() Экспорт
    
    мПользователи = Константы._КогоПредупреждатьОбОтпусках.Получить().Получить()  ;
    Если мПользователи = Неопределено тогда
        ВызватьИсключение("НЕТ настройки кому отправлять уведомления об отпусках");
    КонецЕсли;
        
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   РАЗНОСТЬДАТ(&ТекущаяДатаГод, ДОБАВИТЬКДАТЕ(_ГрафикОтпусков.ДатаС, ГОД, ГОД(&ТекущаяДатаГод) - ГОД(_ГрафикОтпусков.ДатаС)), ДЕНЬ) - СУММА(ВЫБОР
    |           КОГДА ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
    |               ТОГДА 0
    |           ИНАЧЕ 1
    |       КОНЕЦ) КАК ОсталосьДней,
    |   1 + РАЗНОСТЬДАТ(_ГрафикОтпусков.ДатаС, _ГрафикОтпусков.ДатаПо, ДЕНЬ) КАК Дней,
    |   _ГрафикОтпусков.Пользователь КАК Пользователь,
    |   _ГрафикОтпусков.ДатаС КАК ДатаС,
    |   _ГрафикОтпусков.ДатаПо КАК ДатаПо
    |ИЗ
    |   РегистрСведений._ГрафикОтпусков КАК _ГрафикОтпусков
    |       ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
    |       ПО (ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &ТекущаяДатаГод И _ГрафикОтпусков.ДатаС)
    |ГДЕ
    |   _ГрафикОтпусков.Пользователь.ПометкаУдаления = ЛОЖЬ
    |   И _ГрафикОтпусков.Пользователь.Служебный = ЛОЖЬ
    |   И _ГрафикОтпусков.Пользователь.Недействителен = ЛОЖЬ
    |
    |СГРУППИРОВАТЬ ПО
    |   РАЗНОСТЬДАТ(&ТекущаяДатаГод, ДОБАВИТЬКДАТЕ(_ГрафикОтпусков.ДатаС, ГОД, ГОД(&ТекущаяДатаГод) - ГОД(_ГрафикОтпусков.ДатаС)), ДЕНЬ),
    |   1 + РАЗНОСТЬДАТ(_ГрафикОтпусков.ДатаС, _ГрафикОтпусков.ДатаПо, ДЕНЬ),
    |   _ГрафикОтпусков.Пользователь,
    |   _ГрафикОтпусков.ДатаС,
    |   _ГрафикОтпусков.ДатаПо
    |
    |ИМЕЮЩИЕ
    |   РАЗНОСТЬДАТ(&ТекущаяДатаГод, ДОБАВИТЬКДАТЕ(_ГрафикОтпусков.ДатаС, ГОД, ГОД(&ТекущаяДатаГод) - ГОД(_ГрафикОтпусков.ДатаС)), ДЕНЬ) - СУММА(ВЫБОР
    |           КОГДА ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
    |               ТОГДА 0
    |           ИНАЧЕ 1
    |       КОНЕЦ) = 4
    |
    |УПОРЯДОЧИТЬ ПО
    |   _ГрафикОтпусков.Пользователь.Наименование";
    
    Запрос.УстановитьПараметр("ТекущаяДатаГод", НачалоДня(ТекущаяДата()));
    
    РезультатЗапроса = Запрос.Выполнить().Выгрузить();
    Если РезультатЗапроса.Количество() тогда
        Текст = "";
        для Каждого стр из РезультатЗапроса цикл
            Текст = ?(Текст = "","",Текст + Символы.ПС) + "*Через 4 рабочих дня отпуск у " + стр.Пользователь + " на " + стр.Дней + " дней *" + "(" + Формат(стр.ДатаС,"ДФ=dd.MM.yy") + " - " + Формат(стр.ДатаПо,"ДФ=dd.MM.yy") + ")"; 
       КонецЦикла;
        
        для Каждого стр из мПользователи цикл
            Если не стр.Пустая() тогда
                _ОбщийМодульСервер.ОтправитьвТелегу(стр,Текст);
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
КонецПроцедуры
