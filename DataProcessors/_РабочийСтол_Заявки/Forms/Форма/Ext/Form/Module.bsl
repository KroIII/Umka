

#Область Оформление

&НаСервере
Процедура ОтборЗаданий()
    
    ТекущаяСтраница = Элементы.СтраницыЗаявкиСотрудников.ТекущаяСтраница;
    СотрудникОтбора = ?(ЗначениеЗаполнено(Сотрудник), Сотрудник, ТекущийПользователь());
    
    Если ТекущаяСтраница = Элементы.Стр_Мне тогда
        
        //отборы списков по текущему сотруднику
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Задания, "Сотрудник", 
        СотрудникОтбора, ВидСравненияКомпоновкиДанных.Равно, , Истина);
        
        //отбор по статусу отменено
        //ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Задания, "Ссылка.Статус", 
        //Перечисления.СтатусыЗаявки.Отменен, ВидСравненияКомпоновкиДанных.НеРавно, , Истина);
        
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Задания, "Ссылка.Статус", 
        СписокСерыхСтатусов, ВидСравненияКомпоновкиДанных.НеВСписке, , не Элементы.ЗаданияМнеОтображатьНеактивные.Пометка);
        
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Задания, "Ссылка.Проверена", 
        Ложь, ВидСравненияКомпоновкиДанных.Равно, , не Элементы.ЗаданияМнеОтображатьНеактивные.Пометка);
        
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Задания, "Статус", 
        Перечисления.СтатусыЧЛ.Отменено, ВидСравненияКомпоновкиДанных.НеРавно, , не Элементы.ЗаданияМнеОтображатьНеактивные.Пометка);
        
    ИначеЕсли  ТекущаяСтраница = Элементы.Стр_ОтМеня тогда 
        
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаданияОтМеня, "Ответственный", 
        СотрудникОтбора, ВидСравненияКомпоновкиДанных.Равно, , Истина);
        
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ВыполненныеМоиЗадания, "Ответственный", 
        СотрудникОтбора, ВидСравненияКомпоновкиДанных.Равно, , Истина);
        
        //видимость элементов только для себя или если сотрудник с полными правами
        Элементы.ПросмотреноВсе.Видимость                = (Сотрудник = ТекущийПользователь() или РольДоступна("ПолныеПрава"));
        Элементы.ВыполненныеМоиЗаданияДействие.Видимость = Элементы.ПросмотреноВсе.Видимость ;
        
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаданияОтМеня, "Ссылка.Статус", 
        СписокСерыхСтатусов, ВидСравненияКомпоновкиДанных.НеВСписке, , не Элементы.ЗаданияМнеОтображатьНеактивные.Пометка);
        
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаданияОтМеня, "Статус", 
        Перечисления.СтатусыЧЛ.Отменено, ВидСравненияКомпоновкиДанных.НеРавно, , не Элементы.ЗаданияМнеОтображатьНеактивные.Пометка);
        
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗаданияОтМеня, "Ссылка.Проверена", 
        Ложь, ВидСравненияКомпоновкиДанных.Равно, , не Элементы.ЗаданияМнеОтображатьНеактивные.Пометка);
    КонецЕсли;
    
    ОформлениеСписков(ТекущаяСтраница);
    
    
    
КонецПроцедуры

&НаСервере
Процедура ОформлениеСписков(ТекущаяСтраница)  
    
    Вид = ВидСравненияКомпоновкиДанных;
    СтОтменено  = Перечисления.СтатусыЧЛ.Отменено;
    
    
    Если ТекущаяСтраница = Элементы.Стр_Мне тогда
        
        Задания.УсловноеОформление.Элементы.Очистить();
        
        //розовый - просроченные
        ОформлениеДинСписка(ЭтаФорма, "Задания",       "ДатаПланОтветственный", Вид.Меньше,      НачалоДня(ТекущаяДата()), WebЦвета.СветлоРозовый );
        
        //светло- розовый - сегодня   и надписи покрасивее
        ОформлениеДинСписка(ЭтаФорма, "Задания",       "ДатаПланОтветственный", Вид.Равно,       КонецДня(ТекущаяДата())+1, "ЗАВТРА",                "Текст","ДатаПланОтветственный" );
        ОформлениеДинСписка(ЭтаФорма, "Задания",       "ДатаПланОтветственный", Вид.Равно,       КонецДня(ТекущаяДата())+1, Новый Шрифт(,,истина),   "Шрифт","ДатаПланОтветственный" );
        
        //важные синим
        ОформлениеДинСписка(ЭтаФорма, "Задания",       "Важная",                Вид.Равно,       Истина,                   новый Цвет(217, 230, 255) );
        //неактивные - серым
        ОформлениеДинСписка(ЭтаФорма, "Задания",       "Ссылка.Статус",         Вид.ВСписке,     СписокСерыхСтатусов,      WebЦвета.Серый,          "ЦветТекста" );
        ОформлениеДинСписка(ЭтаФорма, "Задания",       "Ссылка.Статус",         Вид.ВСписке,     СписокСерыхСтатусов,      WebЦвета.Серебряный );
        
        //неактивные - серым
        ОформлениеДинСписка(ЭтаФорма, "Задания",       "Статус",                Вид.Равно,       СтОтменено,                WebЦвета.Серый,          "ЦветТекста" );
        ОформлениеДинСписка(ЭтаФорма, "Задания",       "Статус",                Вид.Равно,       СтОтменено,                WebЦвета.Серебряный );
        //неактивные - серым
        ОформлениеДинСписка(ЭтаФорма, "Задания",       "Ссылка.Проверена",      Вид.Равно,       Истина,                    WebЦвета.Серый,          "ЦветТекста" );
        ОформлениеДинСписка(ЭтаФорма, "Задания",       "Ссылка.Проверена",      Вид.Равно,       Истина,                    WebЦвета.Серебряный );
        
        //желтый фон серыый цвет если не заполнены часы план 
        ОформлениеДинСписка(ЭтаФорма, "Задания",       "ЧасыПлановые",          Вид.НеЗаполнено, Неопределено,             WebЦвета.Лимонный,       "ЦветФона",              "ЧасыПлановые");
        ОформлениеДинСписка(ЭтаФорма, "Задания",       "ЧасыПлановые",          Вид.НеЗаполнено, Неопределено,             Истина,                  "ОтметкаНезаполненного", "ЧасыПлановые");
        ОформлениеДинСписка(ЭтаФорма, "Задания",       "ЧасыПлановые",          Вид.НеЗаполнено, Неопределено,             "<Не зап-но>",        "Текст",                 "ЧасыПлановые");
        ОформлениеДинСписка(ЭтаФорма, "Задания",       "ЧасыПлановые",          Вид.НеЗаполнено, Неопределено,             WebЦвета.Серый,          "ЦветТекста",            "ЧасыПлановые");
        
    ИначеЕсли ТекущаяСтраница = Элементы.Стр_ОтМеня тогда 
        
        ЗаданияОтМеня.УсловноеОформление.Элементы.Очистить();
        ВыполненныеМоиЗадания.УсловноеОформление.Элементы.Очистить();
        
        //розовый - просроченные
        ОформлениеДинСписка(ЭтаФорма, "ЗаданияОтМеня", "ДатаПланОтветственный", Вид.Меньше,      НачалоДня(ТекущаяДата()), WebЦвета.СветлоРозовый );
        
        //светло- розовый - сегодня   и надписи покрасивее
        ОформлениеДинСписка(ЭтаФорма, "ЗаданияОтМеня", "ДатаПланОтветственный", Вид.Равно,       НачалоДня(ТекущаяДата()), WebЦвета.ТусклоРозовый );
        ОформлениеДинСписка(ЭтаФорма, "ЗаданияОтМеня", "ДатаПланОтветственный", Вид.Равно,       НачалоДня(ТекущаяДата()), "СЕГОДНЯ",               "Текст","ДатаПланОтветственный" );
        ОформлениеДинСписка(ЭтаФорма, "ЗаданияОтМеня", "ДатаПланОтветственный", Вид.Равно,       НачалоДня(ТекущаяДата()), Новый Шрифт(,,истина),   "Шрифт","ДатаПланОтветственный" );
        ОформлениеДинСписка(ЭтаФорма, "ЗаданияОтМеня", "ДатаПланОтветственный", Вид.Равно,       КонецДня(ТекущаяДата())+1, "ЗАВТРА",                "Текст","ДатаПланОтветственный" );
        ОформлениеДинСписка(ЭтаФорма, "ЗаданияОтМеня", "ДатаПланОтветственный", Вид.Равно,       КонецДня(ТекущаяДата())+1, Новый Шрифт(,,истина),   "Шрифт","ДатаПланОтветственный" );
        
        //важные синим
        ОформлениеДинСписка(ЭтаФорма, "ЗаданияОтМеня", "Важная",                Вид.Равно,       Истина,                   новый Цвет(217, 230, 255) );
        
        ОформлениеДинСписка(ЭтаФорма, "ВыполненныеМоиЗадания", "Важная",        Вид.Равно,       Истина,                   новый Цвет(217, 230, 255) );
        
        //неактивные - серым
        ОформлениеДинСписка(ЭтаФорма, "ЗаданияОтМеня", "Ссылка.Статус",         Вид.ВСписке,     СписокСерыхСтатусов,      WebЦвета.Серый,          "ЦветТекста" );
        ОформлениеДинСписка(ЭтаФорма, "ЗаданияОтМеня", "Ссылка.Статус",         Вид.ВСписке,     СписокСерыхСтатусов,      WebЦвета.Серебряный );
        
        
        //неактивные - серым
        ОформлениеДинСписка(ЭтаФорма, "ЗаданияОтМеня",       "Статус",                Вид.Равно,       СтОтменено,                WebЦвета.Серый,          "ЦветТекста" );
        ОформлениеДинСписка(ЭтаФорма, "ЗаданияОтМеня",       "Статус",                Вид.Равно,       СтОтменено,                WebЦвета.Серебряный );
        
        
        //неактивные - серым
        ОформлениеДинСписка(ЭтаФорма, "ЗаданияОтМеня",       "Ссылка.Проверена",      Вид.Равно,       Истина,                    WebЦвета.Серый,          "ЦветТекста" );
        ОформлениеДинСписка(ЭтаФорма, "ЗаданияОтМеня",       "Ссылка.Проверена",      Вид.Равно,       Истина,                    WebЦвета.Серебряный );
        
        //желтый фон серыый цвет если не заполнены часы план 
        ОформлениеДинСписка(ЭтаФорма, "ЗаданияОтМеня", "ЧасыПлановые",          Вид.НеЗаполнено, Неопределено,             WebЦвета.Лимонный,       "ЦветФона",              "ЧасыПлановые");
        ОформлениеДинСписка(ЭтаФорма, "ЗаданияОтМеня", "ЧасыПлановые",          Вид.НеЗаполнено, Неопределено,             Истина,                  "ОтметкаНезаполненного", "ЧасыПлановые");
        ОформлениеДинСписка(ЭтаФорма, "ЗаданияОтМеня", "ЧасыПлановые",          Вид.НеЗаполнено, Неопределено,             "<Не зап-но>",        "Текст",                 "ЧасыПлановые");
        ОформлениеДинСписка(ЭтаФорма, "ЗаданияОтМеня", "ЧасыПлановые",          Вид.НеЗаполнено, Неопределено,             WebЦвета.Серый,          "ЦветТекста",            "ЧасыПлановые");
        
        ОформлениеДинСписка(ЭтаФорма, "ВыполненныеМоиЗадания", "ЧасыПлановые",  Вид.НеЗаполнено, Неопределено,             WebЦвета.Лимонный,       "ЦветФона",              "ЧасыПлановые");
        ОформлениеДинСписка(ЭтаФорма, "ВыполненныеМоиЗадания", "ЧасыПлановые",  Вид.НеЗаполнено, Неопределено,             Истина,                  "ОтметкаНезаполненного", "ЧасыПлановые");
        ОформлениеДинСписка(ЭтаФорма, "ВыполненныеМоиЗадания", "ЧасыПлановые",  Вид.НеЗаполнено, Неопределено,             "<Не зап-но>",        "Текст",                 "ЧасыПлановые");
        ОформлениеДинСписка(ЭтаФорма, "ВыполненныеМоиЗадания", "ЧасыПлановые",  Вид.НеЗаполнено, Неопределено,             WebЦвета.Серый,          "ЦветТекста",            "ЧасыПлановые");
        
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОформлениеЭлементаФормы(Поле, ВидСравнения, значение, ЗначениеОформления, Параметр , ПолеДляОформления)
    
    ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
    ЭлементОформления.Использование = Истина;
    
    ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле); 
    ЭлементОтбора.ВидСравнения = ВидСравнения; 
    ЭлементОтбора.ПравоеЗначение = значение;
    
    ЭлементОформления.Оформление.УстановитьЗначениеПараметра(Параметр, ЗначениеОформления);
    
    ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
    ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ПолеДляОформления);
    
КонецПроцедуры 

&НаСервере
Процедура ОбновитьСписокЗаявокНаСервере()
    
    Если не ЗначениеЗаполнено(Сотрудник) Тогда
        Сотрудник = ТекущийПользователь()
    КонецЕсли;
    
    
    Заявки.УсловноеОформление.Элементы.Очистить();
    
    //серым и жирным заявки где сотрудник = назначена на 
    ОформлениеДинСписка(ЭтаФорма, "Заявки", "НазначенаНа", ВидСравненияКомпоновкиДанных.Равно, Сотрудник, WebЦвета.СеребристоСерый );
    ОформлениеДинСписка(ЭтаФорма, "Заявки", "НазначенаНа", ВидСравненияКомпоновкиДанных.Равно, Сотрудник, новый Шрифт(, 10, Истина), "Шрифт" );
    
    //Область ОкраскавСиний
    ОформлениеДинСписка(ЭтаФорма, "Заявки", "Контрагент.Блокировка", ВидСравненияКомпоновкиДанных.Равно, Истина, WebЦвета.Васильковый );
    
    //отбор по сотруднику
    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Заявки, "Ссылка.Смета.Сотрудник", 
    Сотрудник, ВидСравненияКомпоновкиДанных.Равно, , ИспользоватьОтборПоСотруднику, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
    
    //отбор по контрагенту 
    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Заявки, "Контрагент", 
    Контрагент, ВидСравненияКомпоновкиДанных.Равно, , ИспользоватьОтборПоКонтрагенту, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
    
    
    СписокСтатусов = новый СписокЗначений;
    Если Принято тогда
        ДобавитьСтатус(СписокСтатусов, "Принят");
    КонецЕсли;
    Если НаУточнении тогда
        ДобавитьСтатус(СписокСтатусов, "НаУточнении");
    КонецЕсли;
    Если ПереданоВТестирование тогда
        ДобавитьСтатус(СписокСтатусов, "ПереданоВТестирование");
    КонецЕсли;
    Если Отменено тогда
        ДобавитьСтатус(СписокСтатусов, "Отменен");
    КонецЕсли;
    Если Выполнена тогда
        ДобавитьСтатус(СписокСтатусов, "Выполнена");
    КонецЕсли;
    Если ВРаботе тогда
        ДобавитьСтатус(СписокСтатусов, "ВРаботе");
    КонецЕсли;
    
    //отбор по статусу 
    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Заявки, "Статус", 
    СписокСтатусов, ВидСравненияКомпоновкиДанных.ВСписке, , СписокСтатусов.Количество(), РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
    
КонецПроцедуры // ОбновитьСписокЗаявокНаСервере()

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
Процедура Добавить(Команда)
    
    оп = новый ОписаниеОповещения("ОбработкаВыбора", ЭтаФорма);
    Если Элементы.СтраницыЗаявкиСотрудников.ТекущаяСтраница = Элементы.Стр_ОтМеня или Элементы.СтраницыЗаявкиСотрудников.ТекущаяСтраница = Элементы.Стр_Мне тогда 
        //Если не Элементы.Заявки.ТекущиеДанные = Неопределено тогда
        // стр = новый Структура("ссылка, номерстроки", Элементы.Задания1.ТекущиеДанные.Ссылка, Элементы.Задания1.ТекущиеДанные.Номерстроки)
        //иначе
        стр = новый Структура;
        //КонецЕсли;
        ОткрытьФорму("Обработка.РабочийСтол_Заявки.Форма.СозданиеЗадания", стр, Элементы.ЗаданияМне, , , , оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
    иначе
        ОткрытьФорму("Обработка.РабочийСтол_Заявки.Форма.СозданиеЗадания", 
        новый Структура("ссылка", Элементы.Заявки.ТекущаяСтрока), 
        Элементы.ЗаданияМне, , , , оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПодключения(Команда)
    
    #Если не ВебКлиент Тогда
        Если элементы.СтраницыЗаявкиСотрудников.ТекущаяСтраница = элементы.СтраницаЗаявкиИсполнителя тогда
            Тек = Элементы.Заявки.ТекущиеДанные;
            Если не тек = Неопределено тогда
                Ф = ПолучитьИмяВременногоФайла("txt");
                Текст = Новый ЗаписьТекста;
                Текст.Открыть(Ф, КодировкаТекста.ANSI);
                Текст.ЗаписатьСтроку(Данные(Элементы.Заявки.ТекущиеДанные.Контрагент));
                Текст.Закрыть();   
                ЗапуститьПриложение(Ф);
            КонецЕсли;
        КонецЕсли;
    #иначе
        ПоказатьВводСтроки(новый ОписаниеОповещения("ПараметрыПодключенияЗавершение", ЭтаФорма), Данные(Элементы.Заявки.ТекущиеДанные.Контрагент), "Доп. Инфо клиента", , Истина);
    #КонецЕсли 
    
    
КонецПроцедуры

&НаСервере
Функция  Данные(Контрагент)
       Возврат Контрагент.ДанныеКлиентов
КонецФункции

&НаКлиенте
Процедура СформироватьОтчетЗаДень(Команда)
    
    СформироватьОтчетЗаДеньНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура ТекущийМесяц(Команда)
    
    период.ДатаНачала = НачалоМесяца(ТекущаяДата());
    Период.ДатаОкончания = КонецМесяца(ТекущаяДата());
    
КонецПроцедуры

&НаКлиенте
Процедура ТекущийДень(Команда)
    
    период.ДатаНачала = НачалоДня(ТекущаяДата());
    Период.ДатаОкончания = КонецДня(ТекущаяДата());
    
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
    
    Принято = Ложь;
    НаУточнении = Ложь;
    ПереданоВТестирование = Ложь;
    ВРаботе = Ложь;
    Отменено = Ложь;
    Выполнена = Ложь;
    ОбновитьДанныеЗаявокВФоне();
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыделеннымСтатус(Команда)
    
    сп = новый СписокЗначений;
    сп.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявки.ВРаботе"));
    сп.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявки.Выполнена"));
    сп.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявки.НаУточнении"));
    сп.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявки.Отменен"));
    сп.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявки.ПереданоВТестирование"));
    сп.Добавить(ПредопределенноеЗначение("Перечисление.СтатусыЗаявки.Принят"));
    ПоказатьВыборИзСписка(новый ОписаниеОповещения("УстановитьВыделеннымСтатусЗавершение", ЭтаФорма), сп, Элементы.ЗаявкиУстановитьВыделеннымСтатус);
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаданияНаСегодня(Команда = Неопределено) Экспорт
    
    ЗаданияНаСегодня();
    
КонецПроцедуры

#Область РаботаСЗаданиями

&НаКлиенте
Процедура УдалитьЗадание(Команда)
    ТД =?(ТекущийЭлемент = Элементы.ЗаданияНаСегодня,Элементы.ЗаданияНаСегодня.ТекущиеДанные,?(ТекущийЭлемент = Элементы.ЗаданияОтМеня,Элементы.ЗаданияОтМеня.ТекущиеДанные, Неопределено));
    
    Если ТД = Неопределено Или  ТД.Блокировка тогда
        Возврат;
    КонецЕсли;
    
    ПоказатьВопрос(новый ОписаниеОповещения("УдалитьЗаданиеЗавершение", ЭтаФорма,ТД ), "Отменить задание?", РежимДиалогаВопрос.ДаНет);
    
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаданиеЗавершение(ответ, ТД) Экспорт
    
    Если ответ = КодВозвратаДиалога.Да тогда
        
        
        УдалитьЗаданиеНаСервере(ТД.Ссылка,ТД.Номерстроки);
        ПриИзмененииДанныхЗаданий();
        
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура просмотреноВсе(Команда)
    
    просмотреноВсеНаСервере();
    СотрудникПриИзменении(Неопределено);
    
КонецПроцедуры

&НаКлиенте
Процедура Просмотрено(Команда = Неопределено)
    
    Тс = Элементы.ВыполненныеМоиЗадания.ТекущиеДанные;
    ПросмотреноНаСервере(Тс.ссылка, ТС.НомерСтроки);
    СотрудникПриИзменении(Неопределено);
    
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗадачиПоРГ(Команда)
    
    ПоказатьВводДаты(новый ОписаниеОповещения("СформироватьЗадачиПоРГЗавершение", ЭтаФорма), 0, "Введите дату задачи", ЧастиДаты.Дата);
    
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЧасыПоЗаданию(Команда)
    
    Если ТекущийЭлемент = Элементы.ЗаданияНаСегодня тогда
        ОткрытьЗадание(Истина, Элементы.ЗаданияНаСегодня);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьНеактивные(Команда)
    
    Элементы.ЗаданияМнеОтображатьНеактивные.Пометка = не Элементы.ЗаданияМнеОтображатьНеактивные.Пометка;
    Элементы.ЗаданияМнеОтображатьНеактивные1.Пометка = Элементы.ЗаданияМнеОтображатьНеактивные.Пометка;
    
    ОбновитьДанныеЗадачВФоне();
    
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаЗавтра(Команда)
    Если Элементы.ЗаданияНаСегодня.ТекущиеДанные <> Неопределено и не Элементы.ЗаданияНаСегодня.ТекущиеДанные.Блокировка тогда
        ПеренестиНаЗавтраНаСервере(Элементы.ЗаданияНаСегодня.ТекущиеДанные.Ссылка, Элементы.ЗаданияНаСегодня.ТекущиеДанные.Номерстроки);
        СотрудникПриИзменении(Неопределено);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаСегодня(Команда)
    Если Элементы.ЗаданияМне.ТекущиеДанные <> Неопределено и Элементы.ЗаданияМне.ТекущиеДанные.ДатаПланОтветственный <> НачалоДня(ТекущаяДата())
        и не Элементы.ЗаданияМне.ТекущиеДанные.Блокировка тогда
        ПеренестиНаСегодняНаСервере(Элементы.ЗаданияМне.ТекущиеДанные.Ссылка, Элементы.ЗаданияМне.ТекущиеДанные.Номерстроки);
        СотрудникПриИзменении(Неопределено);
    КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедуры

&НаСервере
Процедура ДобавитьСтатус(Список, статус)
    
    Список.Добавить(Перечисления.СтатусыЗаявки[статус]);
    
КонецПроцедуры // ()

&НаСервере
Функция ТекущийПользователь()
    
    Возврат ПараметрыСеанса.ТекущийПользователь
    
КонецФункции // ТекущийПользователь()()

&НаСервере
Процедура СформироватьОтчетЗаДеньНаСервере()
    
    Отчет.Очистить();
    //Получаем схему из макета
    
    ОтчетСКД = Отчеты.ОтчетЧасы.Создать();
    СхемаКомпоновкиДанных = ОтчетСКД.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"); 
    //Из схемы возьмем настройки по умолчанию
    Настройки = СхемаКомпоновкиДанных.ВариантыНастроек.ОтчетПоДням.Настройки;
    
    //Настроим период
    параметр = Настройки.ПараметрыДанных.Элементы.Найти("Период");
    параметр.Значение = Период;
    
    отбор = Настройки.Отбор.Элементы[0];
    отбор.Использование = истина;
    отбор.ПравоеЗначение = Сотрудник;
    
    //Помещаем в переменную данные о расшифровке данных
    Расшифровка = Новый ДанныеРасшифровкиКомпоновкиДанных; 
    //Формируем макет, с помощью компоновщика макета
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; 
    //Передаем в макет компоновки схему, настройки и данные расшифровки
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, Расшифровка); 
    ВнешниеПараметры = Новый Структура; 
    //Выполним компоновку с помощью процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеПараметры, Расшифровка); 
    //Выводим результат в табличный документ
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(Отчет); 
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
    ДанныеРасшифровки = ПоместитьВоВременноеХранилище(Расшифровка, УникальныйИдентификатор);
    
    Если Период.ДатаНачала <> НачалоДня(Период.ДатаОкончания) тогда
        Отчет.ПоказатьУровеньГруппировокСтрок(3);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
    
    
    СтандартнаяОбработка = Ложь;
    ПоказатьЗначение(, ОтчетОбработкаРасшифровкиС(Расшифровка) );
    
КонецПроцедуры

&НаСервере
Функция ОтчетОбработкаРасшифровкиС(Расшифровка)
    мДанныеРасшифровки = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
    Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") тогда
        ЭлементРасшифровки = мДанныеРасшифровки.Элементы[Расшифровка];
        Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
            Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
                возврат Поле.Значение;
            КонецЦикла;
        КонецЕсли;
    КонецЕсли; 
    
КонецФункции

&НаКлиенте
Процедура ИспользоватьОтборПоКонтрагентуПриИзменении(Элемент)
    
    ОбновитьДанныеЗаявокВФоне();
    
КонецПроцедуры


&НаКлиенте
Процедура ПараметрыПодключенияЗавершение(стр, ДП) Экспорт 
    
    
КонецПроцедуры

&НаСервере
Процедура УстановитьВыделеннымСтатусНаСервере(ответ)
    
    для Каждого стр из Элементы.Заявки.ВыделенныеСтроки Цикл 
        о = стр.ссылка.получитьобъект();
        о.Статус = ответ ;
        о.записать();
    КонецЦикла;
    
    Элементы.Заявки.Обновить();
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыделеннымСтатусЗавершение(ответ, дп) экспорт
    
    Если ответ <> Неопределено Тогда 
        УстановитьВыделеннымСтатусНаСервере(ответ.Значение);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиЗадач() 
    
    ТекущаяСтраница = Элементы.СтраницыЗаявкиСотрудников.ТекущаяСтраница;
    
    Если ТекущаяСтраница = Элементы.Стр_Мне тогда
        Элементы.ЗаданияМне.Обновить();
        ОбновитьОтображениеДанных(Элементы.ЗаданияМне);
    иначе
        Элементы.ЗаданияОтМеня.Обновить();
        ОбновитьОтображениеДанных(Элементы.ЗаданияОтМеня);
        Элементы.ВыполненныеМоиЗадания.Обновить();
        ОбновитьОтображениеДанных(Элементы.ВыполненныеМоиЗадания);
    КонецЕсли;
    
    ЗаполнитьЗаявкиНаСегодня();
    
    Задания1ПриАктивизацииЯчейки(Неопределено);
    
КонецПроцедуры

&НаКлиенте
Процедура Задания1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    
    Если Поле.Имя = "ВыполненныеМоиЗаданияДействие" тогда
        Просмотрено();
    иначе
        ОткрытьЗадание(, Элемент);
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗадание(ТолькоЧасы = Ложь, Элемент)
    
    Если Элемент.ТекущиеДанные = Неопределено тогда
        Возврат;
    КонецЕсли;
    
    оп = новый ОписаниеОповещения("ОбработкаВыбора", ЭтаФорма);
    ОткрытьФорму("Обработка.РабочийСтол_Заявки.Форма.СозданиеЗадания", 
    новый Структура("Ссылка, НомерСтроки, ТолькоЧасы", Элемент.ТекущиеДанные.Ссылка, Элемент.ТекущиеДанные.Номерстроки, ТолькоЧасы), 
    Элементы.ЗаданияМне, , , , оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
    
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДанныхЗаданий(Элемент = Неопределено, ВыбранноеЗначение= Неопределено , СтандартнаяОбработка = Истина)
    
    ОбновитьДанныеЗадачВФоне();
    
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
    
    Элементы.ГруппаЧекЛистов.Видимость = Ложь;

КонецПроцедуры

&НаСервере
Процедура СформироватьЗадачиПоРГНаСервере(Дата)
    
    Для каждого стр Из элементы.Заявки.ВыделенныеСтроки Цикл
        Док = стр.ПолучитьОбъект();
        Если ЗначениеЗаполнено(Сотрудник) и ИспользоватьОтборПоСотруднику тогда
            СоздатьЗадачуПоРГ(Сотрудник, Док, Дата)
        иначе
            Для каждого Сотр Из стр.Смета Цикл
                СоздатьЗадачуПоРГ(сотр.Сотрудник, Док, Дата)
            КонецЦикла;
        КонецЕсли; 
        Док.Записать();
    КонецЦикла;
    
КонецПроцедуры

&НаСервере
Процедура СоздатьЗадачуПоРГ(мСотрудник, Док, Дата)
    
    Если мСотрудник.пустая() тогда 
        возврат 
    КонецЕсли;
    стр = Док.ЧекЛисты.Добавить();
    стр.ДатаПланОтветственный = Дата;
    стр.Задание = Док.Название;
    стр.Сотрудник = мСотрудник;
    стр.ЭтоЗадание = Истина;
    стр.Ответственный = ТекущийПользователь();
    
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗадачиПоРГЗавершение(Ответ, ДП) Экспорт
    
    Если ответ <> Неопределено тогда
        СформироватьЗадачиПоРГНаСервере(Ответ);
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ПросмотреноНаСервере(Заявка, НС)
    
    Док = Заявка.ПолучитьОбъект();
    Док.ЧекЛисты[НС-1].Просмотрено = Истина;
    Док.Записать();
    
КонецПроцедуры

&НаКлиенте
Процедура Задания1ПриАктивизацииЯчейки(Элемент)
    
    Элементы.ЗаданияМне.ВыделенныеСтроки.Очистить();
    Элементы.ЗаданияОтМеня.ВыделенныеСтроки.Очистить();
    Элементы.ПеренестиНаЗавтра.Доступность = Ложь;
    Элементы.ПеренестиНаСегодня.Доступность = ?(Элементы.ЗаданияМне.ТекущиеДанные = Неопределено, Ложь, не Элементы.ЗаданияМне.ТекущиеДанные.Блокировка и Элементы.ЗаданияМне.ТекущиеДанные.ДатаПланОтветственный <> НачалоДня(ТекущаяДата()))
    
КонецПроцедуры

&НаСервере
Процедура просмотреноВсеНаСервере()
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    | ЗаявкаЧекЛисты.Ссылка КАК Ссылка, 
    | ЗаявкаЧекЛисты.НомерСтроки КАК НомерСтроки
    |ИЗ
    | Документ.Заявка.ЧекЛисты КАК ЗаявкаЧекЛисты
    |ГДЕ
    | НЕ ЗаявкаЧекЛисты.Просмотрено
    | И ЗаявкаЧекЛисты.ЭтоЗадание
    | И ЗаявкаЧекЛисты.Часы <> 0
    | И ЗаявкаЧекЛисты.Ответственный = &Ответственный
    |ИТОГИ ПО
    | Ссылка";
    
    Запрос.УстановитьПараметр("Ответственный", Сотрудник);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    
    Пока ВыборкаСсылка.Следующий() Цикл
        Док = ВыборкаСсылка.Ссылка.получитьобъект();
        ВДЗ = ВыборкаСсылка.Выбрать();
        Пока ВДЗ.Следующий() Цикл
            Док.ЧекЛисты[ВДЗ.НомерСтроки - 1].Просмотрено = Истина;  
        КонецЦикла;
        Док.Записать();
    КонецЦикла;
    
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаданиеНаСервере( Ссылка, НомерСтроки)
    
    
    Текст = "*" + ТекущийПользователь() + " Отменил задание*" + 
    Символы.ПС + "*Заявка:* `" + Формат(Число(Ссылка.Номер), "ЧДЦ=0; ЧГ=0") + "`"+
    Символы.ПС + "*Контр-т:* `" + Ссылка.Контрагент + "`"+
    Символы.ПС + "*Отв-ый:* `" + Ссылка.ЧекЛисты[НомерСтроки-1].Ответственный + "`"+ 
    Символы.ПС + "*Сотрудник:* `" + Ссылка.ЧекЛисты[НомерСтроки-1].Сотрудник + "`"+ 
    Символы.ПС + "*На дату:* `" + формат(Ссылка.ЧекЛисты[НомерСтроки-1].ДатаПланОтветственный, "ДФ=dd.MM.yy") + "`"+ 
    Символы.ПС + "*Задание:* `" + Ссылка.ЧекЛисты[НомерСтроки-1].Задание + "`"; 
    
    мСотрудник = новый Массив;
    мСотрудник.Добавить(Ссылка.ЧекЛисты[НомерСтроки-1].Сотрудник);
    мСотрудник.Добавить(Ссылка.ЧекЛисты[НомерСтроки-1].Ответственный);
    
    мПараметры = Новый Массив;
    мПараметры.Добавить(мСотрудник);
    мПараметры.Добавить(Текст);
    мПараметры.Добавить(ТекущийПользователь());
    мПараметры.Добавить(Ссылка);
    
    ФоновыеЗадания.Выполнить("КП_ОбщийМодуль.Рассылка", 
    мПараметры, Новый УникальныйИдентификатор, "Рассылка в телеграмм");  
    
    
    
    
    Док = Ссылка.ПолучитьОбъект();
    Док.ЧекЛисты[НомерСтроки-1].Статус = Перечисления.СтатусыЧЛ.Отменено;
    Док.Записать();
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтборыИОформлениеЗаданий() Экспорт
    
    ОтборЗаданий();
    ОбновитьСпискиЗадач(); 
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаСегодня() Экспорт
    
    ОбновитьСпискиЗадач();
    
КонецПроцедуры

&НаСервере
Процедура ЗаявкиПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;
    
    //	Очищаем все созданные элементы с отборами, через удаление главной группы
    Для Каждого Эл Из Элементы.ЗаявкиКомпоновщикНастроекПользовательскиеНастройки.ПодчиненныеЭлементы Цикл
        Элементы.Удалить(Эл);
    КонецЦикла;
    
    //	Получаем настройки, смотрим количество настроек
    Настройки = Заявки.КомпоновщикНастроек.ПолучитьНастройки();	
    КоличествоОтборов = Настройки.Отбор.Элементы.Количество();
    
    // Создаём главную группу
    ПолеОтборы 		= ЭтаФорма.Элементы.Добавить("ПолеОтборы", Тип("ГруппаФормы"), Элементы.ЗаявкиКомпоновщикНастроекПользовательскиеНастройки);
    ПолеОтборы.Вид 	= ВидГруппыФормы.ОбычнаяГруппа;
    ПолеОтборы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
    ПолеОтборы.ОтображатьЗаголовок = Ложь;
    
    //	Разделяем главную группу на 2 подгруппы, чтобы хватало места всем отборам
    ОтборыКолонка1 		= ЭтаФорма.Элементы.Добавить("ОтборыКолонка1", Тип("ГруппаФормы"), ПолеОтборы);
    ОтборыКолонка1.Вид = ВидГруппыФормы.ОбычнаяГруппа;
    ОтборыКолонка1.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
    ОтборыКолонка1.ОтображатьЗаголовок 	= Ложь;
    ОтборыКолонка1.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
    
    ОтборыКолонка2		= ЭтаФорма.Элементы.Добавить("ОтборыКолонка2", Тип("ГруппаФормы"), ПолеОтборы);
    ОтборыКолонка2.Вид	= ВидГруппыФормы.ОбычнаяГруппа;
    ОтборыКолонка2.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
    ОтборыКолонка2.ОтображатьЗаголовок	= Ложь;
    ОтборыКолонка2.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
    
    //	Разделяем имеющиеся отборы по колонкам, заполнение начнём с первой
    НастроекНаКолонку = Окр(КоличествоОтборов/2, 0, РежимОкругления.Окр15как20);	
    Колонка = ОтборыКолонка1;
    
    //	Начинаем добавлять настройки на форму
    НомерЭлемента = 0;
    Для каждого ЭлОтбора из Настройки.Отбор.Элементы Цикл
        
        Если ЭлОтбора.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный тогда
            Продолжить;
        КонецЕсли;
        
        
        // Проверяем, не пора ли менять колонку
        Если НомерЭлемента = НастроекНаКолонку Тогда
            Колонка = ОтборыКолонка2;	
        КонецЕсли;
        
        //	Создаём группу под каждую настройку
        ПолеГруппыОтбора = ЭтаФорма.Элементы.Добавить("КомпоновщикНастроекПользовательскиеНастройкиЭлемент"+НомерЭлемента, Тип("ГруппаФормы"), Колонка);
        ПолеГруппыОтбора.Вид = ВидГруппыФормы.ОбычнаяГруппа;
        ПолеГруппыОтбора.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
        ПолеГруппыОтбора.ОтображатьЗаголовок = Ложь;
        ПолеГруппыОтбора.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
        
        //	Создаём элементы с привязкой к настройкам компоновщика данных
        ПолеИспользование = ЭтаФорма.Элементы.Добавить("КомпоновщикНастроекПользовательскиеНастройкиЭлемент"+НомерЭлемента+"Использование", Тип("ПолеФормы"), ПолеГруппыОтбора);
        ПолеИспользование.Вид = ВидПоляФормы.ПолеФлажка;
        ПолеИспользование.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
        ПолеИспользование.Заголовок = ЭлОтбора.ЛевоеЗначение;
        ПолеИспользование.ПутьКДанным = "Заявки.КомпоновщикНастроек.ПользовательскиеНастройки[0]["+НомерЭлемента+"].Использование";
        
        ПолеВидСравнения = ЭтаФорма.Элементы.Добавить("КомпоновщикНастроекПользовательскиеНастройкиЭлемент"+НомерЭлемента+"ВидСравненияЭлементаОтбора", Тип("ПолеФормы"), ПолеГруппыОтбора);
        ПолеВидСравнения.Вид = ВидПоляФормы.ПолеВвода;
        ПолеВидСравнения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
        ПолеВидСравнения.РастягиватьПоГоризонтали = Ложь;
        ПолеВидСравнения.ПутьКДанным = "Заявки.КомпоновщикНастроек.ПользовательскиеНастройки[0]["+НомерЭлемента+"].ВидСравнения";
        
        ПолеЗначение = ЭтаФорма.Элементы.Добавить("КомпоновщикНастроекПользовательскиеНастройкиЭлемент"+НомерЭлемента+"Значение", Тип("ПолеФормы"), ПолеГруппыОтбора);
        ПолеЗначение.Вид = ВидПоляФормы.ПолеВвода;
        ПолеЗначение.ВыбиратьТип = Ложь;
        ПолеЗначение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
        ПолеЗначение.ПутьКДанным = "Заявки.КомпоновщикНастроек.ПользовательскиеНастройки[0]["+НомерЭлемента+"].Значение";
        
        НомерЭлемента = НомерЭлемента+1;
    КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаявкиНаСегодня()
    
    
    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Задания, "ДатаПланОтветственный", 
    НачалоДня(ТекущаяДата()), ВидСравненияКомпоновкиДанных.НеРавно, , Ложь);
    
    ТЗ = Получить_ТЗ_Из_ДинамическогоСписка();
    ЗаданияНаСегодня.Загрузить(ТЗ.Скопировать(ТЗ.НайтиСтроки(новый Структура("ДатаПланОтветственный", НачалоДня(ТекущаяДата())))));
    
    Элементы.Декорация5.Заголовок = "Часов: " + ЗаданияНаСегодня.Итог("ЧасыПлановые");
    
    Элементы.Декорация4.Заголовок = "Всего часов: " + ТЗ.Итог("ЧасыПлановые");
    
    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Задания, "ДатаПланОтветственный", 
    НачалоДня(ТекущаяДата()), ВидСравненияКомпоновкиДанных.НеРавно, , Истина);
    
КонецПроцедуры

&НаСервере
Функция Получить_ТЗ_Из_ДинамическогоСписка()
    
    Схема = Элементы.ЗаданияМне.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
    Настройки = Элементы.ЗаданияМне.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
    
    ВыбранноеПоле = Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле.Заголовок  = "Ссылка";
    ВыбранноеПоле.Использование = Истина; 
    ВыбранноеПоле.Поле   = Новый ПолеКомпоновкиДанных("Ссылка"); 
    
    
    ВыбранноеПоле = Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле.Заголовок  = "НомерСтроки";
    ВыбранноеПоле.Использование = Истина; 
    ВыбранноеПоле.Поле   = Новый ПолеКомпоновкиДанных("НомерСтроки"); 
    
    ВыбранноеПоле = Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле.Заголовок  = "Блокировка";
    ВыбранноеПоле.Использование = Истина; 
    ВыбранноеПоле.Поле   = Новый ПолеКомпоновкиДанных("Блокировка"); 
    
    ВыбранноеПоле = Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле.Заголовок  = "Важная";
    ВыбранноеПоле.Использование = Истина; 
    ВыбранноеПоле.Поле   = Новый ПолеКомпоновкиДанных("Важная"); 
    
    ВыбранноеПоле = Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле.Заголовок  = "СсылкаСтатус";
    ВыбранноеПоле.Использование = Истина; 
    ВыбранноеПоле.Поле   = Новый ПолеКомпоновкиДанных("Ссылка.Статус"); 
    
    ВыбранноеПоле = Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле.Заголовок  = "СсылкаПроверена";
    ВыбранноеПоле.Использование = Истина; 
    ВыбранноеПоле.Поле   = Новый ПолеКомпоновкиДанных("Ссылка.Проверена"); 
    
    ВыбранноеПоле = Настройки.Структура[0].Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
    ВыбранноеПоле.Заголовок  = "Статус";
    ВыбранноеПоле.Использование = Истина; 
    ВыбранноеПоле.Поле   = Новый ПолеКомпоновкиДанных("Статус"); 
    
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
    МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
    
    ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
    
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
    
    ТЗ = Новый ТаблицаЗначений;
    ПроцессорВывода.УстановитьОбъект(ТЗ); 
    ПроцессорВывода.Вывести(ПроцессорКомпоновки);
    Возврат ТЗ;
    
КонецФункции

&НаСервере
Процедура ПеренестиНаСегодняНаСервере(Ссылка, НомерСтроки)
    
    Док = Ссылка.ПолучитьОбъект();
    Док.ЧекЛисты[НомерСтроки-1].ДатаПланОтветственный = ТекущаяДата();
    Док.Записать();
    
КонецПроцедуры

&НаСервере
Процедура ПеренестиНаЗавтраНаСервере(Ссылка, НомерСтроки)
    Док = Ссылка.ПолучитьОбъект();
    Док.ЧекЛисты[НомерСтроки-1].ДатаПланОтветственный = ТекущаяДата()+24*60*60;
    Док.Записать();
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаСегодняВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    ОткрытьЗадание(, Элемент);
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаСегодняПриАктивизацииЯчейки(Элемент)
    
    Элементы.ЗаданияНаСегодня.ВыделенныеСтроки.Очистить();
    Элементы.ПеренестиНаСегодня.Доступность = Ложь;
    Элементы.ПеренестиНаЗавтра.Доступность = Истина;
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияМнеПриАктивизацииСтроки(Элемент)
    Задания1ПриАктивизацииЯчейки(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВариантМасштабаПриИзменении(Элемент)
    ЭтаФорма.Масштаб = МасштабФормы;
КонецПроцедуры

&НаКлиенте
Процедура ЗаданияНаСегодняПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
    отказ = Истина;
КонецПроцедуры

#КонецОбласти


#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    Принято                         = Истина;
    НаУточнении                     = Истина;
    ПереданоВТестирование           = Истина;
    ВРаботе                         = Истина;
    МасштабФормы                    = 100;
    Период.ДатаНачала               = НачалоДня(ТекущаяДата());
    Период.ДатаОкончания            = КонецДня(ТекущаяДата()); 
    ИспользоватьОтборПоСотруднику   = Истина;
    Сотрудник                       = ТекущийПользователь();
    Сотрудник                       = Сотрудник;
    
    ОбновитьСписокЗаявокНаСервере();
    
    
    ОформлениеЭлементаФормы("ЗаданияНаСегодня.Важная", ВидСравненияКомпоновкиДанных.Равно, Истина, новый Цвет(217, 230, 255) , "ЦветФона", "ЗаданияНаСегодня");
    
    
    //неактивные задания
    СписокСерыхСтатусов = новый СписокЗначений;
    СписокСерыхСтатусов.Добавить(Перечисления.СтатусыЗаявки.Отменен);
    СписокСерыхСтатусов.Добавить(Перечисления.СтатусыЗаявки.НаУточнении);
    СписокСерыхСтатусов.Добавить(Перечисления.СтатусыЗаявки.ПереданоВТестирование);
    СписокСерыхСтатусов.Добавить(Перечисления.СтатусыЗаявки.Выполнена);
    
    
    ОформлениеЭлементаФормы("ЗаданияНаСегодня.СсылкаСтатус", ВидСравненияКомпоновкиДанных.ВСписке, СписокСерыхСтатусов, WebЦвета.Серый, "ЦветТекста" , "ЗаданияНаСегодня");
    ОформлениеЭлементаФормы("ЗаданияНаСегодня.СсылкаСтатус", ВидСравненияКомпоновкиДанных.ВСписке, СписокСерыхСтатусов, WebЦвета.Серебряный, "ЦветФона", "ЗаданияНаСегодня" );
    
    //неактивные - серым
    ОформлениеЭлементаФормы("ЗаданияНаСегодня.Статус",       ВидСравненияКомпоновкиДанных.Равно,    Перечисления.СтатусыЧЛ.Отменено, WebЦвета.Серый, "ЦветТекста", "ЗаданияНаСегодня" );
    ОформлениеЭлементаФормы("ЗаданияНаСегодня.Статус",       ВидСравненияКомпоновкиДанных.Равно,    Перечисления.СтатусыЧЛ.Отменено, WebЦвета.Серебряный, "ЦветФона", "ЗаданияНаСегодня"  );
    
    ОформлениеЭлементаФормы("ЗаданияНаСегодня.СсылкаПроверена",       ВидСравненияКомпоновкиДанных.Равно,    Истина, WebЦвета.Серый, "ЦветТекста", "ЗаданияНаСегодня" );
    ОформлениеЭлементаФормы("ЗаданияНаСегодня.СсылкаПроверена",       ВидСравненияКомпоновкиДанных.Равно,   Истина, WebЦвета.Серебряный, "ЦветФона", "ЗаданияНаСегодня"  );
    
    
    //оформление в конйце чтобы перекрыть окраску строки
    ОформлениеЭлементаФормы("ЗаданияНаСегодня.ЧасыПлановые", ВидСравненияКомпоновкиДанных.НеЗаполнено, Неопределено , WebЦвета.Лимонный, "ЦветФона", "ЗаданияНаСегодняЧасыПлановые");
    ОформлениеЭлементаФормы("ЗаданияНаСегодня.ЧасыПлановые", ВидСравненияКомпоновкиДанных.НеЗаполнено, Неопределено, Истина, "ОтметкаНезаполненного", "ЗаданияНаСегодняЧасыПлановые");
    ОформлениеЭлементаФормы("ЗаданияНаСегодня.ЧасыПлановые", ВидСравненияКомпоновкиДанных.НеЗаполнено, Неопределено, "<Не зап-но>" , "Текст", "ЗаданияНаСегодняЧасыПлановые");
    ОформлениеЭлементаФормы("ЗаданияНаСегодня.ЧасыПлановые", ВидСравненияКомпоновкиДанных.НеЗаполнено, Неопределено, WebЦвета.Серый , "ЦветТекста", "ЗаданияНаСегодняЧасыПлановые");
 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    ПриОткрытииНаСервере();
    //каждый час достаточно для перехода через сутки
    ПодключитьОбработчикОжидания("ОбновитьОтборыИОформлениеЗаданий", 60*60, Ложь);
    //каждую минуту
    ПодключитьОбработчикОжидания("ЗаданияНаСегодня", 60, Ложь);
    ОбновитьОтборыИОформлениеЗаданий();
    
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора) экспорт
    
    ОбновитьСпискиЗадач();
    
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент = Неопределено)
    
    Отчет = новый ТабличныйДокумент;
    
    ИспользоватьОтборПоСотруднику = ЗначениеЗаполнено(Сотрудник);
    
    ОбновитьДанныеЗадачВФоне();
    
    ОбновитьДанныеЗаявокВФоне();

КонецПроцедуры

&НаКлиенте
Процедура  ОбновитьДанныеЗадачВФоне()
    
    ПодключитьОбработчикОжидания("ОбновитьОтборыИОформлениеЗаданий", 0.2, Истина);
    
КонецПроцедуры

&НаКлиенте
Процедура  ОбновитьДанныеЗаявокВФоне()
    
    ПодключитьОбработчикОжидания("ОбновитьЗаявки", 0.2, Истина);
    
КонецПроцедуры


&НаКлиенте
Процедура ОбновитьЗаявки()
    
    ОбновитьСписокЗаявокНаСервере();
    
КонецПроцедуры


&НаКлиенте
Процедура СтраницыЗаявкиСотрудникрвПриСменеСтраницы(Элемент, ТекущаяСтраница)
    
    Элементы.ГруппаЧекЛистов.Видимость =  ТекущаяСтраница = Элементы.СтраницаЗаявкиИсполнителя ;
    Если ТекущаяСтраница = Элементы.СтраницаЗаявкиИсполнителя тогда
        //Элементы.Заявки.Обновить();
        //ОбновитьОтображениеДанных(Элементы.Заявки);
    ИначеЕсли ТекущаяСтраница = Элементы.ОтчетПоВыполненнымРаботам тогда
       //ничего не делать 
    иначе
        ПриИзмененииДанныхЗаданий();
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииОтбораСтатуса(Элемент)
    
    ОбновитьДанныеЗаявокВФоне();
    
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
    
    ИспользоватьОтборПоКонтрагенту = ЗначениеЗаполнено(Контрагент);
    ОбновитьДанныеЗаявокВФоне();
    
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоСотрудникуПриИзменении(Элемент)
    ОбновитьДанныеЗаявокВФоне();
КонецПроцедуры


#КонецОбласти





