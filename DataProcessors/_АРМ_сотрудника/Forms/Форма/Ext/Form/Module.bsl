
#Область Отчет

&НаКлиенте
Процедура СформироватьОтчетЗаДень(Команда)
    
    СформироватьОтчетЗаДеньНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура ТекущийМесяц(Команда)
    
    Отчет_Период.ДатаНачала     = НачалоМесяца(ТекущаяДата());
    Отчет_Период.ДатаОкончания  = КонецМесяца(ТекущаяДата());
    
КонецПроцедуры

&НаКлиенте
Процедура ТекущийДень(Команда)
    
    Отчет_Период.ДатаНачала     = НачалоДня(ТекущаяДата());
    Отчет_Период.ДатаОкончания  = КонецДня(ТекущаяДата());
    
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетЗаДеньНаСервере()
    
    Отчет_Отчет.Очистить();
    //Получаем Схему из макета
    
    ОтчетСКД = Отчеты._ОтчетЧасы.Создать();
    СхемаКомпоновкиДанных = ОтчетСКД.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"); 
    //Из Схемы возьмем настройки по умолчанию
    Настройки = СхемаКомпоновкиДанных.ВариантыНастроек.ОтчетПоДням.Настройки;
    
    //Настроим Отчет_Период
    параметр = Настройки.ПараметрыДанных.Элементы.Найти("Период");
    параметр.Значение = Отчет_Период;
    
    Отбор = Настройки.Отбор.Элементы[0];
    Отбор.Использование = истина;
    Отбор.ПравоеЗначение = Объект.Сотрудник;
    
    //Помещаем в переменную данные О расшифровке данных
    Расшифровка = Новый ДанныеРасшифровкиКомпоновкиДанных; 
    //Формируем макет, С помощью компоновщика макета
    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных; 
    //Передаем в макет компоновки Схему, настройки и данные расшифровки
    МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, Расшифровка); 
    ВнешниеПараметры = Новый Структура; 
    //Выполним компоновку С помощью процессора компоновки
    ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеПараметры, Расшифровка); 
    //Выводим результат в табличный документ
    ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
    ПроцессорВывода.УстановитьДокумент(Отчет_Отчет); 
    ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
    ДанныеРасшифровки = ПоместитьВоВременноеХранилище(Расшифровка, УникальныйИдентификатор);
    
    Если Отчет_Период.ДатаНачала <> НачалоДня(Отчет_Период.ДатаОкончания) тогда
        Отчет_Отчет.ПоказатьУровеньГруппировокСтрок(3);
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти


#Область ОбновлениеДанных

&НаСервере
Процедура УстановитьОтборыСписков()
    
    Элементы.ТекущаяДата.Заголовок = "Обновлено " + Символы.ПС + ТекущаяДата();
    Элементы.РаботыЗаДеньДата.Видимость = не ВключитьОтборПоДате;
    ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
    Элементы.ГруппаКомандЗадачи.Видимость = ТекущаяСтраница = Элементы.ГруппаЗадачиМне или ТекущаяСтраница = Элементы.ГруппаЗадачиОтМеня или ТекущаяСтраница = Элементы.ГруппаТехподдержка;
    
    Если ТекущаяСтраница = Элементы.ГруппаЗадачиМне тогда
        
        ЗадачиМнеВсе.Отбор.Элементы.Очистить();
        ЗадачиМнеНаСегодня.Отбор.Элементы.Очистить();
 
        ///////////////////////////// ЗадачиМнеВсе ////////////////////////////////////////////
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗадачиМнеВсе,           "Исполнитель",  Объект.Сотрудник,ВидСравненияКомпоновкиДанных.Равно,,Истина);
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗадачиМнеВсе,           "ДатаПлановая",  НачалоДня(ТекущаяДата()), ВидСравненияКомпоновкиДанных.НеРавно, , Истина);
        УстановитьОтборОтображениеАктивных(ЗадачиМнеВсе);
        
        
        ///////////////////////////// ЗадачиМнеНаСегодня ///////////////////////////////////////////
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗадачиМнеНаСегодня,     "Исполнитель",   Объект.Сотрудник,ВидСравненияКомпоновкиДанных.Равно,,Истина);
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗадачиМнеНаСегодня,     "ТочкаМаршрута", БизнесПроцессы._ЗадачиПоЗаявкам.ТочкиМаршрута.ПроверкаВыполнения,ВидСравненияКомпоновкиДанных.НеРавно,, не Элементы.ЗадачиМнеНаСегодняЗадания_ОтображатьЗаданияНаПроверку.Пометка);
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗадачиМнеНаСегодня,     "ДатаПлановая",  НачалоДня(ТекущаяДата()), ВидСравненияКомпоновкиДанных.Равно, , Истина);
        УстановитьОтборОтображениеАктивных(ЗадачиМнеНаСегодня);
        
    ИначеЕсли ТекущаяСтраница = Элементы.ГруппаЗадачиОтМеня тогда
        
        ЗадачиОтМеня.Отбор.Элементы.Очистить();
        ЗадачиОтМеняВыполненные.Отбор.Элементы.Очистить();
        
        ///////////////////////////// ЗадачиОтМеня ////////////////////////////////////////////
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗадачиОтМеня,           "Автор",         Объект.Сотрудник,ВидСравненияКомпоновкиДанных.Равно,,Истина);
        //ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗадачиОтМеня,           "Завершен",      Ложь,ВидСравненияКомпоновкиДанных.Равно,,Элементы.ФормаЗадания_ОтображатьВыполненные.Пометка);
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗадачиОтМеня,           "ТочкаМаршрутаПоследнейЗадачи", БизнесПроцессы._ЗадачиПоЗаявкам.ТочкиМаршрута.Выполнение,ВидСравненияКомпоновкиДанных.Равно,,не Элементы.ФормаЗадания_ОтображатьВыполненные.Пометка);
        
        УстановитьОтборОтображениеАктивных(ЗадачиОтМеня);
        
        ///////////////////////////// ЗадачиОтМеняВыполненные ////////////////////////////////////////////
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗадачиОтМеняВыполненные, "Исполнитель",   Объект.Сотрудник,ВидСравненияКомпоновкиДанных.Равно,,Истина);
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗадачиОтМеняВыполненные, "Выполнена",     Ложь,ВидСравненияКомпоновкиДанных.Равно,,Истина);
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗадачиОтМеняВыполненные, "ТочкаМаршрута", БизнесПроцессы._ЗадачиПоЗаявкам.ТочкиМаршрута.ПроверкаВыполнения,ВидСравненияКомпоновкиДанных.Равно,,Истина);
        
        УстановитьОтборОтображениеАктивных(ЗадачиОтМеняВыполненные);
        
    ИначеЕсли  ТекущаяСтраница = Элементы.ГруппаТехподдержка тогда
        
        ЗадачиОтМеня.Отбор.Элементы.Очистить();
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗадачиОтМеня, "БизнесПроцесс.Заявка.Контрагент",   Контрагент,  ВидСравненияКомпоновкиДанных.Равно,,ЗначениеЗаполнено(Контрагент));
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЗадачиОтМеня, "БизнесПроцесс.Заявка.Техподдержка",  Истина,     ВидСравненияКомпоновкиДанных.Равно,,Истина);
        УстановитьОтборОтображениеАктивных(ЗадачиОтМеня);
         
        //заполнение таблицы
        ЗаполнитьотчетыТехпод();
        
    ИначеЕсли  ТекущаяСтраница = Элементы.ГруппаВнесениеРабот тогда
        
        ЗадачиОтМеня.Отбор.Элементы.Очистить();
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(РаботыЗаДень, "Сотрудник",   Объект.Сотрудник,  ВидСравненияКомпоновкиДанных.Равно,,Истина);
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(РаботыЗаДень, "Дата",        ДатаРабот,  ВидСравненияКомпоновкиДанных.Равно,,ВключитьОтборПоДате);
        
    Иначе 
        ОбновитьСписокЗаявокНаСервере();
    КонецЕсли;
    
    ОформлениеСписков();
    ОбновитьДанныеЧасов();
     
КонецПроцедуры

Процедура ЗаполнитьотчетыТехпод()
    
    ТехподОтчет.Очистить();
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   КОЛИЧЕСТВО(РАЗЛИЧНЫЕ _ЗадачиПоЗаявкам.Ссылка) КАК КОЛИЧЕСТВО,
    |   _ЗадачиПоЗаявкам.ВидОбращения КАК ВидОбращения
    |ИЗ
    |   БизнесПроцесс._ЗадачиПоЗаявкам КАК _ЗадачиПоЗаявкам
    |ГДЕ
    |   _ЗадачиПоЗаявкам.Стартован
    |   И _ЗадачиПоЗаявкам.Отменена = ЛОЖЬ
    |   И _ЗадачиПоЗаявкам.Завершен = ЛОЖЬ
    |   И _ЗадачиПоЗаявкам.ПометкаУдаления = ЛОЖЬ
    |   И _ЗадачиПоЗаявкам.Заявка.Техподдержка
    |   И НЕ _ЗадачиПоЗаявкам.Заявка.Статус В (&Статус)
    |   И _ЗадачиПоЗаявкам.Заявка.Контрагент.Блокировка = ЛОЖЬ
    |
    |СГРУППИРОВАТЬ ПО
    |   _ЗадачиПоЗаявкам.ВидОбращения";
  
    Запрос.УстановитьПараметр("Статус",м_СписокСерыхСтатусов);
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        стр = ТехподОтчет.Добавить();
        стр.ВидОбращения = ВыборкаДетальныеЗаписи.ВидОбращения;
        стр.ВидОбращенияПредставление = ?( стр.ВидОбращения.пустая(), "<Без вида>", "" + стр.ВидОбращения) + ":  " + ВыборкаДетальныеЗаписи.КОЛИЧЕСТВО;
    КонецЦикла;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   СУММА(ВЫБОР
    |           КОГДА _ЗадачиПоЗаявкам.ДатаПлановая < &ТекущаяДата
    |               ТОГДА 1
    |           ИНАЧЕ 0
    |       КОНЕЦ) КАК Просроченные,
    |   СУММА(ВЫБОР
    |           КОГДА _ЗадачиПоЗаявкам.ДатаПлановая = &ТекущаяДата
    |               ТОГДА 1
    |           ИНАЧЕ 0
    |       КОНЕЦ) КАК Сегодня,
    |   СУММА(ВЫБОР
    |           КОГДА ДОБАВИТЬКДАТЕ(_ЗадачиПоЗаявкам.ДатаПлановая, ДЕНЬ, -1) = &ТекущаяДата
    |               ТОГДА 1
    |           ИНАЧЕ 0
    |       КОНЕЦ) КАК Завтра,
    |   СУММА(1) КАК Всего
    |ИЗ
    |   БизнесПроцесс._ЗадачиПоЗаявкам КАК _ЗадачиПоЗаявкам
    |ГДЕ
    |   _ЗадачиПоЗаявкам.Стартован
    |   И _ЗадачиПоЗаявкам.Отменена = ЛОЖЬ
    |   И _ЗадачиПоЗаявкам.Завершен = ЛОЖЬ
    |   И _ЗадачиПоЗаявкам.ПометкаУдаления = ЛОЖЬ
    |   И НЕ _ЗадачиПоЗаявкам.Заявка.Статус В (&Статус)
    |   И _ЗадачиПоЗаявкам.Заявка.Контрагент.Блокировка = ЛОЖЬ
    |   И _ЗадачиПоЗаявкам.Заявка.Техподдержка";
    Запрос.УстановитьПараметр("ТекущаяДата",НачалоДня(ТекущаяДата()));
    Запрос.УстановитьПараметр("Статус",м_СписокСерыхСтатусов);
    РезультатЗапроса = Запрос.Выполнить();
    ВДЗ = РезультатЗапроса.Выбрать();
    Если  ВДЗ.Следующий() тогда
        Элементы.ТехподОтчет1.Заголовок  = "Просроченные: " + ВДЗ.Просроченные + Символы.ПС
        + "Сегодня: " + ВДЗ.Сегодня + Символы.ПС
        + "Завтра: " + ВДЗ.Завтра + Символы.ПС
        + "Всего: " + ВДЗ.Всего;
    иначе 
         Элементы.ТехподОтчет1.Заголовок  = "<Нет задач>";
    КонецЕсли;

    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   СУММА(1) КАК Всего
    |ИЗ
    |   БизнесПроцесс._ЗадачиПоЗаявкам КАК _ЗадачиПоЗаявкам
    |ГДЕ
    |   _ЗадачиПоЗаявкам.Стартован = ЛОЖЬ
    |   И _ЗадачиПоЗаявкам.Отменена = ЛОЖЬ
    |   И _ЗадачиПоЗаявкам.Завершен = ЛОЖЬ
    |   И _ЗадачиПоЗаявкам.ПометкаУдаления = ЛОЖЬ
    |   И НЕ _ЗадачиПоЗаявкам.Заявка.Статус В (&Статус)
    |   И _ЗадачиПоЗаявкам.Заявка.Контрагент.Блокировка = ЛОЖЬ
    |   И _ЗадачиПоЗаявкам.Заявка.Техподдержка";
    Запрос.УстановитьПараметр("Статус",м_СписокСерыхСтатусов);
    РезультатЗапроса = Запрос.Выполнить();
    ВДЗ = РезультатЗапроса.Выбрать();
    Если  ВДЗ.Следующий() тогда
        Элементы.ТехподОтчет2.Заголовок  = "Есть задачи, не отправленные в работу - " + ВДЗ.Всего;
    иначе 
        Элементы.ТехподОтчет2.Заголовок  = "<Нет не запущенных задач>";
    КонецЕсли;
    
    
КонецПроцедуры


&НаСервере
Процедура УстановитьОтборОтображениеАктивных(Список)
    
    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,     "БизнесПроцесс.Заявка.Статус",      м_СписокСерыхСтатусов, ВидСравненияКомпоновкиДанных.НеВСписке, , не Элементы.ФормаЗадания_ОтображатьНеактивные.Пометка);
    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,     "БизнесПроцесс.Заявка.Проверена",   Ложь, ВидСравненияКомпоновкиДанных.Равно, , не Элементы.ФормаЗадания_ОтображатьНеактивные.Пометка);
    Если Список <> ЗадачиОтМеняВыполненные  Тогда 
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "БизнесПроцесс.Отменена",           Ложь, ВидСравненияКомпоновкиДанных.Равно, , не Элементы.ФормаЗадания_ОтображатьНеактивные.Пометка);
        //ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "БизнесПроцесс.Исполнитель",        новый ПолеКомпоновкиДанных("Исполнитель"), ВидСравненияКомпоновкиДанных.Равно, , не Элементы.ФормаЗадания_ОтображатьНеактивные.Пометка);
    КонецЕсли;
    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,     "БизнесПроцесс.Завершен",           Ложь, ВидСравненияКомпоновкиДанных.Равно, , не Элементы.ФормаЗадания_ОтображатьВыполненные.Пометка);
    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,     "Выполнена",                        Ложь, ВидСравненияКомпоновкиДанных.Равно, , не Элементы.ФормаЗадания_ОтображатьВыполненные.Пометка);
    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список,     "ПометкаУдаления",                  Ложь, ВидСравненияКомпоновкиДанных.Равно, , не Элементы.ФормаЗадания_ОтображатьНеактивные.Пометка);

    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСпискиЗадач()  Экспорт
    
    ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
    ОформлениеСписков(); 
    
    Если ТекущаяСтраница = Элементы.ГруппаЗадачиМне тогда
        Элементы.ЗадачиМнеВсе.Обновить();
        ОбновитьОтображениеДанных(Элементы.ЗадачиМнеВсе);
        Элементы.ЗадачиМнеНаСегодня.Обновить();
        ОбновитьОтображениеДанных(Элементы.ЗадачиМнеНаСегодня);
    ИначеЕсли  ТекущаяСтраница = Элементы.ГруппаЗадачиОтМеня тогда
        Элементы.ЗадачиОтМеня.Обновить();
        ОбновитьОтображениеДанных(Элементы.ЗадачиОтМеня);
        Элементы.ЗадачиОтМеняВыполненные.Обновить();
        ОбновитьОтображениеДанных(Элементы.ЗадачиОтМеняВыполненные);
    иначе
        Элементы.РаботыЗаДень.Обновить();
        ОбновитьОтображениеДанных(Элементы.РаботыЗаДень);
    КонецЕсли;
   ОбновитьДанныеЧасов();
 
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЗаявокНаСервере()
    
    Если не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
        Объект.Сотрудник = ТекущийПользователь()
    КонецЕсли;
    
    
    Заявки.УсловноеОформление.Элементы.Очистить();
    
    //серым и жирным заявки где Сотрудник = назначена на 
    ОформлениеДинСписка(ЭтаФорма, "Заявки", "НазначенаНа", ВидСравненияКомпоновкиДанных.Равно, Объект.Сотрудник, WebЦвета.СеребристоСерый );
    ОформлениеДинСписка(ЭтаФорма, "Заявки", "НазначенаНа", ВидСравненияКомпоновкиДанных.Равно, Объект.Сотрудник, новый Шрифт(, 10, Истина), "Шрифт" );
    
    //Область ОкраскавСиний
    ОформлениеДинСписка(ЭтаФорма, "Заявки", "Контрагент.Блокировка", ВидСравненияКомпоновкиДанных.Равно, Истина, WebЦвета.Васильковый );
    
    //отбор по Сотруднику
    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Заявки, "Ссылка.Смета.Сотрудник", 
    Объект.Сотрудник, ВидСравненияКомпоновкиДанных.Равно, , ИспользоватьОтборПоСотруднику, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
    
    
КонецПроцедуры // ОбновитьСписокЗаявокНаСервере()

&НаСервере
Процедура НастроитьВидимостьФормы()
    
    Элементы.ВсеЗадания.Видимость              = ПараметрыСеанса.ТекущийПользователь.ПоказыватьВсеЗакладкиРабочегоСтола;
    Элементы.ГруппаТехподдержка.Видимость   = РольДоступна("ПолныеПрава") или РольДоступна("_СервисИнженер")   или  ПараметрыСеанса.ТекущийПользователь.ПоказыватьВсеЗакладкиРабочегоСтола;
    Элементы.ГруппаВнесениеРабот.Видимость  = ПараметрыСеанса.ТекущийПользователь.ВнешнийПользователь    или ПараметрыСеанса.ТекущийПользователь.ПоказыватьВсеЗакладкиРабочегоСтола 
    или ПараметрыСеанса.ТекущийПользователь.РазрешитьБыстроеВнесениеЧЛ ;
    Элементы.ГруппаЗаявки.Видимость         = не ПараметрыСеанса.ТекущийПользователь.ВнешнийПользователь или ПараметрыСеанса.ТекущийПользователь.ПоказыватьВсеЗакладкиРабочегоСтола;
    Элементы.ГруппаЗадачиОтМеня.Видимость   = не ПараметрыСеанса.ТекущийПользователь.ВнешнийПользователь или ПараметрыСеанса.ТекущийПользователь.ПоказыватьВсеЗакладкиРабочегоСтола;
    Элементы.ГруппаЗадачиМне.Видимость      = не ПараметрыСеанса.ТекущийПользователь.ВнешнийПользователь или ПараметрыСеанса.ТекущийПользователь.ПоказыватьВсеЗакладкиРабочегоСтола;
    Элементы.Шапка.Видимость                = не ПараметрыСеанса.ТекущийПользователь.ВнешнийПользователь или ПараметрыСеанса.ТекущийПользователь.ПоказыватьВсеЗакладкиРабочегоСтола;

КонецПроцедуры

#КонецОбласти

#Область ФоновоеОбновление

&НаКлиенте
Процедура  ОбновитьДанныеЗадачВФоне()
    
    ПодключитьОбработчикОжидания("ОбновитьОтборыИОформлениеЗаданий", 0.2, Истина);
    
КонецПроцедуры

&НаКлиенте
Процедура  ОбновитьДанныеЗаявокВФоне()
    
    ПодключитьОбработчикОжидания("ОбновитьЗаявки", 0.2, Истина);
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаявки()
    
    ОбновитьСписокЗаявокНаСервере();
    
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтборыИОформлениеЗаданий() Экспорт
    
    УстановитьОтборыСписков();
    ОбновитьСпискиЗадач(); 
    
КонецПроцедуры

#КонецОбласти  

#Область ДействияФормы

&НаКлиенте
Процедура ОтчетОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
    
    
    СтандартнаяОбработка = Ложь;
    ПоказатьЗначение(, ОтчетОбработкаРасшифровкиС(Расшифровка) );
    
КонецПроцедуры

&НаСервере
Функция ОтчетОбработкаРасшифровкиС(Расшифровка)
    мДанныеРасшифровки = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
    Если ТипЗнч(Расшифровка) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") тогда
        ЭлементРасшифровки = мДанныеРасшифровки.Элементы[Расшифровка];
        Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
            Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
                возврат Поле.Значение;
            КонецЦикла;
        КонецЕсли;
    КонецЕсли; 
    
КонецФункции

&НаСервере
Функция ТекущийПользователь()
    
    Возврат ПараметрыСеанса.ТекущийПользователь
    
КонецФункции // ТекущийПользователь()()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    НастроитьВидимостьФормы();
    
    Отбор = Неопределено;
    для Каждого элемент из Заявки.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл 
        Если ТипЗнч( элемент)= тип("ОтборКомпоновкиДанных")  тогда
            Отбор = элемент;
            Прервать;
        КонецЕсли;
    КонецЦикла;
    
    
    ДобавитьСтатус(м_СписокСерыхСтатусов,"Отменен");
    ДобавитьСтатус(м_СписокСерыхСтатусов,"Выполнена");
    ДобавитьСтатус(м_СписокСерыхСтатусов,"НаУточнении");

    
    Если элемент <> Неопределено тогда 
        
        ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(отбор, "Контрагент", 
        Справочники._Контрагенты.ПустаяСсылка(),ВидСравненияКомпоновкиДанных.Равно,,Ложь,РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ,новый УникальныйИдентификатор);        
        Статусы = новый СписокЗначений();
        
        ДобавитьСтатус(Статусы,"Принят");
        ДобавитьСтатус(Статусы,"ВРаботе");
        ДобавитьСтатус(Статусы,"НаУточнении");
        ДобавитьСтатус(Статусы,"ПереданоВТестирование");
        
        Группа = отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
        Группа.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
        Группа.ИдентификаторПользовательскойНастройки  =новый УникальныйИдентификатор;
        Группа.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
        Группа.Представление = "Только активные и незабл." ;
        
        ЭлементОтбора = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
        ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус"); 
        ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
        ЭлементОтбора.ПравоеЗначение = Статусы; 
        
        ЭлементОтбора = Группа.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
        ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Контрагент.Блокировка"); 
        ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
        ЭлементОтбора.ПравоеЗначение = Ложь;        
        
        
         
    КонецЕсли;
    
    Объект.Сотрудник = ТекущийПользователь();
    
    ИспользоватьОтборПоСотруднику = Истина;
    Отчет_Период.ДатаНачала     = НачалоДня(ТекущаяДата());
    Отчет_Период.ДатаОкончания  = КонецДня(ТекущаяДата());
    ДатаРабот = ТекущаяДата();
    ВключитьОтборПоДате = Истина;
    
    

КонецПроцедуры

&НаСервере
Процедура ДобавитьСтатус(Список, Статус)
    
    Список.Добавить(Перечисления._СтатусыЗаявки[статус]);
    
КонецПроцедуры // ()

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
    
    ИспользоватьОтборПоСотруднику = ЗначениеЗаполнено(Объект.Сотрудник);
    
    УстановитьНастройкиОтчета();
    Объект.Сотрудник = ?(ЗначениеЗаполнено(Объект.Сотрудник),  Объект.Сотрудник, ТекущийПользователь());
    УстановитьОтборыСписков();
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкиОтчета()
    
    Отчет_Отчет = новый ТабличныйДокумент;
    
КонецПроцедуры

&НаКлиенте
Процедура Задания_ОтображатьВыполненные(Команда)
    
    Элементы.ФормаЗадания_ОтображатьВыполненные.Пометка = не Элементы.ФормаЗадания_ОтображатьВыполненные.Пометка;
    Элементы.ФормаЗадания_ОтображатьВыполненные.Отображение = ?(Элементы.ФормаЗадания_ОтображатьВыполненные.Пометка,ОтображениеКнопки.КартинкаИТекст,ОтображениеКнопки.Текст);
    
    ОбновитьДанныеЗадачВФоне();
    
КонецПроцедуры

&НаСервере
Процедура ЗаявкиПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
    //СтандартнаяОбработка = Ложь;
    //
    ////	Очищаем все Созданные элементы С Отборами, через удаление главной группы
    //Для Каждого Эл Из Элементы.ЗаявкиКомпоновщикНастроекПользовательскиеНастройки.ПодчиненныеЭлементы Цикл
    //    Элементы.Удалить(Эл);
    //КонецЦикла;
    //
    ////	Получаем настройки, Смотрим количество настроек
    //Настройки = Заявки.КомпоновщикНастроек.ПолучитьНастройки();	
    //КоличествоОтборов = Настройки.Отбор.Элементы.Количество();
    //
    //// Создаём главную группу
    //ПолеОтборы 		= ЭтаФорма.Элементы.Добавить("ПолеОтборы", Тип("ГруппаФормы"), Элементы.ЗаявкиКомпоновщикНастроекПользовательскиеНастройки);
    //ПолеОтборы.Вид 	= ВидГруппыФормы.ОбычнаяГруппа;
    //ПолеОтборы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
    //ПолеОтборы.ОтображатьЗаголовок = Ложь;
    //
    ////	Разделяем главную группу на 2 подгруппы, чтобы хватало места всем Отборам
    //ОтборыКолонка1 		= ЭтаФорма.Элементы.Добавить("ОтборыКолонка1", Тип("ГруппаФормы"), ПолеОтборы);
    //ОтборыКолонка1.Вид = ВидГруппыФормы.ОбычнаяГруппа;
    //ОтборыКолонка1.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
    //ОтборыКолонка1.ОтображатьЗаголовок 	= Ложь;
    //ОтборыКолонка1.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
    //
    //ОтборыКолонка2		= ЭтаФорма.Элементы.Добавить("ОтборыКолонка2", Тип("ГруппаФормы"), ПолеОтборы);
    //ОтборыКолонка2.Вид	= ВидГруппыФормы.ОбычнаяГруппа;
    //ОтборыКолонка2.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
    //ОтборыКолонка2.ОтображатьЗаголовок	= Ложь;
    //ОтборыКолонка2.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
    //
    ////	Разделяем имеющиеся Отборы по колонкам, заполнение начнём С первой
    //НастроекНаКолонку = Окр(КоличествоОтборов/2, 0, РежимОкругления.Окр15как20);	
    //Колонка = ОтборыКолонка1;
    //
    ////	Начинаем добавлять настройки на форму
    //НомерЭлемента = -1;
    //Для каждого ЭлОтбора из Настройки.Отбор.Элементы Цикл
    //    НомерЭлемента = НомерЭлемента+1;
    //    Если ЭлОтбора.РежимОтображения=РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный тогда
    //        Продолжить;
    //    КонецЕсли;
    //    
    //    
    //    // Проверяем, не пора ли менять колонку
    //    Если НомерЭлемента = НастроекНаКолонку Тогда
    //        Колонка = ОтборыКолонка2;	
    //    КонецЕсли;
    //    
    //    //	Создаём группу под каждую настройку
    //    ПолеГруппыОтбора = ЭтаФорма.Элементы.Добавить("КомпоновщикНастроекПользовательскиеНастройкиЭлемент"+НомерЭлемента, Тип("ГруппаФормы"), Колонка);
    //    ПолеГруппыОтбора.Вид = ВидГруппыФормы.ОбычнаяГруппа;
    //    ПолеГруппыОтбора.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
    //    ПолеГруппыОтбора.ОтображатьЗаголовок = Ложь;
    //    ПолеГруппыОтбора.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
    //    ПолеГруппыОтбора.ЦветФона = WebЦвета.Льняной;
    //    
    //    //	Создаём элементы С привязкой к настройкам компоновщика данных
    //    ПолеИспользование = ЭтаФорма.Элементы.Добавить("КомпоновщикНастроекПользовательскиеНастройкиЭлемент"+НомерЭлемента+"Использование", Тип("ПолеФормы"), ПолеГруппыОтбора);
    //    ПолеИспользование.Вид = ВидПоляФормы.ПолеФлажка;
    //    ПолеИспользование.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
    //    ПолеИспользование.Заголовок = ?(ТипЗнч(ЭлОтбора) = тип("ГруппаЭлементовОтбораКомпоновкиДанных"), ЭлОтбора.Представление,ЭлОтбора.ЛевоеЗначение);
    //    ПолеИспользование.ПутьКДанным = "Заявки.КомпоновщикНастроек.ПользовательскиеНастройки[0]["+НомерЭлемента+"].Использование";
    //    
    //    Если не ЗначениеЗаполнено( ЭлОтбора.Представление ) тогда
    //        Если ЭлОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно и  ЭлОтбора.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВСписке  тогда
    //            ПолеВидСравнения = ЭтаФорма.Элементы.Добавить("КомпоновщикНастроекПользовательскиеНастройкиЭлемент"+НомерЭлемента+"ВидСравненияЭлементаОтбора", Тип("ПолеФормы"), ПолеГруппыОтбора);
    //            ПолеВидСравнения.Вид = ВидПоляФормы.ПолеВвода;
    //            ПолеВидСравнения.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    //            ПолеВидСравнения.РастягиватьПоГоризонтали = Ложь;
    //            ПолеВидСравнения.ПутьКДанным = "Заявки.КомпоновщикНастроек.ПользовательскиеНастройки[0]["+НомерЭлемента+"].ВидСравнения";
    //        КонецЕсли;
    //        
    //        ПолеЗначение = ЭтаФорма.Элементы.Добавить("КомпоновщикНастроекПользовательскиеНастройкиЭлемент"+НомерЭлемента+"Значение", Тип("ПолеФормы"), ПолеГруппыОтбора);
    //        ПолеЗначение.Вид = ВидПоляФормы.ПолеВвода;
    //        ПолеЗначение.ВыбиратьТип = Ложь;
    //        ПолеЗначение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
    //        ПолеЗначение.ПутьКДанным = "Заявки.КомпоновщикНастроек.ПользовательскиеНастройки[0]["+НомерЭлемента+"].Значение";
    //    иначе
    //        
    //        ПолеИспользование.Заголовок = ЭлОтбора.Представление;
    //        
    //    КонецЕсли;
    //    
    //КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоСотрудникуПриИзменении(Элемент)
    
    ОбновитьДанныеЗаявокВФоне();
    
КонецПроцедуры

&НаКлиенте
Процедура Заявки_УстановитьВыделеннымСтатус(Команда)
    
    ПоказатьВводЗначения(новый ОписаниеОповещения("УстановитьВыделеннымСтатусЗавершение", ЭтаФорма),ПредопределенноеЗначение("Перечисление._СтатусыЗаявки.ВРаботе"), Элементы.ЗаявкиУстановитьВыделеннымСтатус,тип("ПеречислениеСписок._СтатусыЗаявки"));
    
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВыделеннымСтатусЗавершение(Ответ, дп) экспорт
    
    Если Ответ <> Неопределено Тогда 
        УстановитьВыделеннымСтатусНаСервере(Ответ.Значение);
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура УстановитьВыделеннымСтатусНаСервере(Ответ)
    
    для Каждого Стр из Элементы.Заявки.ВыделенныеСтроки Цикл 
        О           = Стр.Ссылка.получитьобъект();
        О.Статус    = Ответ ;
        О.записать();
    КонецЦикла;
    
    Элементы.Заявки.Обновить();
    
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
    
    УстановитьОтборыСписков();
    
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиОтМеняВыполненныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
    Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ОформлениеСписков()  
    
    ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
    Вид = ВидСравненияКомпоновкиДанных;
    
    
    Если ТекущаяСтраница = Элементы.ГруппаЗадачиМне тогда
        
        ЗадачиМнеВсе.УсловноеОформление.Элементы.Очистить();
        ЗадачиМнеНаСегодня.УсловноеОформление.Элементы.Очистить();
        
        //розовый - просроченные
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеВсе",       "ДатаПлановая",                     Вид.Меньше,      НачалоДня(ТекущаяДата()), WebЦвета.ГолубойСКраснымОттенком );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеНаСегодня", "ДатаПлановая",                     Вид.Меньше,      НачалоДня(ТекущаяДата()), WebЦвета.ГолубойСКраснымОттенком );
        
        //светло- розовый - сегодня   и надписи покрасивее
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеВсе",       "ДатаПлановая",                     Вид.Равно,       КонецДня(ТекущаяДата())+1, "ЗАВТРА",                 "Текст","ДатаПлановая" );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеВсе",       "ДатаПлановая",                     Вид.Равно,       КонецДня(ТекущаяДата())+1, Новый Шрифт(,,истина),    "Шрифт","ДатаПлановая" );
        
        //важные синим
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеВсе",       "БизнесПроцесс.Срочная",            Вид.Равно,       Истина,                    новый Цвет(217, 230, 255) );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеНаСегодня", "БизнесПроцесс.Срочная",            Вид.Равно,       Истина,                    новый Цвет(217, 230, 255) );
        
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеВсе",       "БизнесПроцесс.Срочная",            Вид.Равно,      Истина, Новый Шрифт(,,истина),   "Шрифт" );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеНаСегодня", "БизнесПроцесс.Срочная",            Вид.Равно,      Истина, Новый Шрифт(,,истина),   "Шрифт" );
        
        
        //неактивные - серым
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеВсе",       "БизнесПроцесс.Заявка.Статус",      Вид.ВСписке,     м_СписокСерыхСтатусов,     WebЦвета.Серый,             "ЦветТекста" );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеВсе",       "БизнесПроцесс.Заявка.Статус",      Вид.ВСписке,     м_СписокСерыхСтатусов,     WebЦвета.Серебряный );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеНаСегодня", "БизнесПроцесс.Заявка.Статус",      Вид.ВСписке,     м_СписокСерыхСтатусов,     WebЦвета.Серый,             "ЦветТекста" );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеНаСегодня", "БизнесПроцесс.Заявка.Статус",      Вид.ВСписке,     м_СписокСерыхСтатусов,     WebЦвета.Серебряный );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеВсе",       "Пометкаудаления",                  Вид.Равно,       Истина,                    WebЦвета.Серебряный );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеНаСегодня", "Пометкаудаления",                  Вид.Равно,       Истина,                    WebЦвета.Серебряный );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеВсе",       "Пометкаудаления",                  Вид.Равно,       Истина,                    WebЦвета.Серый,             "ЦветТекста" );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеНаСегодня", "Пометкаудаления",                  Вид.Равно,       Истина,                    WebЦвета.Серый,             "ЦветТекста" );
        //ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеВсе",       "БизнесПроцесс.Исполнитель",        Вид.НеРавно,     новый ПолеКомпоновкиДанных("Исполнитель"),  WebЦвета.Серебряный  );
        //ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеНаСегодня", "БизнесПроцесс.Исполнитель",        Вид.НеРавно,     новый ПолеКомпоновкиДанных("Исполнитель"),  WebЦвета.Серебряный  );
        //ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеВсе",       "БизнесПроцесс.Исполнитель",        Вид.НеРавно,     новый ПолеКомпоновкиДанных("Исполнитель"),  WebЦвета.Серый,             "ЦветТекста" );
        //ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеНаСегодня", "БизнесПроцесс.Исполнитель",        Вид.НеРавно,     новый ПолеКомпоновкиДанных("Исполнитель"),  WebЦвета.Серый,             "ЦветТекста" );

        
        //неактивные - серым
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеВсе",       "БизнесПроцесс.Отменена",           Вид.Равно,       Истина,                    WebЦвета.Серый,             "ЦветТекста" );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеВсе",       "БизнесПроцесс.Отменена",           Вид.Равно,       Истина,                    WebЦвета.Серебряный );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеНаСегодня", "БизнесПроцесс.Отменена",           Вид.Равно,       Истина,                    WebЦвета.Серый,             "ЦветТекста" );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеНаСегодня", "БизнесПроцесс.Отменена",           Вид.Равно,       Истина,                    WebЦвета.Серебряный );
        //неактивные - серым 
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеВсе",       "БизнесПроцесс.Заявка.Проверена",   Вид.Равно,       Истина,                    WebЦвета.Серый,             "ЦветТекста" );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеВсе",       "БизнесПроцесс.Заявка.Проверена",   Вид.Равно,       Истина,                    WebЦвета.Серебряный );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеНаСегодня", "БизнесПроцесс.Заявка.Проверена",   Вид.Равно,       Истина,                    WebЦвета.Серый,             "ЦветТекста" );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеНаСегодня", "БизнесПроцесс.Заявка.Проверена",   Вид.Равно,       Истина,                    WebЦвета.Серебряный );
        
        //желтый фон серыый цвет если не заполнены часы план 
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеВсе",       "ЧасыПлановые",                     Вид.НеЗаполнено, Неопределено,               WebЦвета.Лимонный,         "ЦветФона",              "ЧасыПлановые");
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеВсе",       "ЧасыПлановые",                     Вид.НеЗаполнено, Неопределено,              "<Не зап-но>",              "Текст",                 "ЧасыПлановые");
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеВсе",       "ЧасыПлановые",                     Вид.НеЗаполнено, Неопределено,              WebЦвета.Серый,             "ЦветТекста",            "ЧасыПлановые");
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеНаСегодня", "ЧасыПлановые",                     Вид.НеЗаполнено, Неопределено,               WebЦвета.Лимонный,         "ЦветФона",              "ЧасыПлановые");
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеНаСегодня", "ЧасыПлановые",                     Вид.НеЗаполнено, Неопределено,              "<Не зап-но>",              "Текст",                 "ЧасыПлановые");
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеНаСегодня", "ЧасыПлановые",                     Вид.НеЗаполнено, Неопределено,              WebЦвета.Серый,             "ЦветТекста",            "ЧасыПлановые");
        
        //выполненные - зеленым
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеВсе",       "Выполнена",                        Вид.Равно,    Истина,                    новый Цвет(235, 255, 237), "ЦветФона");
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиМнеНаСегодня", "Выполнена",                        Вид.Равно,    Истина,                    новый Цвет(235, 255, 237), "ЦветФона");
        
    ИначеЕсли ТекущаяСтраница = Элементы.ГруппаЗадачиОтМеня или  ТекущаяСтраница = Элементы.ГруппаТехподдержка тогда 
        
        ЗадачиОтМеня.УсловноеОформление.Элементы.Очистить();
        ЗадачиОтМеняВыполненные.УсловноеОформление.Элементы.Очистить();
        
        //розовый - просроченные
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня", "ДатаПлановая", Вид.Меньше,      НачалоДня(ТекущаяДата()), WebЦвета.ГолубойСКраснымОттенком );
        
        //светло- розовый - сегодня   и надписи покрасивее
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня", "ДатаПлановая", Вид.Равно,       НачалоДня(ТекущаяДата()), WebЦвета.ТусклоРозовый );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня", "ДатаПлановая", Вид.Равно,       НачалоДня(ТекущаяДата()), "СЕГОДНЯ",               "Текст","ДатаПлановая" );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня", "ДатаПлановая", Вид.Равно,       НачалоДня(ТекущаяДата()), Новый Шрифт(,,истина),   "Шрифт","ДатаПлановая" );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня", "ДатаПлановая", Вид.Равно,       КонецДня(ТекущаяДата())+1, "ЗАВТРА",                "Текст","ДатаПлановая" );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня", "ДатаПлановая", Вид.Равно,       КонецДня(ТекущаяДата())+1, Новый Шрифт(,,истина),   "Шрифт","ДатаПлановая" );
        
        //важные синим
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня", "БизнесПроцесс.Срочная",              Вид.Равно,      Истина,                   новый Цвет(217, 230, 255) );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня", "БизнесПроцесс.Срочная",              Вид.Равно,      Истина, Новый Шрифт(,,истина),   "Шрифт" );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеняВыполненные", "БизнесПроцесс.Срочная",   Вид.Равно,      Истина,                   новый Цвет(217, 230, 255) );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеняВыполненные", "БизнесПроцесс.Срочная",   Вид.Равно,      Истина, Новый Шрифт(,,истина),   "Шрифт" );
        //неактивные - серым
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня", "БизнесПроцесс.Заявка.Статус",         Вид.ВСписке,     м_СписокСерыхСтатусов,      WebЦвета.Серый,          "ЦветТекста" );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня", "БизнесПроцесс.Заявка.Статус",         Вид.ВСписке,     м_СписокСерыхСтатусов,      WebЦвета.Серебряный );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня", "Пометкаудаления",                     Вид.Равно,     Истина,      WebЦвета.Серый,          "ЦветТекста" );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня", "Пометкаудаления",                     Вид.Равно,     Истина,      WebЦвета.Серебряный );
        
        
        //неактивные - серым
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня",       "БизнесПроцесс.отменена",                Вид.Равно,       Истина,                WebЦвета.Серый,          "ЦветТекста" );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня",       "БизнесПроцесс.отменена",                Вид.Равно,       Истина,                WebЦвета.Серебряный );
        
        
        //неактивные - серым
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня",       "БизнесПроцесс.Заявка.Проверена",      Вид.Равно,       Истина,                    WebЦвета.Серый,          "ЦветТекста" );
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня",       "БизнесПроцесс.Заявка.Проверена",      Вид.Равно,       Истина,                    WebЦвета.Серебряный );
        
        //желтый фон серыый цвет если не заполнены часы план 
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня", "ЧасыПлановые",          Вид.НеЗаполнено, Неопределено,             WebЦвета.Лимонный,       "ЦветФона",              "ЧасыПлановые");
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня", "ЧасыПлановые",          Вид.НеЗаполнено, Неопределено,             Истина,                  "ОтметкаНезаполненного", "ЧасыПлановые");
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня", "ЧасыПлановые",          Вид.НеЗаполнено, Неопределено,             "<Не зап-но>",        "Текст",                 "ЧасыПлановые");
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня", "ЧасыПлановые",          Вид.НеЗаполнено, Неопределено,             WebЦвета.Серый,          "ЦветТекста",            "ЧасыПлановые");
        
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеняВыполненные", "ЧасыПлановые",  Вид.НеЗаполнено, Неопределено,             WebЦвета.Лимонный,       "ЦветФона",              "ЧасыПлановые");
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеняВыполненные", "ЧасыПлановые",  Вид.НеЗаполнено, Неопределено,             Истина,                  "ОтметкаНезаполненного", "ЧасыПлановые");
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеняВыполненные", "ЧасыПлановые",  Вид.НеЗаполнено, Неопределено,             "<Не зап-но>",        "Текст",                 "ЧасыПлановые");
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеняВыполненные", "ЧасыПлановые",  Вид.НеЗаполнено, Неопределено,             WebЦвета.Серый,          "ЦветТекста",            "ЧасыПлановые");
        
        //выполненные - зеленым
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня",                       "Выполнена", Вид.Равно,    Истина,                    новый Цвет(235, 255, 237), "ЦветФона");
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеняВыполненные",            "Выполнена", Вид.Равно,    Истина,                    новый Цвет(235, 255, 237), "ЦветФона");
        ОформлениеДинСписка(ЭтаФорма, "ЗадачиОтМеня", "ТочкаМаршрутаПоследнейЗадачи", Вид.Равно, БизнесПроцессы._ЗадачиПоЗаявкам.ТочкиМаршрута.ПроверкаВыполнения,                    новый Цвет(235, 255, 237), "ЦветФона");
    КонецЕсли; 
    
КонецПроцедуры

&НаСервере
Процедура ОформлениеЭлементаФормы(Поле, ВидСравнения, значение, ЗначениеОформления, Параметр , ПолеДляОформления)
    
    ЭлементОформления = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
    ЭлементОформления.Использование = Истина;
    
    ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле); 
    ЭлементОтбора.ВидСравнения = ВидСравнения; 
    ЭлементОтбора.ПравоеЗначение = значение;
    
    ЭлементОформления.Оформление.УстановитьЗначениеПараметра(Параметр, ЗначениеОформления);
    
    ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
    ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ПолеДляОформления);
    
КонецПроцедуры 

&НаКлиенте
Процедура Задания_ОтображатьНеактивные(Команда)
    
    
    Элементы.ФормаЗадания_ОтображатьНеактивные.Пометка = не Элементы.ФормаЗадания_ОтображатьНеактивные.Пометка;
    Элементы.ФормаЗадания_ОтображатьНеактивные.Отображение = ?(Элементы.ФормаЗадания_ОтображатьНеактивные.Пометка,ОтображениеКнопки.КартинкаИТекст,ОтображениеКнопки.Текст);
    ОбновитьДанныеЗадачВФоне();
    
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеВсеПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
    
    Задачи_ПеренестиНаДату(ПараметрыПеретаскивания.Значение, ТекущаяДата() + 24*60*60 );
    ОбновитьСпискиЗадач();
    
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеНаСегодняПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
    
    Задачи_ПеренестиНаДату(ПараметрыПеретаскивания.Значение, ТекущаяДата() );
    ОбновитьСпискиЗадач();
    
КонецПроцедуры

&НаСервере
Процедура Задачи_ПеренестиНаДату(Задачи, Дата)

    Для Каждого  стр из Задачи Цикл 
        
        НачатьТранзакцию();
        
        //блокировка 
        Попытка
            //Блокировка = Новый БлокировкаДанных;
            //ЭлементБлокировки = Блокировка.Добавить("Задача._ИсполнениеЗадач");
            //ЭлементБлокировки.УстановитьЗначение("Ссылка", стр);
            //ЭлементБлокировки.Режим=РежимБлокировкиДанных.Разделяемый
            //Блокировка.Заблокировать();
            
            ЗаблокироватьДанныеДляРедактирования(стр);
            Об = стр.ПолучитьОбъект();
            Об.ДатаПлановая = Дата;
            Об.Записать();
            РазблокироватьДанныеДляРедактирования(стр);
            
            ЗафиксироватьТранзакцию();
            
        Исключение
            Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
            ОтменитьТранзакцию();
        КонецПопытки;
    КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
    УстановитьОтборыСписков();
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеНаСегодняПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
    Отказ = Истина
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеВсеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
    Отказ = Истина
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеЧасов()
    
    Дата = НачалоДня(ТекущаяДата());
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |   СУММА(_ИсполнениеЗадач.БизнесПроцесс.ЧасыПлановые) КАК ЧасыПлановые
    |ИЗ
    |   Задача._ИсполнениеЗадач КАК _ИсполнениеЗадач
    |ГДЕ
    |   _ИсполнениеЗадач.БизнесПроцесс.Стартован
    |   И _ИсполнениеЗадач.БизнесПроцесс.Завершен = ЛОЖЬ
    |   И _ИсполнениеЗадач.Выполнена = ЛОЖЬ
    |   И _ИсполнениеЗадач.ПометкаУдаления = ЛОЖЬ
    |   И _ИсполнениеЗадач.БизнесПроцесс.Отменена = ЛОЖЬ
    |   И _ИсполнениеЗадач.Исполнитель = &Сотрудник
    |   И _ИсполнениеЗадач.ДатаПлановая = &Дата";
    
    Запрос.УстановитьПараметр("Дата", Дата);
    Запрос.УстановитьПараметр("Сотрудник", объект.Сотрудник);
    
    РезультатЗапроса = Запрос.Выполнить().Выгрузить();
    Запрос.Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |   СУММА(_РаботыЗаДень.Часы) КАК Часы
    |ИЗ
    |   РегистрСведений._РаботыЗаДень КАК _РаботыЗаДень
    |ГДЕ
    |   _РаботыЗаДень.Дата = &Дата
    |   И _РаботыЗаДень.Сотрудник = &Сотрудник";
     
    Запрос.УстановитьПараметр("Дата", Дата);
    Запрос.УстановитьПараметр("Сотрудник", объект.Сотрудник);
    РезультатЗапроса2 = Запрос.Выполнить().Выгрузить();

    Элементы.Декорация5.Заголовок = "Часов сегодня:         План: " + Формат(РезультатЗапроса.Итог("ЧасыПлановые"),"ЧДЦ=2; ЧН=Отсутствует") + " / Факт: " + Формат(РезультатЗапроса2.Итог("Часы"),"ЧДЦ=2; ЧН=Отсутствует");
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеНаСегодняПриИзменении(Элемент)
    ОбновитьСпискиЗадач();
    ОбновитьДанныеЧасов();
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиОтМеняПриИзменении(Элемент)
    ОбновитьСпискиЗадач();
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиОтМеняПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
    // Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
    
    УстановитьОтборыСписков();

КонецПроцедуры

&НаКлиенте
Процедура РаботыЗаДеньПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
    
    Отказ = Истина;
    ОткрытьФорму("РегистрСведений._РаботыЗаДень.Форма.ФормаЗаписи",новый Структура("ЗначенияЗаполнения,ДобавлениеСАРМ", новый Структура("Дата,Сотрудник",ДатаРабот,Объект.Сотрудник)),Элемент);
    
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    //одно в другом
    ПодключитьОбработчикОжидания("ОбновитьОтборыИОформлениеЗаданий", 60*60, Ложь);
    //ПодключитьОбработчикОжидания("ОбновитьЗаявки", 60*60, Ложь);
    УстановитьОтборыСписков();
    ОбновитьСпискиЗадач(); 
    
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеНаСегодняОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    ОбновитьСпискиЗадач() ;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиМнеВсеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    ОбновитьСпискиЗадач() ;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиОтМеняОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    ОбновитьСпискиЗадач() ;
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиОтМеняВыполненныеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
    ОбновитьСпискиЗадач() ;
КонецПроцедуры

&НаКлиенте
Процедура Задания_ОтображатьЗаданияНаПроверку(Команда)
    Элементы.ЗадачиМнеНаСегодняЗадания_ОтображатьЗаданияНаПроверку.Пометка = не Элементы.ЗадачиМнеНаСегодняЗадания_ОтображатьЗаданияНаПроверку.Пометка;
    ОбновитьОтборыИОформлениеЗаданий();
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
    УстановитьОтборыСписков();
    ОбновитьСпискиЗадач(); 
КонецПроцедуры

&НаКлиенте
Процедура РаботыЗаДеньВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    СтандартнаяОбработка = Ложь;
    ОткрытьФорму("РегистрСведений._РаботыЗаДень.Форма.ФормаЗаписи",новый Структура("Ключ,ДобавлениеСАРМ", ВыбраннаяСтрока),Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиОтМеня1ПриИзменении(Элемент)
    ЗаполнитьотчетыТехпод();
КонецПроцедуры

&НаСервере
Процедура ЗадачиМнеВсеПриОбновленииСоставаПользовательскихНастроекНаСервере(СтандартнаяОбработка)
    // Вставить содержимое обработчика.
КонецПроцедуры

#КонецОбласти

