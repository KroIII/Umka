&Насервере
Перем соответствие_статусов;


#область ДействияКомандыФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    
    УстановитьПривилегированныйРежим(Истина);
    мНастройки = ХранилищеОбщихНастроек.Загрузить("_ЧтениеТрудозатратИзRM",,,"_ЧтениеТрудозатратИзRM");	
    Если мНастройки <> Неопределено тогда
        Попытка
            Настройки.Загрузить(мНастройки.Настройки);
        Исключение
        КонецПопытки;
        Попытка
            мСотрудники.Загрузить(мНастройки.Сотрудники);
        Исключение
        КонецПопытки;
    КонецЕсли;
    УстановитьПривилегированныйРежим(Ложь);
    
    Даты = ДатыЗапретаИзмененияСлужебный.РассчитанныеДатыЗапретаИзменения();
    Если даты.найти(ПараметрыСеанса.ТекущийПользователь)= Неопределено тогда
        ДатаЗапрета = даты.найти(Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей).ДатаЗапрета;
    иначе
        Попытка
            ДатаЗапрета = даты.найти(ПараметрыСеанса.ТекущийПользователь).ДатаЗапрета;
        Исключение
            ДатаЗапрета = Дата(1,1,1);
        КонецПопытки;
        
    КонецЕсли;
    
    
    Объект.Сервер          = "rm.pik.ru";
    Объект.Таймаут         = 3;
    //Объект.КлючПриложения  = "19f60b437b00998e4bb230dc244935aea97a3f2a";
    //Объект.КодПользователя = "2329";
    Объект.Период.ДатаНачала      = НачалоМесяца(ТекущаяДатаСеанса()) ;
    Объект.Период.ДатаОкончания   = КонецМесяца(Объект.Период.ДатаНачала);
    
    
    КолонкаДата  = 1;
    КолонкаЗаявка   = 3;
    КолонкаОписаниеРабот = 4;
    КолонкаЧасы = 5 ;
    ПерваяСтрока = 2;
    ПоследняяСтрока = 9999;
    РежимДаты = "Дата полностью (dd.mm.yyyy)";
    месяц = Месяц(ТекущаяДата());
    
    для стр = 1 по 12  цикл
        Элементы.Месяц.СписокВыбора.Добавить(стр,Формат(Дата(2000+стр,стр,стр),"ДФ=MMMM"));
    КонецЦикла;
    
    
    Образец.Вывести(РеквизитФормыВЗначение("Объект").ПолучитьТД());
    Сотрудник = ПараметрыСеанса.ТекущийПользователь;
    СотрудникПриИзмененииНаСервере(); 
    
    
    Элементы.RMСтатус.СписокВыбора.Очистить();
    Элементы.RMСтатус.СписокВыбора.Добавить(1,   "Новая");
    Элементы.RMСтатус.СписокВыбора.Добавить(2,   "В работе");
    Элементы.RMСтатус.СписокВыбора.Добавить(3,   "Решена");
    Элементы.RMСтатус.СписокВыбора.Добавить(7,   "Может тестироваться");
    Элементы.RMСтатус.СписокВыбора.Добавить(8,   "Тестируется");
    Элементы.RMСтатус.СписокВыбора.Добавить(10,  "Переоткрыта");
    Элементы.RMСтатус.СписокВыбора.Добавить(11,  "Обсуждается");
    Элементы.RMСтатус.СписокВыбора.Добавить(12,  "Может мержиться");
    Элементы.RMСтатус.СписокВыбора.Добавить(13,  "Смержена");
    Элементы.RMСтатус.СписокВыбора.Добавить(14,  "Выложена на тест");
    Элементы.RMСтатус.СписокВыбора.Добавить(15,  "Выложена на прод");
    Элементы.RMСтатус.СписокВыбора.Добавить(16,  "На ревью");
    Элементы.RMСтатус.СписокВыбора.Добавить(17,  "Протестирована");
    
    
    
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
Процедура ЗагрузитьИзRM(Команда)
    
    ОчиститьСообщения();
    
    Отказ = Ложь;
    ПроверитьРеквизит("Сервер"         , Отказ);
    ПроверитьРеквизит("КлючПриложения" , Отказ);
    Если ЗначениеЗаполнено(Сотрудник) тогда
        ПроверитьРеквизит("КодПользователя", Отказ);
    КонецЕсли;
    ПроверитьРеквизит("Период"  , Отказ);
    
    Если Не Отказ Тогда
        ЗагрузитьИзRMНаСервере();
    КонецЕсли;
    
КонецПроцедуры // ЗагрузитьИзRM()

&НаКлиенте
Процедура ЗаписатьЛисты(Команда)
    
    //Если Элементы.Страницы.ТекущаяСтраница = Элементы.УниверсальнаяЗагрузкаСЭксель тогда 
    //    Если не ЗначениеЗаполнено(Сотрудник)    тогда
    //        ПоказатьПредупреждение(,"Не заполнен сотрудник");
    //        Возврат;
    //    КонецЕсли;
    //    
    //    ЗагрузитьЛистыНаСервере();
    //иначе
    ОчиститьСообщения();
    ЗаписатьЛистыНаСервере();
    // КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
    СотрудникПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура СотрудникПриИзмененииНаСервере()
    
    Элементы.КодПользователя.Видимость = Сотрудник.Пустая() = Ложь;
    
    Рс = РегистрыСведений._КлючиРедмайн.СоздатьМенеджерЗаписи();
    рс.пользователь=(Сотрудник);
    рс.Прочитать();
    объект.КлючПриложения = рс.КлючПриложения;
    объект.КодПользователя = рс.КодПользователя;
    объект.Трудозатраты.Очистить();
    объект.Задачи.Очистить();
    
    Попытка
        Элементы.Проект.списокВыбора.Очистить();
        
        HTTPS      = Новый ЗащищенноеСоединениеOpenSSL;
        Соединение = Новый HTTPСоединение(Объект.Сервер,,,,, Объект.Таймаут, HTTPS);
        
        Запрос = Новый HTTPЗапрос("projects.json" );
        
        Заголовки = Новый Соответствие;
        Заголовки.Вставить("X-Redmine-API-Key", Объект.КлючПриложения);
        Запрос.Заголовки = Заголовки;
        
        Ответ = Соединение.Получить(Запрос);
        
        Если Ответ.КодСостояния = 200 Тогда 
            СтрокаJSON = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
            
            ЧтениеJSON = Новый ЧтениеJSON;
            ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
            ДанныеJSON = ПрочитатьJSON(ЧтениеJSON,, "spent_on");
            ЧтениеJSON.Закрыть();
            
            ДанныеJSON =  ДанныеJSON.projects;
            
        Иначе
            ВызватьИсключение "Не удалось загрузить список проектов HTTP status code: " + Ответ.КодСостояния;
        КонецЕсли;
        
        
        Для Каждого Запись Из ДанныеJSON Цикл
            Элементы.Проект.списокВыбора.Добавить(Запись.id,Запись.name );        
        КонецЦикла;
    Исключение
        // Сообщить(ОписаниеОшибки());
    КонецПопытки;
    
КонецПроцедуры       


&НаКлиенте
Процедура ЗагрузитьЗадачи(Команда)
    ОчиститьСообщения();
    
    Отказ = Ложь;
    ПроверитьРеквизит("Сервер"         , Отказ);
    ПроверитьРеквизит("КлючПриложения" , Отказ);
    Если ЗначениеЗаполнено(Сотрудник) тогда
        ПроверитьРеквизит("КодПользователя", Отказ);
    КонецЕсли;
    //ПроверитьРеквизит("ДатаНачала"     , Отказ);
    //ПроверитьРеквизит("ДатаОкончания"  , Отказ);
    ПроверитьРеквизит("Период"  , Отказ);
    
    Если Не Отказ Тогда
        ЗагрузитьЗадачиНаСервере();
    КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура КлючПриложенияПриИзменении(Элемент)
    КлючПриложенияПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура КлючПриложенияПриИзмененииСервер()
    
    Рс = РегистрыСведений._КлючиРедмайн.СоздатьМенеджерЗаписи();
    рс.пользователь=(Сотрудник);
    рс.Прочитать();
    рс.пользователь=(Сотрудник);
    рс.КлючПриложения = объект.КлючПриложения;
    рс.КодПользователя = объект.КодПользователя;
    объект.Трудозатраты.Очистить();
    рс.Записать();
    
КонецПроцедуры


#КонецОбласти


#область Служебные

&НаКлиенте
Процедура ПроверитьРеквизит(ИмяРеквизита, Отказ)
    
    Если Не ЗначениеЗаполнено(Объект[ИмяРеквизита]) Тогда
        Сообщение = Новый СообщениеПользователю;
        Сообщение.Текст = "Не заполнен реквизит <" + ИмяРеквизита + ">";
        Сообщение.Сообщить();
        
        Отказ = Истина;
    КонецЕсли;
    
КонецПроцедуры // ПроверитьРеквизит()

&НаКлиенте
Процедура НастройкиПриИзменении(Элемент)
    ПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНаСервере()
    
    УстановитьПривилегированныйРежим(Истина);
    мНастройки = новый Структура;
    мНастройки.Вставить("Настройки", Настройки.Выгрузить());
    мНастройки.Вставить("Сотрудники", мСотрудники.Выгрузить());
    
    ХранилищеОбщихНастроек.Сохранить("_ЧтениеТрудозатратИзRM",,мНастройки,,"_ЧтениеТрудозатратИзRM");
    
КонецПроцедуры


#КонецОбласти

#область Загрузка

&НаСервере
Функция ПрочитатьДанныеRM(Соединение, Смещение = 0)
    
    СтрокаПараметров = "?" + ? ( ЗначениеЗаполнено(Сотрудник) , "user_id=" + Объект.КодПользователя
    + "&","")+"from="    + Формат(Объект.Период.ДатаНачала   , "ДФ=yyyy-MM-dd")
    + "&to="      + Формат(Объект.Период.ДатаОкончания, "ДФ=yyyy-MM-dd")
    + ? ( ЗначениеЗаполнено(Проект), "&project_id=" + Проект  ,"")
    + "&offset="  + Формат(Смещение, "ЧН=; ЧГ=0");
    
    Запрос = Новый HTTPЗапрос("time_entries.json" + СтрокаПараметров);
    
    Заголовки = Новый Соответствие;
    Заголовки.Вставить("X-Redmine-API-Key", Объект.КлючПриложения);
    Запрос.Заголовки = Заголовки;
    
    Ответ = Соединение.Получить(Запрос);
    
    Если Ответ.КодСостояния = 200 Тогда 
        СтрокаJSON = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
        
        ЧтениеJSON = Новый ЧтениеJSON;
        ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
        ДанныеJSON = ПрочитатьJSON(ЧтениеJSON,, "spent_on");
        ЧтениеJSON.Закрыть();
        
        Возврат ДанныеJSON.time_entries;
        
    Иначе
        ВызватьИсключение "HTTP status code: " + Ответ.КодСостояния;
    КонецЕсли;
    
КонецФункции // ПрочитатьДанныеRM

&НаСервере
Процедура ЗагрузитьИзRMНаСервере()
    
    соответствие_статусов = Получитьсоответствие_статусов();
    Объект.Трудозатраты.Очистить();
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   КлючиРедмайн.Пользователь КАК Пользователь,
    |   КлючиРедмайн.КлючПриложения КАК КлючПриложения,
    |   КлючиРедмайн.КодПользователя КАК КодПользователя
    |ИЗ
    |   РегистрСведений._КлючиРедмайн КАК КлючиРедмайн";
    
    Сотрудники = Запрос.Выполнить().Выгрузить();
    
    HTTPS      = Новый ЗащищенноеСоединениеOpenSSL;
    Соединение = Новый HTTPСоединение(Объект.Сервер,,,,, Объект.Таймаут, HTTPS);
    
    ПорцияДанных = ПрочитатьДанныеRM(Соединение);
    РазмерПорции = ПорцияДанных.Количество();
    Смещение     = 0;
    
    РасшифроватьДанныеRM(Соединение,ПорцияДанных,  Сотрудники); 
    
    Пока РазмерПорции > 0 Цикл
        Смещение     = Смещение + РазмерПорции;
        ПорцияДанных = ПрочитатьДанныеRM(Соединение, Смещение);
        РазмерПорции = ПорцияДанных.Количество();
        
        РасшифроватьДанныеRM(Соединение,ПорцияДанных,  Сотрудники); 
    КонецЦикла;
    
    Сотрудники  = Объект.Трудозатраты.Выгрузить(,"КодПользователя,Сотрудник,Пользователь");
    Сотрудники.Свернуть("КодПользователя,Сотрудник,Пользователь");
    Для Каждого Запись Из Сотрудники Цикл
        Если запись.Сотрудник.Пустая() тогда 
            ОбщегоНазначения.СообщитьПользователю("не найден в базе сотрудник " + запись.Пользователь +" с кодом " + запись.кодпользователя);
        КонецЕсли;
    КонецЦикла;
    
    
КонецПроцедуры // ЗагрузитьИзRMНаСервере()

&НаСервере
Процедура РасшифроватьДанныеRM(Соединение,ДанныеJSON,  Сотрудники)
    
    
    Для Каждого Запись Из ДанныеJSON Цикл
        
        Строка = Объект.Трудозатраты.Добавить();
        Строка.НомерЗаписи     = Запись.id;
        Строка.Дата            = Запись.spent_on;
        Строка.КодПроекта      = Запись.project.id;
        Строка.Проект          = Запись.project.name;
        Строка.НомерЗадачи     = Запись.issue.id;
        Строка.КодВидаОперации = Запись.activity.id;
        Строка.ВидОперации     = Запись.activity.name;
        Строка.КодПользователя = Запись.user.id;
        Строка.Пользователь    = Запись.user.name;
        Строка.Описание        = Запись.comments;
        
        ДанныеЗаявки           = ДанныеЗаявки(Соединение,Запись.issue.id);
        Строка.Часы            = Запись.hours;
        Строка.Задача          = "Улучшение #" +Формат(Запись.issue.id ,"ЧГ = 0")+ " "+?(ДанныеЗаявки.issues.Количество(), ДанныеЗаявки.issues[0].subject,"") ;
        Строка.Сотрудник       = ?(Сотрудники.Найти(Формат(Строка.КодПользователя,"ЧГ = 0"),"КодПользователя") = Неопределено, "",Сотрудники.Найти(Формат(Строка.КодПользователя,"ЧГ = 0"),"КодПользователя").Пользователь);
        
        
        Для Каждого стр из мСотрудники Цикл
            Если СтрНайти(НРег(Строка.Описание),НРег(стр.СтрокаПоиска))>0 тогда
                Строка.Сотрудник   = стр.Сотрудник;
                Прервать;
            КонецЕсли;
        КонецЦикла;
        Если ДанныеЗаявки.issues.Количество() тогда
            //для Каждого  стр из  ДанныеЗаявки.issues[0].custom_fields  Цикл 
            //    Если стр.name="Код проекта" тогда
            //        Строка.КодПроекта = стр.value;
            //        Прервать;
            //    КонецЕсли;
            //КонецЦикла;        
            Строка.ДатаЗадачи = ДанныеЗаявки.issues[0].created_on;
            
            Строка.Статус          = ДанныеЗаявки.issues[0].status.name;
            Строка.КодСтатуса      = ДанныеЗаявки.issues[0].status.id;
            Строка.СтатусНаш       = соответствие_статусов.Получить(ДанныеЗаявки.issues[0].status.name);
            
        КонецЕсли;
    КонецЦикла;
    
    
    
КонецПроцедуры // РасшифроватьДанныеRM() 

&НаСервере
Функция Получитьсоответствие_статусов()  
    соответствие_статусов = новый Соответствие;
    соответствие_статусов.Вставить("Новая",                 Перечисления._СтатусыЗаявки.Принят);
    соответствие_статусов.Вставить("В работе",              Перечисления._СтатусыЗаявки.ВРаботе);
    соответствие_статусов.Вставить("Решена",                Перечисления._СтатусыЗаявки.Выполнена);
    соответствие_статусов.Вставить("Может тестироваться",   Перечисления._СтатусыЗаявки.ПереданоВТестирование);
    соответствие_статусов.Вставить("Тестируется",           Перечисления._СтатусыЗаявки.ПереданоВТестирование);
    соответствие_статусов.Вставить("Переоткрыта",           Перечисления._СтатусыЗаявки.ВРаботе);
    соответствие_статусов.Вставить("Обсуждается",           Перечисления._СтатусыЗаявки.НаУточнении);
    соответствие_статусов.Вставить("Может мержиться",       Перечисления._СтатусыЗаявки.Выполнена);
    соответствие_статусов.Вставить("Смержена",              Перечисления._СтатусыЗаявки.Выполнена);
    соответствие_статусов.Вставить("Выложена на тест",      Перечисления._СтатусыЗаявки.Выполнена);
    соответствие_статусов.Вставить("Выложена на прод",      Перечисления._СтатусыЗаявки.Выполнена);
    соответствие_статусов.Вставить("На ревью",              Перечисления._СтатусыЗаявки.ВРаботе);
    соответствие_статусов.Вставить("Протестирована",        Перечисления._СтатусыЗаявки.Выполнена);
    Возврат соответствие_статусов;
КонецФункции

&НаСервере
Процедура ЗагрузитьЗадачиНаСервере()
    
    соответствие_статусов = Получитьсоответствие_статусов();
    
    //соответствие_статусов.Вставить("",Перечисления._СтатусыЗаявки.);
    
    
    Объект.Задачи.Очистить();
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   КлючиРедмайн.Пользователь КАК Пользователь,
    |   КлючиРедмайн.КлючПриложения КАК КлючПриложения,
    |   КлючиРедмайн.КодПользователя КАК КодПользователя
    |ИЗ
    |   РегистрСведений._КлючиРедмайн КАК КлючиРедмайн";
    
    Сотрудники = Запрос.Выполнить().Выгрузить();
    
    HTTPS      = Новый ЗащищенноеСоединениеOpenSSL;
    Соединение = Новый HTTPСоединение(Объект.Сервер,,,,, Объект.Таймаут, HTTPS);
    
    ПорцияДанных = ПрочитатьДанныеRMЗадачи(Соединение);
    РазмерПорции = ПорцияДанных.Количество();
    Смещение     = 0;
    
    РасшифроватьДанныеRMЗадачи(Соединение,ПорцияДанных, Сотрудники); 
    
    Пока РазмерПорции > 0 Цикл
        Смещение     = Смещение + РазмерПорции;
        ПорцияДанных = ПрочитатьДанныеRMЗадачи(Соединение, Смещение);
        РазмерПорции = ПорцияДанных.Количество();
        
        РасшифроватьДанныеRMЗадачи(Соединение,ПорцияДанных,  Сотрудники); 
    КонецЦикла;
    
КонецПроцедуры

&НаСервере
Функция ПрочитатьДанныеRMЗадачи(Соединение, Смещение = 0)
    
    СтрокаПараметров = "?";     
    Если    ЗначениеЗаполнено(Объект.Период)  тогда
        СтрокаПараметров = СтрокаПараметров + "created_on=%3E%3C" + Формат(Объект.Период.ДатаНачала, "ДФ=yyyy-MM-dd") + "|" + Формат(Объект.Период.ДатаОкончания, "ДФ=yyyy-MM-dd"); 
    КонецЕсли;
    Если    ЗначениеЗаполнено(Сотрудник) и не ГрузитьВсеОткрытые  тогда
        СтрокаПараметров = СтрокаПараметров +?(СтрокаПараметров <> "?",  "&", "") + "assigned_to_id=" + Объект.КодПользователя; 
    КонецЕсли;
    Если    ЗначениеЗаполнено(Проект)  тогда
        СтрокаПараметров = СтрокаПараметров +?(СтрокаПараметров <> "?",  "&", "") + "project_id=" + Проект; 
    КонецЕсли;
    Если  ЗначениеЗаполнено(RMСтатус)тогда
        СтрокаПараметров = СтрокаПараметров +?(СтрокаПараметров <> "?",  "&", "") + "status_id=" + RMСтатус; 
    КонецЕсли;
    СтрокаПараметров = СтрокаПараметров +?(СтрокаПараметров <> "?",  "&", "") +   "offset="  + Формат(Смещение, "ЧН=; ЧГ=0");
    
    Запрос = Новый HTTPЗапрос("issues.json" + СтрокаПараметров);
    
    Заголовки = Новый Соответствие;
    Заголовки.Вставить("X-Redmine-API-Key", Объект.КлючПриложения);
    Запрос.Заголовки = Заголовки;
    
    Ответ = Соединение.Получить(Запрос);
    
    Если Ответ.КодСостояния = 200 Тогда 
        СтрокаJSON = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
        
        ЧтениеJSON = Новый ЧтениеJSON;
        ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
        ДанныеJSON = ПрочитатьJSON(ЧтениеJSON,, "created_on");
        ЧтениеJSON.Закрыть();
        
        Возврат ДанныеJSON.issues;
        
    Иначе
        ВызватьИсключение "HTTP status code: " + Ответ.КодСостояния;
    КонецЕсли;
    
КонецФункции 

&НаСервере
Процедура РасшифроватьДанныеRMЗадачи(Соединение,ДанныеJSON,  Сотрудники)
    
    
    Для Каждого Запись Из ДанныеJSON Цикл
        Строка = объект.Задачи.Добавить();
        
        Запись.свойство("created_on",Строка.Дата); 
        
        Строка.КодПроекта      = Запись.project.id;
        Строка.Проект          = Запись.project.name;
        Строка.НомерЗадачи     = Запись.id;
        Если Запись.свойство("assigned_to") тогда
            Строка.НазначенаНаКодПользователя = Запись.assigned_to.id;
            Строка.Пользователь    = Запись.assigned_to.name;
        КонецЕсли;
        Строка.Описание        = Запись.description;
        Строка.Статус          = Запись.status.name;
        Строка.КодСтатуса      = Запись.status.id;
        Строка.Задача          = "Улучшение #" +Формат(Запись.id ,"ЧГ = 0")+ " "+ Запись.subject  ;
        Строка.Сотрудник       = ?(Сотрудники.Найти(Формат(Строка.НазначенаНаКодПользователя,"ЧГ = 0"),"КодПользователя") = Неопределено, "",Сотрудники.Найти(Формат(Строка.НазначенаНаКодПользователя,"ЧГ = 0"),"КодПользователя").Пользователь);
        
        //для Каждого  стр из  Запись.custom_fields  Цикл 
        //    Если стр.name="Код проекта" тогда
        //        Строка.КодПроекта = стр.Value ;
        //        Прервать;
        //    КонецЕсли;
        //КонецЦикла;
        
        Строка.ДатаЗадачи       = Запись.created_on;
        Строка.СтатусНаш       = соответствие_статусов.Получить(Запись.status.name);
        Строка._Заявка         = Документы._Заявка.НайтиПоРеквизиту("НомерRM",Строка.НомерЗадачи);
        Строка.Обновлять       = Строка._Заявка.Статус <> Строка.СтатусНаш или Строка._Заявка.Пустая(); 
        
        
        
        //Запрос = Новый HTTPЗапрос( "projects/"+Запись.custom_fields[0].Value+".json");
        //Запрос = Новый HTTPЗапрос( "custom_fields.json");
        //
        //Заголовки = Новый Соответствие;
        //Заголовки.Вставить("X-Redmine-API-Key", Объект.КлючПриложения);
        //Запрос.Заголовки = Заголовки;
        
        //Ответ = Соединение.Получить(Запрос);
        
        
    КонецЦикла;
    
    
    
КонецПроцедуры // РасшифроватьДанныеRM() 


&НаСервере
Функция ДанныеЗаявки(Соединение,ИД)
    
    СтрокаПараметров = "?issue_id=" + Формат(ИД ,"ЧГ = 0");
    
    Запрос = Новый HTTPЗапрос("issues.json" + СтрокаПараметров);
    //  /issues.xml?issue_id=1
    Заголовки = Новый Соответствие;
    Заголовки.Вставить("X-Redmine-API-Key", Объект.КлючПриложения);
    Запрос.Заголовки = Заголовки;
    
    Ответ = Соединение.Получить(Запрос);
    
    Если Ответ.КодСостояния = 200 Тогда 
        СтрокаJSON = Ответ.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
        
        ЧтениеJSON = Новый ЧтениеJSON;
        ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
        ДанныеJSON = ПрочитатьJSON(ЧтениеJSON,, "created_on");
        ЧтениеJSON.Закрыть();
        
        Возврат ДанныеJSON;
        
    Иначе
        ВызватьИсключение "HTTP status code: " + Ответ.КодСостояния;
    КонецЕсли;
    
КонецФункции


#КонецОбласти


#область ИзменениеДанных
&НаСервере
Процедура ЗаписатьЛистыНаСервере()
    
    Если Объект.Трудозатраты.Выгрузить(,"Сотрудник").Найти(Справочники.Пользователи.ПустаяСсылка()) <> Неопределено тогда
        Сообщить("Не везде заполнен сотрудник " );
        ВызыватьИсключение = Истина;
    КонецЕсли;
    
    Заявки = объект.Трудозатраты.Выгрузить();
    Заявки.Свернуть("КодПроекта"); 
    
    ВызыватьИсключение = Ложь;
    
    Для каждого Заявка Из Заявки Цикл
        
        мНастройка = Настройки.Выгрузить().Найти(Заявка.КодПроекта,"Проект");
        Если мНастройка         = Неопределено тогда
            мНастройка          = Настройки.Добавить();
            мНастройка.Проект   = Заявка.КодПроекта; 
            ПриИзмененииНаСервере();
        КонецЕсли;
        Если мНастройка.контрагент.пустая() тогда
            Сообщить("Не заполнен контрагент проекта " + Заявка.КодПроекта);
            ВызыватьИсключение = Истина;
        КонецЕсли;
        Если мНастройка.Организация.пустая() тогда
            Сообщить("Не заполнена Организация проекта " + Заявка.КодПроекта); 
            ВызыватьИсключение = Истина;
        КонецЕсли;
    КонецЦикла;
    
    Если ВызыватьИсключение тогда
        ВызватьИсключение ("Не удалось загрузить данные");
    КонецЕсли;
    
    Заявки = объект.Трудозатраты.Выгрузить();
    Заявки.Свернуть("НомерЗадачи,Задача,КодПроекта,ДатаЗадачи,СтатусНаш"); 
    Для каждого Заявка Из Заявки Цикл
        
        Заявка1с = Документы._Заявка.НайтиПоРеквизиту("НомерRM",Заявка.НомерЗадачи);
        
        Если не Заявка1с.Пустая() тогда
            Заявка1с                = Заявка1с.ПолучитьОбъект();
        иначе 
            Заявка1с                = Документы._Заявка.СоздатьДокумент();
            
            мНастройка = Настройки.Выгрузить().Найти(Заявка.КодПроекта,"Проект");
            
            Заявка1с.Контрагент     = мНастройка.Контрагент;
            Заявка1с.Организация    = мНастройка.Организация;
            Заявка1с.Проект         = мНастройка.НашПроект;
            Заявка1с.НомерRM        = Заявка.НомерЗадачи;
            Заявка1с.Описание       = Заявка.Задача;
            Заявка1с.Статус         = Заявка.СтатусНаш ;
            Заявка1с.Автор          = ПараметрыСеанса.ТекущийПользователь;
            Заявка1с.Коментарий     = Строка(Заявка1с.НомерRM);
            Заявка1с.Дата           = ?(заявка.ДатаЗадачи <> дата(1,1,1),заявка.ДатаЗадачи,ТекущаяДата());
            Заявка1с.ДатаОкончания  = КонецМесяца(Заявка1с.Дата);
            Заявка1с.Название       = СокрЛП(СтрЗаменить(Заявка1с.Описание,Символы.ПС," "));
            Заявка1с.УстановитьНовыйНомер();
            Попытка
                
                Если Заявка.СтатусНаш  = Перечисления._СтатусыЗаявки.Выполнена тогда
                    Заявка1с.ОбменДанными.Загрузка = Истина;
                КонецЕсли;
                
                Заявка1с.Записать();
                
                Сообщение               = Новый СообщениеПользователю;
                Сообщение.Текст         = "Создана заявка №" + Заявка1с.Номер;
                Сообщение.КлючДанных    = Заявка1с.Ссылка ;
                Сообщение.Сообщить();
                
                
            Исключение
                Сообщить(ОписаниеОшибки()); 
                Продолжить;
            КонецПопытки;
        КонецЕсли;
        
        ДанныеРС = РегистрыСведений._РаботыЗаДень.СоздатьНаборЗаписей();
        ДанныеРС.Отбор.Заявка.Установить(Заявка1с.Ссылка);
        ДанныеРС.Прочитать();
        
        РС =  ДанныеРС.Выгрузить();
        ПроверяемыеДанныеРС = РС.СкопироватьКолонки();
        ПроверяемыеДанныеРС.Колонки.Добавить("ПроверятьДатуЗапрета",новый ОписаниеТипов("Булево"));
        
        ЧекЛисты                    = объект.Трудозатраты.НайтиСтроки(новый Структура("НомерЗадачи",Заявка.НомерЗадачи));
        Для каждого ЧекЛист Из ЧекЛисты Цикл
            
            Строка                  = Заявка1с.Смета.Найти(ЧекЛист.Сотрудник,"Сотрудник");
            Если Строка             = Неопределено тогда
                Строка              = Заявка1с.Смета.Добавить();
                Строка.Сотрудник    = ЧекЛист.Сотрудник;
                Строка.Роль         = Строка.Сотрудник.Роль;
            КонецЕсли;
            
            Строка                  = РС.Найти(формат(ЧекЛист.НомерЗаписи,"ЧГ=0"),"КодСтроки");
            Если Строка             = Неопределено тогда  
                Строка              = РС.Добавить();
            КонецЕсли;
            Строка.Заявка           = Заявка1с.Ссылка;
            Строка.КодСтроки        = формат(ЧекЛист.НомерЗаписи,"ЧГ=0");
            Строка.Дата             = ЧекЛист.Дата;
            Строка.Описание         = ЧекЛист.Описание;
            Строка.Сотрудник        = ЧекЛист.Сотрудник;
            строка.Часы             = ЧекЛист.Часы; 
            строка.ЧасыКлиенту      = ЧекЛист.Часы;
            строка.ЗагруженоСRM     = Истина;
            
            строкаПров = ПроверяемыеДанныеРС.Добавить();
            ЗаполнитьЗначенияСвойств(строкаПров,Строка); 
            строкаПров.ПроверятьДатуЗапрета = Истина;
            
        КонецЦикла; 
        
        Отказ = Ложь;
        _ОбщийМодульСервер.ПроверитьРСНаДатуЗапрета(ПроверяемыеДанныеРС,Отказ);  
        ДанныеРС.Загрузить(Рс);
        Если не Отказ тогда
            ДанныеРС.Записать();
            
            Сообщение               = Новый СообщениеПользователю;
            Сообщение.Текст         = "Загружены ЧЛ заявки №" + Заявка1с.Номер;
            Сообщение.КлючДанных    = Заявка1с.Ссылка ;
            Сообщение.Сообщить();
            
        КонецЕсли;
        
    КонецЦикла;
    
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗадачи(Команда)
    ЗаписатьЗадачиНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗадачиНаСервере()
    
    
    Заявки = объект.Задачи.Выгрузить();
    Заявки.Свернуть("КодПроекта"); 
    
    ВызыватьИсключение = Ложь;
    
    Для каждого Заявка Из Заявки Цикл
        
        мНастройка = Настройки.Выгрузить().Найти(Заявка.КодПроекта,"Проект");
        Если мНастройка         = Неопределено тогда
            мНастройка          = Настройки.Добавить();
            мНастройка.Проект   = Заявка.КодПроекта; 
            ПриИзмененииНаСервере();
        КонецЕсли;
        Если мНастройка.контрагент.пустая() тогда
            Сообщить("Не заполнен контрагент проекта " + Заявка.КодПроекта);
            ВызыватьИсключение = Истина;
        КонецЕсли;
        Если мНастройка.Организация.пустая() тогда
            Сообщить("Не заполнена Организация проекта " + Заявка.КодПроекта); 
            ВызыватьИсключение = Истина;
        КонецЕсли;
    КонецЦикла;
    
    Если ВызыватьИсключение тогда
        ВызватьИсключение ("Не удалось загрузить данные");
    КонецЕсли;
    Заявки = объект.Задачи.Выгрузить();
    Для каждого Заявка Из Заявки Цикл
        
        Заявка1с = Документы._Заявка.НайтиПоРеквизиту("НомерRM",Заявка.НомерЗадачи);
        
        Если не Заявка1с.Пустая() тогда
            Заявка1с                = Заявка1с.ПолучитьОбъект();
        иначе 
            Заявка1с                = Документы._Заявка.СоздатьДокумент();
        КонецЕсли;
        
        мНастройка = Настройки.Выгрузить().Найти(Заявка.КодПроекта,"Проект");
        
        Заявка1с.Контрагент     = мНастройка.Контрагент;
        Заявка1с.Организация    = мНастройка.Организация;
        Заявка1с.Проект         = мНастройка.НашПроект;
        Заявка1с.НомерRM        = Заявка.НомерЗадачи;
        Заявка1с.Описание       = Заявка.Задача;
        Заявка1с.Статус         = Заявка.СтатусНаш;
        Заявка1с.Автор          = ПараметрыСеанса.ТекущийПользователь;
        Заявка1с.Коментарий     = Строка(Заявка1с.НомерRM);
        Заявка1с.Дата           = ?(заявка.ДатаЗадачи <> дата(1,1,1),заявка.ДатаЗадачи,ТекущаяДата());
        Заявка1с.ДатаОкончания  = КонецМесяца(Заявка1с.Дата);
        Заявка1с.Записать();
    КонецЦикла;;
    
КонецПроцедуры



#КонецОбласти


#Область загрузка_эксель_удалить

//&НаСервере
//Процедура ЗагрузитьЛистыНаСервере()
//    
//    Заявки = объект.ИзФайла.Выгрузить();
//    Заявки.Свернуть("ЗаявкаСсылка"); 
//    
//    Для каждого Заявка Из Заявки Цикл
//        Если Заявка.ЗаявкаСсылка.Пустая() тогда
//            Сообщить("Не все заявки заполнены");
//            Возврат;
//        КонецЕсли;
//    КонецЦикла; 
//    
//    Для каждого Заявка Из Заявки Цикл
//        
//        
//        Заявка1с = Заявка.ЗаявкаСсылка.ПолучитьОбъект();
//        ЧекЛисты = объект.ИзФайла.НайтиСтроки(новый Структура("ЗаявкаСсылка",Заявка.ЗаявкаСсылка));
//        Для каждого ЧекЛист Из ЧекЛисты Цикл
//            Дата =  ?( РежимДаты = "Дата полностью (dd.mm.yyyy)",Дата ( прав(СокрЛП(ЧекЛист.ДАта),10) + " 00:00:00"), Дата(Год(ТекущаяДата()), Месяц, ЧекЛист.ДАта));
//            Если  ДатаЗапрета < Дата или РольДоступна("ПолныеПрава") тогда
//                
//                Строка = Заявка1с.ЧекЛисты.Добавить();
//                Строка.Дата = Дата;
//                Строка.Описание = ЧекЛист.Решение;
//                Строка.Сотрудник = Сотрудник;
//                строка.Часы = ЧекЛист.Часы; 
//                строка.ЧасыКлиенту = ЧекЛист.Часы;
//            иначе
//                Сообщить("чек лист не записан по дате запрета " + формат(ДатаЗапрета,"ДФ=dd.MM.yy"));
//            КонецЕсли;
//            
//            
//        КонецЦикла; 
//        
//        Если Заявка1с.ЧекЛисты.Количество() тогда
//            Попытка 
//                Заявка1с.Записать();
//                
//                Сообщение = Новый СообщениеПользователю;
//                Сообщение.Текст = "Создана/Обновлена заявка №" + Заявка1с.Номер;
//                Сообщение.КлючДанных = Заявка1с.Ссылка ;
//                Сообщение.Сообщить();
//            Исключение
//                Сообщить(ОписаниеОшибки());
//            КонецПопытки;
//        КонецЕсли;
//        
//    КонецЦикла;
//    
//КонецПроцедуры


//&НаКлиенте
//Процедура ЗагрузитьИзФайла(Команда)
//    ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
//    
//    ДиалогВыбораФайла.Заголовок = "Прочитать табличный документ из файла";
//    ДиалогВыбораФайла.Фильтр = "Лист Excel 2007+ (*.xlsx)|*.xlsx| Лист Excel 2003 (*.xls)|*.xls|";
//    
//    Если ДиалогВыбораФайла.Выбрать() Тогда
//        Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла));
//        ПолноеИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
//        ЗагрузитьТабличныйДокументИзФайла(Адрес, ПолноеИмяФайла);
//    КонецЕсли;
//КонецПроцедуры

//&НаСервере
//Процедура ЗагрузитьТабличныйДокументИзФайла(Адрес, ПолноеИмяФайла)
//    
//    //Необходимо чтение файлов XLS или XLSX
//    Расширение = Прав(ПолноеИмяФайла, 4);
//    Расширение = СтрЗаменить(Расширение, ".", "");
//    
//    ФайлПриемник = ПолучитьИмяВременногоФайла(Расширение);
//    ДанныеХранилища = ПолучитьИзВременногоХранилища(Адрес);
//    ДанныеХранилища.Записать(ФайлПриемник);
//    ТД = Новый ТабличныйДокумент;
//    ТД.Очистить();
//    
//    ТД.Прочитать(ФайлПриемник);
//    ПреобразоватьТабличныйДокументВТаблицуЗначений(Тд);	
//КонецПроцедуры

//&НаСервере
//Процедура  ПреобразоватьТабличныйДокументВТаблицуЗначений(Тд) 
//    
//    ПоследняяСтрока = Тд.ВысотаТаблицы;
//    ПоследняяКолонка = Тд.ШиринаТаблицы;
//    ОбластьЯчеек = Тд.Область(1, 1, ПоследняяСтрока, ПоследняяКолонка); 
//    // Создаем описание источника данных на основании области ячеек табличного документа.
//    ИсточникДанных = Новый ОписаниеИсточникаДанных(ОбластьЯчеек);  
//    // Создаем объект для интеллектуального построения отчетов,
//    // указываем источник данных и выполняем построение отчета.
//    ПостроительОтчета = Новый ПостроительОтчета; 
//    ПостроительОтчета.ИсточникДанных = ИсточникДанных;
//    ПостроительОтчета.Выполнить();
//    // Результат выгружаем в таблицу значений.
//    ТабЗначений = ПостроительОтчета.Результат.Выгрузить();
//    объект.ИзФайла.Очистить();
//    для Каждого стр из ТабЗначений цикл
//        Если не ЗначениеЗаполнено(стр.НашаЗаявка ) тогда
//            Сообщить("Не все номера заявок нашей базы заполнены !!");
//            Возврат;
//        КонецЕсли;
//        
//        стр2 = объект.ИзФайла.Добавить();
//        ЗаполнитьЗначенияСвойств(стр2, стр);
//        стр2.Ответственный  = Справочники.Пользователи.НайтиПоНаименованию(стр.Ответственный);
//        Если не ЗначениеЗаполнено(стр2.Ответственный) тогда
//            Сообщить("Не найден пользователь"+стр.Ответственный+"!");
//            Возврат;
//        КонецЕсли;
//        
//    КонецЦикла;
//    
//    //////Объект.ИзФайла.Загрузить(ТабЗначений);
//    
//    Заявки = объект.ИзФайла.Выгрузить();
//    //////Листы.Свернуть("ЗаявкаРМ,НашаЗаявка,Вопрос,Ответственный");
//    
//    Заявки.Свернуть("НашаЗаявка");
//    
//    
//    НачатьТранзакцию();
//    Попытка
//        Для каждого Лист Из Заявки Цикл
//            
//            ////////Если Лист.ЗаявкаРМ <> "" тогда
//            ////////    Заявка1с = Документы._Заявка.НайтиПоРеквизиту("НомерRM",Строка(Лист.ЗаявкаРМ));
//            ////////ИначеЕсли ЗначениеЗаполнено(Лист.НашаЗаявка) тогда
//            Поиск = прав(Строка("00000000000000" + Формат(Лист.НашаЗаявка,"ЧГ=0")),9) ;
//            Заявка1с = Документы._Заявка.НайтиПоНомеру(Поиск);
//            
//            ////////иначе
//            ////////    Заявка1с = Документы._Заявка.ПустаяСсылка();
//            ////////КонецЕсли;
//            
//            Если Заявка1с.Пустая() тогда
//                ВызватьИсключение("Заявка №"+Лист.НашаЗаявка+ "не найдена в базе!");
//            КонецЕсли;
//            
//            ////////Если не Заявка1с.Пустая() тогда
//            ////////    Заявка1с = Заявка1с.ПолучитьОбъект();
//            ////////иначе 
//            ////////    Заявка1с = Документы._Заявка.СоздатьДокумент();
//            ////////    Заявка1с.Контрагент = Справочники.Контрагенты.НайтиПоНаименованию("СЭЙЛЗ СОЛЮШНС ГРУПП ООО");
//            ////////    
//            ////////    если Лист.ЗаявкаРМ <> "" тогда
//            ////////        Заявка1с.НомерRM = Лист.ЗаявкаРМ;
//            ////////    ИначеЕсли ЗначениеЗаполнено(Лист.НашаЗаявка) тогда
//            ////////        //если ищем по нашему номеру- то заявка уже существует заранее и сюда программа не попадет 
//            ////////        Заявка1с.Номер = Поиск;
//            ////////        //            //    Заявка1с.НомерRM = Лист.НашаЗаявка;
//            ////////    КонецЕсли;
//            ////////    
//            ////////    Заявка1с.Описание = Лист.Вопрос;
//            ////////    Заявка1с.Статус = Перечисления.СтатусыЗаявки.ВРаботе;
//            ////////    Заявка1с.Автор = ПараметрыСеанса.ТекущийПользователь;//Справочники.Пользователи.НайтиПоНаименованию("Зайцев А");
//            ////////    если Лист.ЗаявкаРМ <> "" тогда
//            ////////        Заявка1с.Коментарий = Лист.ЗаявкаРМ;
//            ////////    ИначеЕсли ЗначениеЗаполнено(Лист.НашаЗаявка) тогда
//            ////////        Заявка1с.Коментарий = Лист.НашаЗаявка;
//            ////////    КонецЕсли;
//            ////////    //Заявка1с.Коментарий = Строка(Заявка1с.Номер);
//            ////////    Заявка1с.Дата = ТекущаяДата();
//            ////////    стр = Заявка1с.Смета.Добавить();
//            ////////    стр.Сотрудник = Лист.Ответственный;
//            ////////    //
//            ////////КонецЕсли;
//            
//            //КонецЦикла;
//            ////////////Заявка1с.Записать(РежимЗаписиДокумента.Проведение);
//            //если Лист.ЗаявкаРМ <> "" тогда
//            //	ЧекЛисты = объект.ИзФайла.НайтиСтроки(новый Структура("НомерЗаписи",Лист.НомерЗаписи));
//            //ИначеЕсли ЗначениеЗаполнено(Лист.НашаЗаявка) тогда
//            //	ЧекЛисты = объект.ИзФайла.НайтиСтроки(новый Структура("НомерЗаписи",Лист.НомерЗаписи));
//            //	КонецЕсли;
//            ЧекЛисты = объект.ИзФайла.НайтиСтроки(новый Структура("НашаЗаявка",Лист.НашаЗаявка));
//            
//            Заявка1с = Заявка1с.ПолучитьОбъект();
//            
//            //////// ЧекЛисты = объект.ИзФайла.НайтиСтроки(новый Структура("НашаЗаявка",Заявка1с.НомерRM));
//            
//            ////////если  ЗначениеЗаполнено(Лист.НомерЗаписи) тогда
//            ////////    ЧекЛисты = Документы._Заявка.НайтиПоНомеру(Поиск).ЧекЛисты;
//            ////////    //ИначеЕсли ЗначениеЗаполнено(Заявка1с.НомерRM) тогда
//            ////////    //    Заявка1с = Документы._Заявка.НайтиПоРеквизиту("Номер",Заявка1с.НомерRM);
//            ////////КонецЕсли;
//            дата = Дата(1,1,1);
//            Для каждого ЧекЛист Из ЧекЛисты Цикл
//                //////////    Строка = Заявка1с.ЧекЛисты.Найти(ЧекЛист.НомерЗаписи,"НомерRM");
//                //////////    Если Строка = Неопределено тогда
//                //////////КонецЕсли;
//                Если ЗначениеЗаполнено(ЧекЛист.Дата) тогда
//                    Дата = Дата(Лев(ЧекЛист.Дата,10) + " 0:00:00")    
//                КонецЕсли;
//                Если    ДатаЗапрета < Дата или РольДоступна("ПолныеПрава") тогда
//                    
//                    Строка = Заявка1с.ЧекЛисты.Добавить();
//                    Строка.Дата = Дата ; 
//                    
//                    ////////////////////////////////////////////Строка.НомерЗаписиRM = Заявка1с.НомерRM;
//                    Строка.Задание = ЧекЛист.Вопрос;
//                    Строка.Описание = ЧекЛист.Решение;
//                    Строка.Сотрудник = ЧекЛист.Ответственный;
//                    //	строка.Стадия = Справочники.СтадииРазработки.НайтиПоНаименованию(ЧекЛист.ВидОперации);
//                    строка.Часы = Строка(ЧекЛист.Кол_Час_15Мин__); 
//                    строка.ЧасыКлиенту = Строка(ЧекЛист.Кол_Час_15Мин__);
//                иначе
//                    Сообщить("чек лист не записан по дате запрета " + формат(ДатаЗапрета,"ДФ=dd.MM.yy"));
//                КонецЕсли;
//            КонецЦикла;   
//            Попытка
//                Заявка1с.Записать( );
//                //
//                Сообщение = Новый СообщениеПользователю;
//                Сообщение.Текст = "Обновлена заявка №" + Заявка1с.Номер;
//                Сообщение.КлючДанных = Заявка1с.Ссылка ;
//                Сообщение.Сообщить();
//                
//            Исключение
//                Сообщить(ОписаниеОшибки()); 
//            КонецПопытки;
//            //КонецЦикла;
//            
//            
//            //КонецЕсли;
//            
//            //КонецЦикла;
//        КонецЦикла;
//        ЗафиксироватьТранзакцию();
//    Исключение
//        Сообщить(ОписаниеОшибки());
//    КонецПопытки;
//    //Возврат ТабЗначений
//КонецПроцедуры

//&НаКлиенте
//Процедура ВыгрузитьШаблон(Команда)
//    
//    
//    Попытка 
//        ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение); 
//        ДиалогСохраненияФайла.ПолноеИмяФайла = "Шаблон_работ.xlsx"; 
//        Фильтр = "Лист Excel 2007+ (*.xlsx)|*.xlsx";
//        ДиалогСохраненияФайла.Фильтр = Фильтр; 
//        ДиалогСохраненияФайла.МножественныйВыбор = Ложь; 
//        Если ДиалогСохраненияФайла.Выбрать() Тогда 
//            ПутьКФайлу = ДиалогСохраненияФайла.ПолноеИмяФайла; 
//            Образец.Записать(ПутьКФайлу,ТипФайлаТабличногоДокумента.XLSX);
//            ЗапуститьПриложение(ПутьКФайлу);
//        КонецЕсли;  
//    Исключение
//    КонецПопытки;
//    
//КонецПроцедуры

//&НаКлиенте
//Процедура Загрузить(Команда)
//    
//    ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
//    
//    ДиалогВыбораФайла.Заголовок = "Прочитать табличный документ из файла";
//    ДиалогВыбораФайла.Фильтр = "Лист Excel 2007+ (*.xlsx)|*.xlsx| Лист Excel 2003 (*.xls)|*.xls|";
//    
//    Если ДиалогВыбораФайла.Выбрать() Тогда
//        Адрес = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ДиалогВыбораФайла.ПолноеИмяФайла));
//        ПолноеИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
//        ЗагрузитьТабличныйДокументИзФайлаУниверс(Адрес, ПолноеИмяФайла);
//    КонецЕсли;
//    
//КонецПроцедуры


//&НаСервере
//Процедура ЗагрузитьТабличныйДокументИзФайлаУниверс(Адрес, ПолноеИмяФайла)
//    
//    //Необходимо чтение файлов XLS или XLSX
//    Расширение = Прав(ПолноеИмяФайла, 4);
//    Расширение = СтрЗаменить(Расширение, ".", "");
//    
//    ФайлПриемник = ПолучитьИмяВременногоФайла(Расширение);
//    ДанныеХранилища = ПолучитьИзВременногоХранилища(Адрес);
//    ДанныеХранилища.Записать(ФайлПриемник);
//    ТД = Новый ТабличныйДокумент;
//    ТД.Очистить();
//    
//    ТД.Прочитать(ФайлПриемник);
//    ПреобразоватьТабличныйДокументВТаблицуЗначенийУниверс(Тд);	
//КонецПроцедуры

//&НаСервере
//Процедура  ПреобразоватьТабличныйДокументВТаблицуЗначенийУниверс(Тд) 
//    
//    ПоследняяСтрока = Макс(ПоследняяСтрока ,ТД.ВысотаТаблицы);
//    объект.ИзФайла.Очистить();
//    
//    Дата  = "";
//    для стр = ПерваяСтрока по ПоследняяСтрока цикл
//        стр2 = объект.ИзФайла.Добавить();
//        
//        стр2.НашаЗаявка = ТД.Область(стр,КолонкаЗаявка).Текст;
//        стр2.Решение = ТД.Область(стр,КолонкаОписаниеРабот).Текст;
//        Дата1 =  ТД.Область(стр,КолонкаДата).Текст;
//        
//        Если СокрЛП(Дата1) <> "" тогда
//            Дата = Дата1;
//        КонецЕсли;
//        
//        стр2.Дата = Дата;
//        стр2.Кол_Час_15Мин__ = ТД.Область(стр,КолонкаЧасы).Текст;
//        
//        
//        Поиск = прав(Строка("00000000000000" + Формат(стр2.НашаЗаявка,"ЧГ=0")),9) ;
//        стр2.ЗаявкаСсылка = Документы._Заявка.НайтиПоНомеру(Поиск);
//        Если стр2.ЗаявкаСсылка.Пустая() тогда
//            Сообщить("Заявка № """+стр2.НашаЗаявка+  """ не найдена в базе!");
//        КонецЕсли;
//    КонецЦикла  
//    
//КонецПроцедуры


//&НаКлиенте
//Процедура РежимДатыПриИзменении(Элемент = Неопределено)
//    Элементы.Месяц.Видимость = не РежимДаты = "Дата полностью (dd.mm.yyyy)";
//КонецПроцедуры



#КонецОбласти
