

Процедура ВыполнениеПриСозданииЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ)
    
    
    Для каждого Задача Из ФормируемыеЗадачи Цикл
        Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы._ЗадачиПоЗаявкам.ТочкиМаршрута.Выполнение тогда
            УдалитьЗадачиПоБП(ТочкаМаршрутаБизнесПроцесса);         
            Задача.Исполнитель = Исполнитель;
            Задача.ДатаПлановая = ДатаПлановая; //
            Запрос = Новый Запрос;
            Запрос.Текст = 
            "ВЫБРАТЬ ПЕРВЫЕ 1
            |   ДанныеЗадачСрезПоследних.ВернутьНаДоработку КАК ВернутьНаДоработку,
            |   ДанныеЗадачСрезПоследних.ОписаниеДоработки КАК ОписаниеДоработки
            |ИЗ
            |   РегистрСведений._ДанныеЗадач.СрезПоследних КАК ДанныеЗадачСрезПоследних
            |ГДЕ
            |   ДанныеЗадачСрезПоследних.БП = &БП
            |   И ДанныеЗадачСрезПоследних.Задача.ТочкаМаршрута = &ТочкаМаршрута
            |
            |УПОРЯДОЧИТЬ ПО
            |   ДанныеЗадачСрезПоследних.Задача.Дата УБЫВ";
            
            Запрос.УстановитьПараметр("БП", Ссылка);
            Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы._ЗадачиПоЗаявкам.ТочкиМаршрута.ПроверкаВыполнения);
            
            РезультатЗапроса = Запрос.Выполнить();
            
            ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
            
            мСотрудник = новый Массив;
            
            Если  ВыборкаДетальныеЗаписи.Следующий()  и ВыборкаДетальныеЗаписи.ВернутьНаДоработку Тогда 
                
                Задача.ОписаниеДоработки = ВыборкаДетальныеЗаписи.ОписаниеДоработки;
                Задача.ДатаПлановая = ТекущаяДата(); //
                Текст = "*Новая*"  + ?(Срочная, "ВАЖНАЯ ","") + "* задача - возврат на доработку:* `" + Формат(Число(заявка.Номер), "ЧДЦ = 0; ЧГ = 0") + "`" + 
                Символы.ПС + "*Контр-т:* `" + Заявка.Контрагент + "`" + 
                Символы.ПС + "*Отв-ый:* `" + Автор + "`" + 
                Символы.ПС + "*На дату:* `" + формат(Задача.ДатаПлановая, "ДФ = dd.MM.yy") + "`" + 
                Символы.ПС + "*Наименование:* `" + Задача.ОписаниеДоработки + "`"; 
                
            иначе
                
                Текст = "*Новая *" +  ?(Срочная, "ВАЖНАЯ ","") + "*задача:* `" + Формат(Число(заявка.Номер), "ЧДЦ = 0; ЧГ = 0") + "`" + 
                Символы.ПС + "*Контр-т:* `" + заявка.Контрагент + "`" + 
                Символы.ПС + "*Отв-ый:* `" + Автор + "`" + 
                Символы.ПС + "*На дату:* `" + формат(Задача.ДатаПлановая,"ДФ = dd.MM.yy") + "`" + 
                Символы.ПС + "*Наименование:* `" + Лев(Наименование,200) + ?(СтрДлина(Наименование)>200, ".....","") + "`"; 
                
                
            КонецЕсли;
            мСотрудник.Добавить( Исполнитель);
            мПараметры = Новый Массив;
            мПараметры.Добавить(мСотрудник);
            мПараметры.Добавить(Текст);
            мПараметры.Добавить(ПараметрыСеанса.ТекущийПользователь);
            мПараметры.Добавить(ссылка);
            
            ФоновыеЗадания.Выполнить("_ОбщийМодульСервер.Рассылка", 
            мПараметры, Новый УникальныйИдентификатор,"Рассылка в телеграмм"); 
            
        ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы._ЗадачиПоЗаявкам.ТочкиМаршрута.ПроверкаВыполнения тогда
            Задача.Исполнитель = Автор; //
            Задача.ДатаПлановая = ТекущаяДата(); //
            Задача.ЗадачаВыполнена = Истина; //
        КонецЕсли;
        
    КонецЦикла;
    
КонецПроцедуры

Процедура УдалитьЗадачиПоБП(ТочкаМаршрута)
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   _ИсполнениеЗадач.Ссылка КАК Ссылка
    |ИЗ
    |   Задача._ИсполнениеЗадач КАК _ИсполнениеЗадач
    |ГДЕ
    |   _ИсполнениеЗадач.ТочкаМаршрута В(&ТочкаМаршрута)
    |   И _ИсполнениеЗадач.Выполнена = ЛОЖЬ
    |   И _ИсполнениеЗадач.ПометкаУдаления = ЛОЖЬ
    |   И _ИсполнениеЗадач.БизнесПроцесс В(&БизнесПроцесс)";
    
    Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
    Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        ЧЛ = РегистрыСведений._РаботыЗаДень.СоздатьНаборЗаписей();
        ЧЛ.Отбор.Задача.Установить(ВыборкаДетальныеЗаписи.Ссылка);
        ЧЛ.Прочитать();
        Если не ЧЛ.Количество() тогда
            Задача = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
            Задача.УстановитьПометкуУдаления(Истина);
        КонецЕсли;
    КонецЦикла;
    
КонецПроцедуры

Процедура ВернутьНаДоработкуПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
    
    Результат = Ложь;
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |   ДанныеЗадачСрезПоследних.ВернутьНаДоработку КАК ВернутьНаДоработку,
    |   ДанныеЗадачСрезПоследних.ЗадачаВыполнена КАК ЗадачаВыполнена
    |ИЗ
    |   РегистрСведений._ДанныеЗадач.СрезПоследних КАК ДанныеЗадачСрезПоследних
    |ГДЕ
    |   ДанныеЗадачСрезПоследних.БП = &БП
    |   И ДанныеЗадачСрезПоследних.Задача.ТочкаМаршрута = &ТочкаМаршрута
    |
    |УПОРЯДОЧИТЬ ПО
    |   ДанныеЗадачСрезПоследних.Задача.Дата УБЫВ";
    
    Запрос.УстановитьПараметр("БП", Ссылка);
    Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы._ЗадачиПоЗаявкам.ТочкиМаршрута.ПроверкаВыполнения);
    
    РезультатЗапроса = Запрос.Выполнить();
    
    ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
    
    Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
        Результат = ВыборкаДетальныеЗаписи.ВернутьНаДоработку;
    КонецЦикла;
    
    
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
    
    Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка._Заявка") Тогда
        // Заполнение шапки
        Автор = ДанныеЗаполнения.Автор;
        Заявка = ДанныеЗаполнения.Ссылка;
    КонецЕсли;
    
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
    
    ПроверяемыеРеквизиты.Добавить("Исполнитель");
    
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
    
    Если ОбменДанными.Загрузка тогда
        Возврат
    КонецЕсли;
    
    Если не ЭтоНовый() и Исполнитель <> Ссылка.Исполнитель 
        и Ссылка.Стартован тогда
    КонецЕсли;
    
    
    Если не ЭтоНовый() и НеВыставлятьКонтрагенту <> Ссылка.НеВыставлятьКонтрагенту   и Ссылка.Стартован тогда
        ДополнительныеСвойства.Вставить("ОбновитьЧЛ")
    КонецЕсли;
    
    Если Завершен <> Ссылка.Завершен и Завершен тогда
        ДатаЗавершения = ТекущаяДата();
    ИначеЕсли не Завершен тогда
        ДатаЗавершения = Неопределено;
    КонецЕсли;
    
    ОтправкаИзмененийВТелегу() ;
    
    Если (Ссылка.Заявка <> Заявка  ) и не ЭтоНовый()  и не Ссылка.Заявка.Пустая()  и не ДополнительныеСвойства.Свойство("ЗакрытиеЗаявки") тогда
        _ОбщийМодульСервер.ПеренестиЧЛ(Ссылка.Заявка,Заявка,Ссылка);
    КонецЕсли;
    
    Если ( НеВыставлятьКонтрагенту <> Ссылка.НеВыставлятьКонтрагенту) и не Ссылка.Заявка.Пустая() тогда
        Параметры = Новый Массив;
        Параметры.Добавить(Ссылка.Заявка);
        ФоновыеЗадания.Выполнить("_ОбщийМодульСервер.ПеренестиЧлВЗаявку", 
        Параметры, Новый УникальныйИдентификатор,"ПеренестиЧлВЗаявку");      
    КонецЕсли;
    
КонецПроцедуры

Процедура ОтправкаИзмененийВТелегу()
    
    Если ОбменДанными.Загрузка тогда
        Возврат
    КонецЕсли;
    
    мСотрудник = новый Массив;
    Если не Стартован  тогда
        Возврат ;
    КонецЕсли;
    
    Если Отменена <> Ссылка.Отменена и Отменена тогда
        //отмена 
        Текст = "*" +" ОТМЕНЕНА задача*" + 
        Символы.ПС + "*Заявка:* `" + Формат(Число(Заявка.Номер), "ЧДЦ=0; ЧГ=0") + "`"+
        Символы.ПС + "*Контр-т:* `" + Заявка.Контрагент + "`"+
        Символы.ПС + "*Отв-ый:* `" + Автор + "`"+ 
        Символы.ПС + "*Сотрудник* `" + Исполнитель + "`"+ 
        Символы.ПС + "*На дату:* `" + формат(ДатаПлановая, "ДФ=dd.MM.yy") + "`"+ 
        Символы.ПС + "*Наименование:* `" + Лев(Наименование,200) + ?(СтрДлина(Наименование)>200, ".....","") + "`"; 
        
        мСотрудник.Добавить( Автор);
        мСотрудник.Добавить( Исполнитель);
        
        мПараметры = Новый Массив;
        мПараметры.Добавить(мСотрудник);
        мПараметры.Добавить(Текст);
        мПараметры.Добавить(ПараметрыСеанса.ТекущийПользователь);
        мПараметры.Добавить(ссылка);
        
        ФоновыеЗадания.Выполнить("_ОбщийМодульСервер.Рассылка", 
        мПараметры, Новый УникальныйИдентификатор,"Рассылка в телеграмм"); 
        
    ИначеЕсли Стартован <> Ссылка.Стартован и Стартован тогда
        //    
        //    //новое задание
        //    Текст = "*Новая*" + 
        //    Символы.ПС + ?(Срочная, "ВАЖНАЯ ","") + "*задача:* `" + Формат(Число(заявка.Номер), "ЧДЦ = 0; ЧГ = 0") + "`" + 
        //    Символы.ПС + "*Контр-т:* `" + заявка.Контрагент + "`" + 
        //    Символы.ПС + "*Отв-ый:* `" + Автор + "`" + 
        //    Символы.ПС + "*На дату:* `" + формат(ДатаПлановая,"ДФ = dd.MM.yy") + "`" + 
        //    Символы.ПС + "*Наименование:* `" + Лев(Наименование,200) + ?(СтрДлина(Наименование)>200, ".....","") + "`"; 
        //    
        //    мСотрудник.Добавить( Исполнитель);
        //    мПараметры = Новый Массив;
        //    мПараметры.Добавить(мСотрудник);
        //    мПараметры.Добавить(Текст);
        //    мПараметры.Добавить(ПараметрыСеанса.ТекущийПользователь);
        //    мПараметры.Добавить(ссылка);
        //    
        //    ФоновыеЗадания.Выполнить("_ОбщийМодульСервер.Рассылка", 
        //    мПараметры, Новый УникальныйИдентификатор,"Рассылка в телеграмм"); 
        //    
        //ИначеЕсли часы = 0 и Выполнено и не ЗначениеЗаполнено(Ссылка.дата) и не _ТолькоЧасы тогда
        //    
        //    Текст = "*Выполнено задание*" + 
        //    Символы.ПС + "*Заявка:* `" + Формат(Число(заявка.Номер), "ЧДЦ = 0; ЧГ = 0") + "`" + 
        //    Символы.ПС + "*Контр-т:* `" + заявка.Контрагент + "`" + 
        //    Символы.ПС + "*Исполнитель:* `" + Исполнитель + "`" + 
        //    Символы.ПС + "*Срочная:* `" + Формат(Срочная,"БЛ = Нет; БИ = Да") + "`" + 
        //    Символы.ПС + "*Наименование:* `" + Лев(Наименование,200) + ?(СтрДлина(Наименование)>200, ".....","") + "`" + 
        //    Символы.ПС + "*Описание:* `" + Описание + "`"; 
        //    
        //    мСотрудник.Добавить( Автор);
        //    мПараметры = Новый Массив;
        //    мПараметры.Добавить(мСотрудник);
        //    мПараметры.Добавить(Текст);
        //    мПараметры.Добавить(ПараметрыСеанса.ТекущийПользователь);
        //    мПараметры.Добавить(ссылка);
        //    
        //    ФоновыеЗадания.Выполнить("_ОбщийМодульСервер.Рассылка", 
        //    мПараметры, Новый УникальныйИдентификатор,"Рассылка в телеграмм"); 
        
    ИначеЕсли Стартован И
        (Ссылка.Срочная <> Срочная 
        или Ссылка.Исполнитель <> Исполнитель 
        или СокрЛП(ВРег(Наименование)) <> СокрЛП(ВРег(Ссылка.Наименование))) тогда
        
        Текст = "*Изменения в задаче*" + 
        Символы.ПС + "*Заявка:* `" + Формат(Число(заявка.Номер), "ЧДЦ = 0; ЧГ = 0") + "`" + 
        Символы.ПС + "*Контр-т:* `" + заявка.Контрагент + "`" + 
        Символы.ПС + "*Отв-ый:* `" + Автор + "`" + 
        
        //изменен Исполнитель 
        ?( Ссылка.Исполнитель <> Исполнитель ,
        Символы.ПС + "*Сотрудник* `" + Ссылка.Исполнитель + "` → `" + Исполнитель + "`",
        "") + 
        
        //изменена важность задания 
        ?(Ссылка.Срочная <> Срочная ,
        Символы.ПС + "*Изменена важность задачи:* `" + Ссылка.Срочная + "` → `" + Срочная + "`",
        "") + 
        
        //изменено задание
        ?( СокрЛП(ВРег(Наименование)) <> СокрЛП(ВРег(Ссылка.Наименование)), 
        Символы.ПС + "*Новое наименование:* `" + Лев(Наименование,200) + ?(СтрДлина(Наименование)>200, ".....","") + "`",""); 
        
        Если не Ссылка.Исполнитель = Исполнитель тогда
            мСотрудник.Добавить(Ссылка.Исполнитель);
        КонецЕсли;
        
        мСотрудник.Добавить(Исполнитель);
        
        мПараметры = Новый Массив;
        мПараметры.Добавить(мСотрудник);
        мПараметры.Добавить(Текст);
        мПараметры.Добавить(ПараметрыСеанса.ТекущийПользователь);
        мПараметры.Добавить(ссылка);
        
        ФоновыеЗадания.Выполнить("_ОбщийМодульСервер.Рассылка", 
        мПараметры, Новый УникальныйИдентификатор,"Рассылка в телеграмм");
    КонецЕсли;
    
    
КонецПроцедуры

Процедура ЗадачаСебеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
    Результат = Автор = Исполнитель;
КонецПроцедуры

Процедура ВыполнениеПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
    
    мСотрудник = новый Массив;
    
    Текст = "*Выполнена задача*" + 
    Символы.ПС + "*Заявка:* `" + Формат(Число(Заявка.Номер), "ЧДЦ = 0; ЧГ = 0") + "`" + 
    Символы.ПС + "*Контр-т:* `" + Заявка.Контрагент + "`" + 
    Символы.ПС + "*Исполнитель:* `" + Исполнитель + "`" + 
    Символы.ПС + "*Срочная:* `" + Формат(Срочная,"БЛ = Нет; БИ = Да") + "`" + 
    Символы.ПС + "*Наименование:* `" + Лев(Наименование,200) + ?(СтрДлина(Наименование)>200, ".....","") + "`" + 
    Символы.ПС + "*Описание:* `" +  Лев(Задача.Описание,200) + ?(СтрДлина(Задача.Описание)>200, ".....","") + "`"; 
    
    мСотрудник.Добавить(Автор);
    мПараметры = Новый Массив;
    мПараметры.Добавить(мСотрудник);
    мПараметры.Добавить(Текст);
    мПараметры.Добавить(ПараметрыСеанса.ТекущийПользователь);
    мПараметры.Добавить(ссылка);
    
    ФоновыеЗадания.Выполнить("_ОбщийМодульСервер.Рассылка", 
    мПараметры, Новый УникальныйИдентификатор,"Рассылка в телеграмм");
    
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
    
    Если ДополнительныеСвойства.Свойство("ОбновитьЧЛ") тогда
        //перезапишем листы 
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ
        |   _РаботыЗаДень.Задача КАК Задача
        |ИЗ
        |   РегистрСведений._РаботыЗаДень КАК _РаботыЗаДень
        |ГДЕ
        |   _РаботыЗаДень.Задача.БизнесПроцесс = &БизнесПроцесс";
        
        Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
        
        РезультатЗапроса = Запрос.Выполнить();
        
        ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
        
        Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
            Набор = РегистрыСведений._РаботыЗаДень.СоздатьНаборЗаписей();
            Набор.Отбор.Задача.Установить(ВыборкаДетальныеЗаписи.Задача);
            Набор.Прочитать(); 
            набор.Записать();
        КонецЦикла;
        
    КонецЕсли;
    
КонецПроцедуры

