
&НаКлиенте
Процедура ЗадачаВыполненаПриИзменении(Элемент)
	Видимость();
КонецПроцедуры


&НаСервере
Процедура Видимость()
    
    //оформление цветами , отборы
    
    
    Заголовок = "Исполнение" + ?(Объект.БизнесПроцесс.Срочная, " СРОЧНОЙ задачи " , " задачи " ) + Объект.БизнесПроцесс.Номер + " : " + Объект.ТочкаМаршрута;  
    
    ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(История,"БизнесПроцесс",объект.БизнесПроцесс,ВидСравненияКомпоновкиДанных.Равно);
    
    СписокСерыхСтатусов = новый СписокЗначений;
    СписокСерыхСтатусов.Добавить(Перечисления._СтатусыЗаявки.Отменен);
    СписокСерыхСтатусов.Добавить(Перечисления._СтатусыЗаявки.НаУточнении);
    //СписокСерыхСтатусов.Добавить(Перечисления._СтатусыЗаявки.ПереданоВТестирование);
    //СписокСерыхСтатусов.Добавить(Перечисления._СтатусыЗаявки.Выполнена);
    Если СписокСерыхСтатусов.НайтиПоЗначению(Объект.БизнесПроцесс.Заявка.Статус) <> Неопределено 
        или Объект.БизнесПроцесс.Отменена 
        или объект.ПометкаУдаления 
        или (объект.БизнесПроцесс.Исполнитель <> объект.Исполнитель и Объект.ТочкаМаршрута = БизнесПроцессы._ЗадачиПоЗаявкам.ТочкиМаршрута.Выполнение) тогда
        Элементы.ГруппаФормы.ЦветФона = WebЦвета.Серебряный;
    иначе
        Элементы.ГруппаФормы.ЦветФона = ?(Объект.БизнесПроцесс.Срочная, новый Цвет(233, 242, 255), новый Цвет);
    КонецЕсли;
    Элементы.ЧекЛистыЧасыКлиенту.Видимость = не объект.БизнесПроцесс.НеВыставлятьКонтрагенту;
    Элементы.ПередатьЗадачуСотруднику.Видимость = объект.БизнесПроцесс.Исполнитель = объект.Исполнитель и объект.Исполнитель = ПараметрыСеанса.ТекущийПользователь ;
    
    //видимость   по значениям
    Элементы.БизнесПроцессИсполнитель.Видимость = объект.ТочкаМаршрута = БизнесПроцессы._ЗадачиПоЗаявкам.ТочкиМаршрута.ПроверкаВыполнения;
    Элементы.Исполнитель.Видимость              = объект.ТочкаМаршрута = БизнесПроцессы._ЗадачиПоЗаявкам.ТочкиМаршрута.Выполнение;
    Элементы.ФормаВыполнить.Видимость           = не Объект.Ссылка.Выполнена  ;
    
    Элементы.БизнесПроцессНомерСервисДеск.Видимость = Объект.БизнесПроцесс.ВидОбращения = Справочники._ВидыОбращенийТехподдержки.Сервис_деск;
    
    //кнопки
    Если объект.ТочкаМаршрута = БизнесПроцессы._ЗадачиПоЗаявкам.ТочкиМаршрута.Выполнение тогда
        
        Элементы.ВернутьНаДоработку.Видимость   = Ложь;
        Элементы.ЗадачаВыполнена.Видимость      = Ложь;
        
    Иначе
        
		Элементы.ВернутьНаДоработку.Видимость   = не объект.ЗадачаВыполнена;
		Если объект.ЗадачаВыполнена тогда
			объект.ВернутьНаДоработку           = Ложь
		КонецЕсли; 
		Если объект.ЗадачаВыполнена тогда
			Элементы.ФормаВыполнить.Заголовок   = "Подтвердить выполнение "   ;
        иначеЕсли не объект.ЗадачаВыполнена и объект.ВернутьНаДоработку тогда
            Элементы.ФормаВыполнить.Заголовок   = "Отправить на доработку "   ;
        иначе	
            Элементы.ФормаВыполнить.Заголовок   = "Закрыть задачу";
        КонецЕсли;
        
    КонецЕсли;
    
	Элементы.ГруппаЗаявка.Видимость             = не объект.БизнесПроцесс.Заявка.Пустая();
	Элементы.ОписаниеДоработки.Видимость        = объект.ВернутьНаДоработку или объект.ОписаниеДоработки <> "";
	Элементы.ОписаниеДоработки.ТолькоПросмотр   = не объект.ВернутьНаДоработку;
    
    
    История.УсловноеОформление.Элементы.Очистить();
    ОформлениеДинСписка(ЭтаФорма, "История", "Ссылка", ВидСравненияКомпоновкиДанных.Равно,Объект.Ссылка, новый Шрифт(,10,Истина),"Шрифт");
    //ОформлениеДинСписка(ЭтаФорма, "История", "Ссылка", ВидСравненияКомпоновкиДанных.Равно,Объект.Ссылка, Ложь, "Доступность");
   
    
    
    Если объект.БизнесПроцесс.Отменена тогда
        Элементы.ЗадачаВыполнена.Заголовок      = "Задача действительно отменена ?";
    иначе
        Элементы.ЗадачаВыполнена.Заголовок      = "Задача выполнена, закрыть ?";
    КонецЕсли;
    
    Элементы.Отменена.Видимость                 = объект.БизнесПроцесс.Отменена ;
    Элементы.ЗаявкаПроверена.Видимость          = объект.БизнесПроцесс.Заявка.Проверена ;
    
    
    
    //доступность по правам
    Если РольДоступна("ПолныеПрава") тогда 
        Возврат;
    КонецЕсли;
    
    //остальное разделяемо
    Если СписокСерыхСтатусов.НайтиПоЗначению(Объект.БизнесПроцесс.Заявка.Статус) <> Неопределено
        или (Объект.БизнесПроцесс.Отменена и Объект.БизнесПроцесс.Автор <> ПараметрыСеанса.ТекущийПользователь и не РольДоступна("_ИзменениеВыполненныхПроверенныхЗаявок")) тогда
        ЭтаФорма.ТолькоПросмотр                 = Истина; 
    КонецЕсли;
    
    Если Объект.БизнесПроцесс.Заявка.Проверена тогда
        ЭтаФорма.ТолькоПросмотр                 = Истина; 
    КонецЕсли;
    
    Элементы.Отменить.Видимость                 = ПараметрыСеанса.ТекущийПользователь = Объект.Исполнитель;
    Элементы.ФормаРедТекстЗадачи.Заголовок      = ?(Объект.БизнесПроцесс.Автор = Объект.Исполнитель, "Редактировать текст задачи","Открыть задачу");
    Элементы.ФормаРедТекстЗадачи.Картинка       = ?(Объект.БизнесПроцесс.Автор = Объект.Исполнитель, БиблиотекаКартинок.Изменить,БиблиотекаКартинок.Найти);
    //Элементы.ФормаРедТекстЗадачи.Видимость    = Объект.БизнесПроцесс.Автор = Объект.Исполнитель или РольДоступна("_ИзменениеВыполненныхПроверенныхЗаявок");
    Элементы.Заявка.ТолькоПросмотр              =  Объект.БизнесПроцесс.Автор = Объект.Исполнитель или РольДоступна("_ИзменениеВыполненныхПроверенныхЗаявок");
    
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    
    Видимость();
    Если ЧекЛисты.Количество() тогда
        Элементы.ГруппаИнфо.Скрыть();   
        Элементы.ЧекЛисты.Высота = 10;
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
    
    ПрочитатьЗадачу(ТекущийОбъект);
    
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗадачу(ТекущийОбъект = Неопределено, чистатьЧЛ = Истина)
    
    
    Если ТекущийОбъект = Неопределено тогда
        ТекущийОбъект = Объект;
    КонецЕсли;
    Если чистатьЧЛ тогда
        Набор = РегистрыСведений._РаботыЗаДень.СоздатьНаборЗаписей();
        Набор.Отбор.Задача.Установить(ТекущийОбъект.Ссылка);
        Набор.Прочитать();   
        ЗначениеВДанныеФормы(Набор,ЧекЛисты); 
        ЧекЛисты.Сортировать("Дата");   
        // ЧекЛисты.Отбор.Задача.Добавить(ТекущийОбъект.Ссылка);
        // Элементы.ЧекЛисты1.ОтборСтрок = Новый ФиксированнаяСтруктура("Заявка", ТекущийОбъект.Заявка);
        Заявки = ЧекЛисты.Выгрузить(,"Заявка");
        Заявки.Свернуть("Заявка");
        Для Каждого стр из Заявки Цикл 
            Попытка
                ЗаблокироватьДанныеДляРедактирования(стр.Заявка);
                РазблокироватьДанныеДляРедактирования(стр.Заявка);
            Исключение
                Сообщить("Заявка " + стр.Заявка.Номер+" заблокирована! изменение невозможно
                |" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
                ТолькоПросмотр = Истина;
            КонецПопытки;
        КонецЦикла;
        
        
    КонецЕсли;
    
    Вложения.Очистить();
    //заполнение вложений
    Влож = ТекущийОбъект.БизнесПроцесс.Вложения.Получить();
    Если ТипЗнч(Влож) = Тип("Массив") тогда
        для Каждого Вл из  Влож цикл
            Если Вл.ПолучитьОбъект() <> Неопределено тогда
                Вложения.Добавить(Вл);
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
    
    //форматированный документ
    _ОбщийМодульСервер.ЗаполнитьHTML(ЗаданиеHTML, ?(ТекущийОбъект.БизнесПроцесс.ЗаданиеHTML.Получить() = Неопределено, ТекущийОбъект.БизнесПроцесс.Наименование, ТекущийОбъект.БизнесПроцесс.ЗаданиеHTML.Получить()));
     Видимость();
    
     Для  Каждого стр из ЧекЛисты цикл
         стр.НельзяМенять = стр.Дата <> Дата(1,1,1) и стр.Дата < ДатаЗапрета 
         или (//стр.Заявка.статус = Перечисления._СтатусыЗаявки.Выполнена   или // достатчоно галки проверена
          стр.Заявка.проверена 
         или стр.Заявка.Контрагент.Блокировка) ;
         стр.ДругаяЗаявка = стр.Заявка <> Документы._Заявка.ПустаяСсылка() и стр.Заявка <> Объект.БизнесПроцесс.Заявка;
     КонецЦикла;
    
    
КонецПроцедуры
 

&НаКлиенте
Процедура ВернутьНаДоработкуПриИзменении(Элемент)
    
    Если Объект.ВернутьНаДоработку = Ложь тогда
        Объект.ОписаниеДоработки = "";    
    КонецЕсли;
    
    Видимость();
    
КонецПроцедуры

 &НаСервере
Процедура ЗаполнитьОписание ()
    
    Объект.Описание = "";
    
    Для Каждого стр из ЧекЛисты цикл
        Объект.Описание = Объект.Описание + СтрШаблон("[Дата]: %1 (%2 ч.): 
        |[Описание] : %3;
        |
        |" , формат(стр.Дата,"ДФ=dd.MM.yy"),Формат(стр.Часы, "ЧДЦ=2; ЧН=-; ЧГ=0"),стр.Описание);
        
    КонецЦикла;
    
    
КонецПроцедуры


&НаКлиенте
Процедура ЗаданиеHTMLПриИзменении(Элемент)
    
    Сообщить("Изменения отменены, доступно только чтение текста задачи");
    ПрочитатьЗадачу()

КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
    
    Отказ = Истина;
    
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
    
    Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    
    ДанныеФайла = Неопределено;
    Файл = Вложения.НайтиПоИдентификатору(ВыбраннаяСтрока).Значение;
    _ОбщийМодульСервер.ОбновитьПредпросмотр(ДанныеФайла,Файл,УникальныйИдентификатор);
    Если ДанныеФайла = Неопределено тогда 
        _ОткрытьФайл(Элемент, Файл, Поле, СтандартнаяОбработка,УникальныйИдентификатор);
        Возврат; 
    КонецЕсли;
    ОткрытьФорму("Обработка._РабочийСтол_Заявки.Форма.ПросмотрВложения",новый Структура("Файл,Заголовок",ДанныеФайла,Файл),ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
    
    Если не ЧекЛисты.Количество() и ПараметрыЗаписи.Свойство("ВыполнитьЗадачу") и ПараметрыЗаписи.ВыполнитьЗадачу тогда
        ПоказатьПредупреждение(,"Вы не ввели ни одного чек листа!",,"Напоминание программы:");
    КонецЕсли;
    
    ЗаполнитьОписание();

КонецПроцедуры

&НаКлиенте
Процедура Отменить(Команда)
    
    ПоказатьВопрос(новый ОписаниеОповещения("ОтменитьЗавершение", ЭтаФорма),
    "Отменить задачу " + ?(Модифицированность," (текущие изменения будут отменены)","") + " ?",РежимДиалогаВопрос.ДаНет) ;
    
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗавершение(Ответ,ДП) Экспорт
    
    Если Ответ = КодВозвратаДиалога.Да тогда
        
        ОтменитьПодчиненныеЗадачи();
        Прочитать();
        ОповеститьОВыборе("ОтмененаЗадача");
        
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ОтменитьПодчиненныеЗадачи() Экспорт
    
    
    НачатьТранзакцию();
    Попытка
        Блокировка = Новый БлокировкаДанных;
        ЭлементБлокировки = Блокировка.Добавить("БизнесПроцесс._ЗадачиПоЗаявкам");
        ЭлементБлокировки.УстановитьЗначение("Ссылка", Объект.БизнесПроцесс);
        Блокировка.Заблокировать();
        
        БП =  Объект.БизнесПроцесс.ПолучитьОбъект();
        БП.Отменена = Истина;
        БП.Записать();
        
        ЗафиксироватьТранзакцию();
    Исключение
        ОтменитьТранзакцию();
        Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
    КонецПопытки;
    
    
    
   //
   // Запрос = Новый Запрос;
   // Запрос.Текст = 
   //     "ВЫБРАТЬ
   //     |   _ИсполнениеЗадач.Ссылка КАК Ссылка
   //     |ИЗ
   //     |   Задача._ИсполнениеЗадач КАК _ИсполнениеЗадач
   //     |ГДЕ
   //     |   _ИсполнениеЗадач.ПометкаУдаления = ЛОЖЬ
   //     |   И _ИсполнениеЗадач.Выполнена = ЛОЖЬ
   //     |   И _ИсполнениеЗадач.БизнесПроцесс = &БизнесПроцесс";
   // 
   // Запрос.УстановитьПараметр("БизнесПроцесс", Объект.БизнесПроцесс);
   // 
   // РезультатЗапроса = Запрос.Выполнить();
   // 
   // ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
   // 
   // Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
   //     Если не ВыборкаДетальныеЗаписи.Ссылка.чекЛисты.количество() тогда
   //         Задача = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
   //         Задача.УстановитьПометкуУдаления(Истина);
   //     КонецЕсли;
   // КонецЦикла;
    
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьТекстЗадачи(Команда)
    
    ОткрытьФорму("БизнесПроцесс._ЗадачиПоЗаявкам.Форма.СозданиеЗадания",новый Структура("Ключ",Объект.БизнесПроцесс ),ЭтаФорма,,,,
    новый ОписаниеОповещения("ПеречитатьЗадачу",ЭтаФорма));
    
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьЗадачу(Рез,ДП) Экспорт
    
   ПрочитатьЗадачу(,Ложь);
   ОбновитьОтображениеДанных();
   
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
    
    Видимость();

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
    Записать();
    Закрыть();
КонецПроцедуры


&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
    
    _ОбщийМодульСервер.ПроверитьРСНаДатуЗапрета(ЧекЛисты,Отказ,ДатаЗапрета);  
    Если не Отказ тогда
        Набор = ДанныеФормыВЗначение(ЧекЛисты,тип("РегистрСведенийНаборЗаписей._РаботыЗаДень")); 
        для Каждого стр из Набор Цикл 
            стр.Сотрудник       = ТекущийОбъект.Исполнитель;
            стр.Заявка          = ?(стр.Заявка.Пустая(),    Объект.БизнесПроцесс.           Заявка,стр.Заявка);
            стр.Задача          = ?( стр.Задача.Пустая(),   ТекущийОбъект.Ссылка,           стр.Задача);
            стр.КодСтроки       = ?(стр.КодСтроки = "",     новый УникальныйИдентификатор,  стр.КодСтроки);
        КонецЦикла;
        Набор.ДополнительныеСвойства.Вставить("НеЗаписыватьОписание"); 
        ТекущийОбъект.ДополнительныеСвойства.Вставить("ЧекЛисты",Набор);
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
    
    КлючОбъекта = "Задача._ИсполнениеЗадач.Форма.ФормаЗадачи/Такси/НастройкиОкна";
    ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;
    ХранилищеСистемныхНастроек.Удалить(КлючОбъекта,"", ИмяПользователя);
    КлючСохраненияПоложенияОкна = Строка(Новый УникальныйИдентификатор);
    
    РедактированиеИзЗадачи = Параметры.РедактированиеИзЗадачи;
    
    
        
    Даты = ДатыЗапретаИзмененияСлужебный.РассчитанныеДатыЗапретаИзменения();
    Если даты.найти(ПараметрыСеанса.ТекущийПользователь)= Неопределено тогда
        ДатаЗапрета = даты.найти(Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей).ДатаЗапрета;
    иначе
        Попытка
            ДатаЗапрета = даты.найти(ПараметрыСеанса.ТекущийПользователь).ДатаЗапрета;
        Исключение
            ДатаЗапрета = Дата(1,1,1);
        КонецПопытки;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
     ПеречитатьЗадачу("","") ;
КонецПроцедуры

 
&НаСервере
Процедура ЧекЛисты1ЧасыПриИзмененииНаСервере()
    
    Если Элементы.ЧекЛистыЧасыКлиенту.Видимость Тогда
        ТД = ЧекЛисты.НайтиПоИдентификатору(Элементы.ЧекЛисты.ТекущаяСтрока);
        ОкруглитьДоЧетвертиЧаса(ТД.ЧасыКлиенту);
        ТД.ЧасыКлиенту = ТД.Часы ;
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛисты1ЧасыПриИзменении(Элемент)
    ЧекЛисты1ЧасыПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
    ПриЧтенииНаСервере(ТекущийОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистыПередУдалением(Элемент, Отказ)
    для Каждого стр из Элементы.ЧекЛисты.ВыделенныеСтроки   Цикл 
        ТД = ЧекЛисты.НайтиПоИдентификатору(стр);
        Отказ = НельзяУдалитьИзменить(ТД);     
        Если  Отказ тогда
            Сообщить("в выделенных строках присутствуют строки которые нельзя удалить");
            Прервать;
        КонецЕсли;
    КонецЦикла;         

КонецПроцедуры


&НаКлиенте
Функция НельзяУдалитьИзменить (ТД )
    
    //либо полные права
    //либо нельзя если:
    //дата запрета
    //если защищена и ты удаляешь чужой лист 
    
    Возврат   ?(РольДоступна1("ПолныеПрава") или  РольДоступна1("_ИзменениеВыполненныхПроверенныхЗаявок"),Ложь,
    ТД.НельзяМенять   )
    
КонецФункции

&Насервере 
Функция  РольДоступна1(Роль)
    
    Возврат РольДоступна(Роль);
    
КонецФункции

&НаКлиенте
Процедура ЧекЛистыПередНачаломИзменения(Элемент, Отказ)
    Отказ = НельзяУдалитьИзменить(Элементы.ЧекЛисты.ТекущиеДанные);     
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛисты1ДатаПриИзменении(Элемент)
    
    Элементы.ЧекЛисты.ТекущиеДанные.ПроверятьДатуЗапрета = Истина;
    
КонецПроцедуры


&Насервере
Функция СписокСотрудниковЗадачи()
    Список = новый СписокЗначений;
    Запрос = Новый Запрос;
    Если Объект.БизнесПроцесс.Заявка.Пустая() тогда
        Запрос.Текст = 
        "ВЫБРАТЬ
        |   Пользователи.Ссылка КАК Сотрудник
        |ИЗ
        |   Справочник.Пользователи КАК Пользователи
        |ГДЕ
        |   НЕ Пользователи.Служебный
        |   И НЕ Пользователи.ПометкаУдаления
        |   И НЕ Пользователи.Недействителен";
    иначе
        Запрос.Текст = 
        "ВЫБРАТЬ
        |   _ЗаявкаСмета.Сотрудник КАК Сотрудник
        |ИЗ
        |   Документ._Заявка.Смета КАК _ЗаявкаСмета
        |ГДЕ
        |   _ЗаявкаСмета.Ссылка = &Ссылка";
        
        Запрос.УстановитьПараметр("Ссылка", Объект.БизнесПроцесс.Заявка);
    КонецЕсли;
    Список.ЗагрузитьЗначения( Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник"));
    Возврат Список;
КонецФункции

&НаКлиенте
Процедура ПередатьЗадачуСотруднику(Команда)
    
    Сотрудники = СписокСотрудниковЗадачи();
    
    ПоказатьВыборИзМеню(новый ОписаниеОповещения("ПередатьЗадачуСотрудникуЗавершение",ЭтаФорма),Сотрудники,Элементы.ПередатьЗадачуСотруднику);
   
КонецПроцедуры

&НаКлиенте
Процедура ПередатьЗадачуСотрудникуЗавершение(Значение, ДП) Экспорт
    Если Значение <> Неопределено тогда
        Записать();
        ПередатьЗадачуСотрудникуНаСервере(Значение.Значение);
        Прочитать();
    КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ПередатьЗадачуСотрудникуНаСервере(Значение)
    
    БП = объект.БизнесПроцесс.ПолучитьОбъект();
    БП.Исполнитель = Значение;
    БП.Стартован = Ложь;
    БП.Старт();
    
КонецПроцедуры

&НаКлиенте
Процедура ЧекЛистыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
    отказ = Истина;
    КомментарииПередНачаломДобавленияСервер();
    
КонецПроцедуры

&Насервере
Процедура КомментарииПередНачаломДобавленияСервер()
    
    строка = ЧекЛисты.Добавить();
    строка.Дата = ТекущаяДата();
    Элементы.ЧекЛисты.ТекущаяСтрока = строка.ПолучитьИдентификатор();
    
    
КонецПроцедуры

&НаКлиенте
Процедура ИсторияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
    тд = Элемент.ТекущиеДанные;
    Если ТД = Неопределено тогда
        Возврат;
    КонецЕсли;
    СтандартнаяОбработка = не Объект.Ссылка = тд.ссылка;
КонецПроцедуры

 