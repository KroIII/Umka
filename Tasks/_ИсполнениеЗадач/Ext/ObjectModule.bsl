
Процедура ПриЗаписи(Отказ)
    
    Если ОбменДанными.Загрузка или Отказ тогда
        Возврат;
    КонецЕсли;
    
    Если не ДополнительныеСвойства.Свойство("ЭтоНовый") тогда
        ДополнительныеСвойства.ЧекЛисты.ДополнительныеСвойства.Вставить("ПропускатьПроверкуЗакрытойЗаявки"); 
        ДополнительныеСвойства.ЧекЛисты.Записать();
    КонецЕсли;
    //
    //Если не Отказ  тогда
    //    Если  ДополнительныеСвойства.Свойство("РедактированиеИзЗадачи")  тогда
    //        _ОбщийМодульСервер.ПеренестиЧлВЗаявку(Ссылка.БизнесПроцесс.Заявка);
    //    иначе
    //        Параметры = Новый Массив;
    //        Параметры.Добавить(Ссылка.БизнесПроцесс.Заявка);
    //        ФоновыеЗадания.Выполнить("_ОбщийМодульСервер.ПеренестиЧлВЗаявку", 
    //        Параметры, Новый УникальныйИдентификатор,"ПеренестиЧлВЗаявку");      
    //    КонецЕсли;
    //КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ)
    
    Если ОбменДанными.Загрузка тогда
        Возврат;
    КонецЕсли;
    
    ЧекЛисты = Неопределено;
    Если  не ЭтоНовый()  тогда 
        ДополнительныеСвойства.Свойство("ЧекЛисты",ЧекЛисты);
        
        Если ЧекЛисты = Неопределено Тогда 
            ЧекЛисты = РегистрыСведений._РаботыЗаДень.СоздатьНаборЗаписей();
            ЧекЛисты.Отбор.Задача.Установить(Ссылка);
            ЧекЛисты.Прочитать();
            ДополнительныеСвойства.Вставить("ЧекЛисты",ЧекЛисты);
        КонецЕсли;
        Для Каждого стр из  ЧекЛисты цикл
            
            Если не ЗначениеЗаполнено(стр.КодСтроки) тогда
                стр.КодСтроки = новый УникальныйИдентификатор;
            КонецЕсли;
            
        КонецЦикла;
    иначе 
        ДополнительныеСвойства.Вставить("ЭтоНовый",ЭтоНовый()); 
    КонецЕсли;
    

    Если не РольДоступна("ПолныеПрава") и не РольДоступна("_ИзменениеВыполненныхПроверенныхЗаявок") и БизнесПроцесс.Заявка.Проверена тогда   // и не БизнесПроцесс.Отменена 
        //или БизнесПроцесс.Заявка.Статус = Перечисления._СтатусыЗаявки.Выполнена// достатчоно галки проверена) 
         ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Заявка заблокирована для изменения, изменение задачи невозможно",,,,Отказ);
    КонецЕсли;
    
    
    Если не ЗначениеЗаполнено(ДатаПлановая) тогда
        ДатаПлановая = БизнесПроцесс.ДатаПлановая;
    КонецЕсли;
    
    
    // Наименование = БизнесПроцесс.Наименование;
    
    ЧасыФакт = ?( не ЭтоНовый(), ЧекЛисты.Итог("Часы"),0);
    Если Выполнена <> Ссылка.Выполнена и не ЗначениеЗаполнено(ДатаИсполнения) тогда
        ДатаИсполнения = ТекущаяДата();
    КонецЕсли;
    Если Отказ тогда
        Возврат 
    КонецЕсли;
    
    Блокировка = Новый БлокировкаДанных;
    ЭлементБлокировки = Блокировка.Добавить("РегистрСведений._ДанныеЗадач");
    ЭлементБлокировки.УстановитьЗначение("Задача", Ссылка);
    ЭлементБлокировки.УстановитьЗначение("БП", БизнесПроцесс);
    Блокировка.Заблокировать();
    
    
    НаборЗаписей = РегистрыСведений._ДанныеЗадач.СоздатьНаборЗаписей();
    
    НаборЗаписей.Отбор.БП.Значение = БизнесПроцесс;
    НаборЗаписей.Отбор.БП.Использование = Истина;
    
    НаборЗаписей.Отбор.Задача.Значение = Ссылка;
    НаборЗаписей.Отбор.Задача.Использование = Истина;
    
    Запись = НаборЗаписей.Добавить();
    Запись.Период = ТекущаяДата();
    Запись.БП = БизнесПроцесс;
    Запись.Задача = Ссылка;
    Запись.ВернутьНаДоработку = ВернутьНаДоработку;
    Запись.ЗадачаВыполнена = ЗадачаВыполнена;
    Запись.ОписаниеДоработки = ОписаниеДоработки;
    НаборЗаписей.Записать();
    
    Если ТочкаМаршрута = БизнесПроцессы._ЗадачиПоЗаявкам.ТочкиМаршрута.ПроверкаВыполнения 
        и не Ссылка.ВернутьНаДоработку и Ссылка.ВернутьНаДоработку и Выполнена тогда
        
        НачатьТранзакцию();
        Попытка
            Блокировка = Новый БлокировкаДанных;
            ЭлементБлокировки = Блокировка.Добавить("БизнесПроцесс._ЗадачиПоЗаявкам");
            ЭлементБлокировки.УстановитьЗначение("Ссылка", БизнесПроцесс);
            Блокировка.Заблокировать();
            
            БП =  БизнесПроцесс.ПолучитьОбъект();
            БП.Отменена = Ложь;
            БП.Записать();
            
            ЗафиксироватьТранзакцию();
        Исключение
            ОтменитьТранзакцию();
            Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
        КонецПопытки;
        
    КонецЕсли;
    
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
    ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Наименование"));
КонецПроцедуры
